
UART_DMA_IDLINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bdc  08004bdc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004be4  08004be4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000330  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000398  20000398  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b830  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c4f  00000000  00000000  0002b90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a78  00000000  00000000  0002d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000829  00000000  00000000  0002dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002148e  00000000  00000000  0002e801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d5e3  00000000  00000000  0004fc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6e6a  00000000  00000000  0005d272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000032ac  00000000  00000000  001240dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00127388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b6c 	.word	0x08004b6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004b6c 	.word	0x08004b6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <HAL_UARTEx_RxEventCallback+0x5c>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d10c      	bne.n	800059c <HAL_UARTEx_RxEventCallback+0x30>
    {
        HAL_UARTEx_ReceiveToIdle_DMA(&huart4, Rx_Buf, Rx_Buf_SIZE);
 8000582:	220a      	movs	r2, #10
 8000584:	4911      	ldr	r1, [pc, #68]	; (80005cc <HAL_UARTEx_RxEventCallback+0x60>)
 8000586:	4812      	ldr	r0, [pc, #72]	; (80005d0 <HAL_UARTEx_RxEventCallback+0x64>)
 8000588:	f002 fa75 	bl	8002a76 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <HAL_UARTEx_RxEventCallback+0x68>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <HAL_UARTEx_RxEventCallback+0x68>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f022 0208 	bic.w	r2, r2, #8
 800059a:	601a      	str	r2, [r3, #0]
    }
    if (huart->Instance == USART6)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <HAL_UARTEx_RxEventCallback+0x6c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d10c      	bne.n	80005c0 <HAL_UARTEx_RxEventCallback+0x54>
    {
        HAL_UARTEx_ReceiveToIdle_DMA(&huart6, Screen_CMD, 2);
 80005a6:	2202      	movs	r2, #2
 80005a8:	490c      	ldr	r1, [pc, #48]	; (80005dc <HAL_UARTEx_RxEventCallback+0x70>)
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <HAL_UARTEx_RxEventCallback+0x74>)
 80005ac:	f002 fa63 	bl	8002a76 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x78>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <HAL_UARTEx_RxEventCallback+0x78>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f022 0208 	bic.w	r2, r2, #8
 80005be:	601a      	str	r2, [r3, #0]
    }
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40004c00 	.word	0x40004c00
 80005cc:	20000228 	.word	0x20000228
 80005d0:	200000d8 	.word	0x200000d8
 80005d4:	20000168 	.word	0x20000168
 80005d8:	40011400 	.word	0x40011400
 80005dc:	20000240 	.word	0x20000240
 80005e0:	20000120 	.word	0x20000120
 80005e4:	200001c8 	.word	0x200001c8

080005e8 <in>:


void in(void)
  {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, Rx_Buf, Rx_Buf_SIZE);
 80005ee:	220a      	movs	r2, #10
 80005f0:	4915      	ldr	r1, [pc, #84]	; (8000648 <in+0x60>)
 80005f2:	4816      	ldr	r0, [pc, #88]	; (800064c <in+0x64>)
 80005f4:	f002 fa3f 	bl	8002a76 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <in+0x68>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <in+0x68>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f022 0208 	bic.w	r2, r2, #8
 8000606:	601a      	str	r2, [r3, #0]
  Rx_Buf[4]=0;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <in+0x60>)
 800060a:	2200      	movs	r2, #0
 800060c:	711a      	strb	r2, [r3, #4]
  for(uint8_t i=0;i<Rx_Buf_SIZE;++i)
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]
 8000612:	e008      	b.n	8000626 <in+0x3e>
  {
	  CARDADD[i]=Rx_Buf[i];
 8000614:	79fa      	ldrb	r2, [r7, #7]
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	490b      	ldr	r1, [pc, #44]	; (8000648 <in+0x60>)
 800061a:	5c89      	ldrb	r1, [r1, r2]
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <in+0x6c>)
 800061e:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=0;i<Rx_Buf_SIZE;++i)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3301      	adds	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b09      	cmp	r3, #9
 800062a:	d9f3      	bls.n	8000614 <in+0x2c>
  }
  printf("%s",CARDADD);
 800062c:	4909      	ldr	r1, [pc, #36]	; (8000654 <in+0x6c>)
 800062e:	480a      	ldr	r0, [pc, #40]	; (8000658 <in+0x70>)
 8000630:	f003 fc26 	bl	8003e80 <iprintf>
  memset(Rx_Buf,0,Rx_Buf_SIZE);
 8000634:	220a      	movs	r2, #10
 8000636:	2100      	movs	r1, #0
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <in+0x60>)
 800063a:	f003 fc76 	bl	8003f2a <memset>
  }
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000228 	.word	0x20000228
 800064c:	200000d8 	.word	0x200000d8
 8000650:	20000168 	.word	0x20000168
 8000654:	20000234 	.word	0x20000234
 8000658:	08004b84 	.word	0x08004b84

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fc56 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f824 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 f938 	bl	80008dc <MX_GPIO_Init>
  MX_DMA_Init();
 800066c:	f000 f900 	bl	8000870 <MX_DMA_Init>
  MX_I2C1_Init();
 8000670:	f000 f87c 	bl	800076c <MX_I2C1_Init>
  MX_UART4_Init();
 8000674:	f000 f8a8 	bl	80007c8 <MX_UART4_Init>
  MX_USART6_UART_Init();
 8000678:	f000 f8d0 	bl	800081c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, Screen_CMD, 2);
 800067c:	2202      	movs	r2, #2
 800067e:	4909      	ldr	r1, [pc, #36]	; (80006a4 <main+0x48>)
 8000680:	4809      	ldr	r0, [pc, #36]	; (80006a8 <main+0x4c>)
 8000682:	f002 f9f8 	bl	8002a76 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <main+0x50>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <main+0x50>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f022 0208 	bic.w	r2, r2, #8
 8000694:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Screen_CMD[0]==5)
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <main+0x48>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b05      	cmp	r3, #5
 800069c:	d1fb      	bne.n	8000696 <main+0x3a>
	  {
	  	in();
 800069e:	f7ff ffa3 	bl	80005e8 <in>
	  if(Screen_CMD[0]==5)
 80006a2:	e7f8      	b.n	8000696 <main+0x3a>
 80006a4:	20000240 	.word	0x20000240
 80006a8:	20000120 	.word	0x20000120
 80006ac:	200001c8 	.word	0x200001c8

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fc33 	bl	8003f2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xb4>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xb4>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xb4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <SystemClock_Config+0xb8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <SystemClock_Config+0xb8>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <SystemClock_Config+0xb8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fc75 	bl	8002010 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800072c:	f000 f956 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fed8 	bl	8002500 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000756:	f000 f941 	bl	80009dc <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2C1_Init+0x50>)
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <MX_I2C1_Init+0x54>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_I2C1_Init+0x50>)
 8000778:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x58>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_I2C1_Init+0x50>)
 800078a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_I2C1_Init+0x50>)
 80007aa:	f001 faed 	bl	8001d88 <HAL_I2C_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 f912 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000084 	.word	0x20000084
 80007c0:	40005400 	.word	0x40005400
 80007c4:	000186a0 	.word	0x000186a0

080007c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_UART4_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_UART4_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_UART4_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_UART4_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_UART4_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_UART4_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_UART4_Init+0x4c>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_UART4_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_UART4_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_UART4_Init+0x4c>)
 8000800:	f002 f85e 	bl	80028c0 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f8e7 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000d8 	.word	0x200000d8
 8000818:	40004c00 	.word	0x40004c00

0800081c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART6_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_USART6_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_USART6_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART6_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART6_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART6_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART6_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART6_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART6_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART6_UART_Init+0x4c>)
 8000854:	f002 f834 	bl	80028c0 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f000 f8bd 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000120 	.word	0x20000120
 800086c:	40011400 	.word	0x40011400

08000870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_DMA_Init+0x68>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <MX_DMA_Init+0x68>)
 8000880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_DMA_Init+0x68>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_DMA_Init+0x68>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <MX_DMA_Init+0x68>)
 800089c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_DMA_Init+0x68>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	200d      	movs	r0, #13
 80008b4:	f000 fc79 	bl	80011aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80008b8:	200d      	movs	r0, #13
 80008ba:	f000 fc92 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	2039      	movs	r0, #57	; 0x39
 80008c4:	f000 fc71 	bl	80011aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008c8:	2039      	movs	r0, #57	; 0x39
 80008ca:	f000 fc8a 	bl	80011e2 <HAL_NVIC_EnableIRQ>

}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MX_GPIO_Init+0xd4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a2d      	ldr	r2, [pc, #180]	; (80009b0 <MX_GPIO_Init+0xd4>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_GPIO_Init+0xd4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <MX_GPIO_Init+0xd4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <MX_GPIO_Init+0xd4>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_GPIO_Init+0xd4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_GPIO_Init+0xd4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <MX_GPIO_Init+0xd4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_GPIO_Init+0xd4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_GPIO_Init+0xd4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <MX_GPIO_Init+0xd4>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_GPIO_Init+0xd4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_GPIO_Init+0xd4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <MX_GPIO_Init+0xd4>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_GPIO_Init+0xd4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, L1_Pin|L2_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <MX_GPIO_Init+0xd8>)
 8000986:	f001 f9e5 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L1_Pin L2_Pin */
  GPIO_InitStruct.Pin = L1_Pin|L2_Pin;
 800098a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_GPIO_Init+0xd8>)
 80009a4:	f001 f83a 	bl	8001a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020c00 	.word	0x40020c00

080009b8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);  //make changes in the &huart 1,2,3,... accordingly
 80009c0:	1d39      	adds	r1, r7, #4
 80009c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c6:	2201      	movs	r2, #1
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <__io_putchar+0x20>)
 80009ca:	f001 ffc9 	bl	8002960 <HAL_UART_Transmit>
  return ch;
 80009ce:	687b      	ldr	r3, [r7, #4]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000120 	.word	0x20000120

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_I2C_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12c      	bne.n	8000ab4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <HAL_I2C_MspInit+0x8c>)
 8000a94:	f000 ffc2 	bl	8001a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a68      	ldr	r2, [pc, #416]	; (8000c88 <HAL_UART_MspInit+0x1c0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d162      	bne.n	8000bb0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
 8000aee:	4b67      	ldr	r3, [pc, #412]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a66      	ldr	r2, [pc, #408]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000af4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b64      	ldr	r3, [pc, #400]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	4b60      	ldr	r3, [pc, #384]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a5f      	ldr	r2, [pc, #380]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b5d      	ldr	r3, [pc, #372]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b22:	2303      	movs	r3, #3
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b32:	2308      	movs	r3, #8
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4854      	ldr	r0, [pc, #336]	; (8000c90 <HAL_UART_MspInit+0x1c8>)
 8000b3e:	f000 ff6d 	bl	8001a1c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000b42:	4b54      	ldr	r3, [pc, #336]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b44:	4a54      	ldr	r2, [pc, #336]	; (8000c98 <HAL_UART_MspInit+0x1d0>)
 8000b46:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000b48:	4b52      	ldr	r3, [pc, #328]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b50:	4b50      	ldr	r3, [pc, #320]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b56:	4b4f      	ldr	r3, [pc, #316]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b5c:	4b4d      	ldr	r3, [pc, #308]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b62:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b64:	4b4b      	ldr	r3, [pc, #300]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b6a:	4b4a      	ldr	r3, [pc, #296]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000b70:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b76:	4b47      	ldr	r3, [pc, #284]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b7c:	4b45      	ldr	r3, [pc, #276]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000b82:	4844      	ldr	r0, [pc, #272]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b84:	f000 fb48 	bl	8001218 <HAL_DMA_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000b8e:	f7ff ff25 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a3f      	ldr	r2, [pc, #252]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b98:	4a3e      	ldr	r2, [pc, #248]	; (8000c94 <HAL_UART_MspInit+0x1cc>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2034      	movs	r0, #52	; 0x34
 8000ba4:	f000 fb01 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ba8:	2034      	movs	r0, #52	; 0x34
 8000baa:	f000 fb1a 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000bae:	e066      	b.n	8000c7e <HAL_UART_MspInit+0x1b6>
  else if(huart->Instance==USART6)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a39      	ldr	r2, [pc, #228]	; (8000c9c <HAL_UART_MspInit+0x1d4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d161      	bne.n	8000c7e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a32      	ldr	r2, [pc, #200]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000bc4:	f043 0320 	orr.w	r3, r3, #32
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f003 0320 	and.w	r3, r3, #32
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a2b      	ldr	r2, [pc, #172]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <HAL_UART_MspInit+0x1c4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf2:	23c0      	movs	r3, #192	; 0xc0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c02:	2308      	movs	r3, #8
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4824      	ldr	r0, [pc, #144]	; (8000ca0 <HAL_UART_MspInit+0x1d8>)
 8000c0e:	f000 ff05 	bl	8001a1c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c14:	4a24      	ldr	r2, [pc, #144]	; (8000ca8 <HAL_UART_MspInit+0x1e0>)
 8000c16:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c1a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000c1e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c32:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000c52:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c54:	f000 fae0 	bl	8001218 <HAL_DMA_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8000c5e:	f7ff febd 	bl	80009dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c66:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c68:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <HAL_UART_MspInit+0x1dc>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2047      	movs	r0, #71	; 0x47
 8000c74:	f000 fa99 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000c78:	2047      	movs	r0, #71	; 0x47
 8000c7a:	f000 fab2 	bl	80011e2 <HAL_NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3730      	adds	r7, #48	; 0x30
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004c00 	.word	0x40004c00
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	20000168 	.word	0x20000168
 8000c98:	40026040 	.word	0x40026040
 8000c9c:	40011400 	.word	0x40011400
 8000ca0:	40020800 	.word	0x40020800
 8000ca4:	200001c8 	.word	0x200001c8
 8000ca8:	40026428 	.word	0x40026428

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 f95c 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <DMA1_Stream2_IRQHandler+0x10>)
 8000d06:	f000 fc1f 	bl	8001548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000168 	.word	0x20000168

08000d14 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <UART4_IRQHandler+0x10>)
 8000d1a:	f001 ff09 	bl	8002b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000d8 	.word	0x200000d8

08000d28 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <DMA2_Stream1_IRQHandler+0x10>)
 8000d2e:	f000 fc0b 	bl	8001548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001c8 	.word	0x200001c8

08000d3c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <USART6_IRQHandler+0x10>)
 8000d42:	f001 fef5 	bl	8002b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000120 	.word	0x20000120

08000d50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e00a      	b.n	8000d78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d62:	f3af 8000 	nop.w
 8000d66:	4601      	mov	r1, r0
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	60ba      	str	r2, [r7, #8]
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf0      	blt.n	8000d62 <_read+0x12>
  }

  return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e009      	b.n	8000db0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fe07 	bl	80009b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbf1      	blt.n	8000d9c <_write+0x12>
  }
  return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_close>:

int _close(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dea:	605a      	str	r2, [r3, #4]
  return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_isatty>:

int _isatty(int file)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f003 f8b4 	bl	8003fc8 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20020000 	.word	0x20020000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	20000244 	.word	0x20000244
 8000e94:	20000398 	.word	0x20000398

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eea:	f003 f873 	bl	8003fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fbb5 	bl	800065c <main>
  bx  lr    
 8000ef2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f00:	08004bec 	.word	0x08004bec
  ldr r2, =_sbss
 8000f04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f08:	20000398 	.word	0x20000398

08000f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <HAL_Init+0x40>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_Init+0x40>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_Init+0x40>)
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f92b 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	200f      	movs	r0, #15
 8000f40:	f000 f808 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fd50 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f943 	bl	80011fe <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 f90b 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000248 	.word	0x20000248

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000248 	.word	0x20000248

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff29 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff3e 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff8e 	bl	80010e8 <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff31 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff feda 	bl	8000fdc <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e099      	b.n	8001368 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2202      	movs	r2, #2
 8001238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001254:	e00f      	b.n	8001276 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001256:	f7ff fec1 	bl	8000fdc <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b05      	cmp	r3, #5
 8001262:	d908      	bls.n	8001276 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2220      	movs	r2, #32
 8001268:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2203      	movs	r2, #3
 800126e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e078      	b.n	8001368 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1e8      	bne.n	8001256 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	4b38      	ldr	r3, [pc, #224]	; (8001370 <HAL_DMA_Init+0x158>)
 8001290:	4013      	ands	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d107      	bne.n	80012e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4313      	orrs	r3, r2
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4313      	orrs	r3, r2
 80012de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f023 0307 	bic.w	r3, r3, #7
 80012f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4313      	orrs	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	2b04      	cmp	r3, #4
 8001308:	d117      	bne.n	800133a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4313      	orrs	r3, r2
 8001312:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00e      	beq.n	800133a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fb01 	bl	8001924 <DMA_CheckFifoParam>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2240      	movs	r2, #64	; 0x40
 800132c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001336:	2301      	movs	r3, #1
 8001338:	e016      	b.n	8001368 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fab8 	bl	80018b8 <DMA_CalcBaseAndBitshift>
 8001348:	4603      	mov	r3, r0
 800134a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001350:	223f      	movs	r2, #63	; 0x3f
 8001352:	409a      	lsls	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	f010803f 	.word	0xf010803f

08001374 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_DMA_Start_IT+0x26>
 8001396:	2302      	movs	r3, #2
 8001398:	e040      	b.n	800141c <HAL_DMA_Start_IT+0xa8>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d12f      	bne.n	800140e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2202      	movs	r2, #2
 80013b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 fa4a 	bl	800185c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	223f      	movs	r2, #63	; 0x3f
 80013ce:	409a      	lsls	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0216 	orr.w	r2, r2, #22
 80013e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0208 	orr.w	r2, r2, #8
 80013fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e005      	b.n	800141a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001416:	2302      	movs	r3, #2
 8001418:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800141a:	7dfb      	ldrb	r3, [r7, #23]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001432:	f7ff fdd3 	bl	8000fdc <HAL_GetTick>
 8001436:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d008      	beq.n	8001456 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2280      	movs	r2, #128	; 0x80
 8001448:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e052      	b.n	80014fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0216 	bic.w	r2, r2, #22
 8001464:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001474:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <HAL_DMA_Abort+0x62>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0208 	bic.w	r2, r2, #8
 8001494:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0201 	bic.w	r2, r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a6:	e013      	b.n	80014d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014a8:	f7ff fd98 	bl	8000fdc <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b05      	cmp	r3, #5
 80014b4:	d90c      	bls.n	80014d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2220      	movs	r2, #32
 80014ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e015      	b.n	80014fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1e4      	bne.n	80014a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e2:	223f      	movs	r2, #63	; 0x3f
 80014e4:	409a      	lsls	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d004      	beq.n	8001522 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2280      	movs	r2, #128	; 0x80
 800151c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00c      	b.n	800153c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2205      	movs	r2, #5
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001554:	4b8e      	ldr	r3, [pc, #568]	; (8001790 <HAL_DMA_IRQHandler+0x248>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a8e      	ldr	r2, [pc, #568]	; (8001794 <HAL_DMA_IRQHandler+0x24c>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0a9b      	lsrs	r3, r3, #10
 8001560:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	2208      	movs	r2, #8
 8001574:	409a      	lsls	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d01a      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0204 	bic.w	r2, r2, #4
 800159a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	2208      	movs	r2, #8
 80015a2:	409a      	lsls	r2, r3
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ac:	f043 0201 	orr.w	r2, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b8:	2201      	movs	r2, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4013      	ands	r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d012      	beq.n	80015ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d6:	2201      	movs	r2, #1
 80015d8:	409a      	lsls	r2, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e2:	f043 0202 	orr.w	r2, r3, #2
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ee:	2204      	movs	r2, #4
 80015f0:	409a      	lsls	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d012      	beq.n	8001620 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00b      	beq.n	8001620 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	2204      	movs	r2, #4
 800160e:	409a      	lsls	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	f043 0204 	orr.w	r2, r3, #4
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001624:	2210      	movs	r2, #16
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d043      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d03c      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	2210      	movs	r2, #16
 8001644:	409a      	lsls	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d018      	beq.n	800168a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d108      	bne.n	8001678 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2b00      	cmp	r3, #0
 800166c:	d024      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	4798      	blx	r3
 8001676:	e01f      	b.n	80016b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01b      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	4798      	blx	r3
 8001688:	e016      	b.n	80016b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d107      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0208 	bic.w	r2, r2, #8
 80016a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016bc:	2220      	movs	r2, #32
 80016be:	409a      	lsls	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 808f 	beq.w	80017e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8087 	beq.w	80017e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	2220      	movs	r2, #32
 80016e0:	409a      	lsls	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d136      	bne.n	8001760 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0216 	bic.w	r2, r2, #22
 8001700:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001710:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	d103      	bne.n	8001722 <HAL_DMA_IRQHandler+0x1da>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0208 	bic.w	r2, r2, #8
 8001730:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001736:	223f      	movs	r2, #63	; 0x3f
 8001738:	409a      	lsls	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001752:	2b00      	cmp	r3, #0
 8001754:	d07e      	beq.n	8001854 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
        }
        return;
 800175e:	e079      	b.n	8001854 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d01d      	beq.n	80017aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10d      	bne.n	8001798 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001780:	2b00      	cmp	r3, #0
 8001782:	d031      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	4798      	blx	r3
 800178c:	e02c      	b.n	80017e8 <HAL_DMA_IRQHandler+0x2a0>
 800178e:	bf00      	nop
 8001790:	20000000 	.word	0x20000000
 8001794:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179c:	2b00      	cmp	r3, #0
 800179e:	d023      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
 80017a8:	e01e      	b.n	80017e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10f      	bne.n	80017d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0210 	bic.w	r2, r2, #16
 80017c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d032      	beq.n	8001856 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d022      	beq.n	8001842 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2205      	movs	r2, #5
 8001800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	3301      	adds	r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	429a      	cmp	r2, r3
 800181e:	d307      	bcc.n	8001830 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f2      	bne.n	8001814 <HAL_DMA_IRQHandler+0x2cc>
 800182e:	e000      	b.n	8001832 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001830:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
 8001852:	e000      	b.n	8001856 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001854:	bf00      	nop
    }
  }
}
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001878:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b40      	cmp	r3, #64	; 0x40
 8001888:	d108      	bne.n	800189c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800189a:	e007      	b.n	80018ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3b10      	subs	r3, #16
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <DMA_CalcBaseAndBitshift+0x64>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018d2:	4a13      	ldr	r2, [pc, #76]	; (8001920 <DMA_CalcBaseAndBitshift+0x68>)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d909      	bls.n	80018fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018ee:	f023 0303 	bic.w	r3, r3, #3
 80018f2:	1d1a      	adds	r2, r3, #4
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	659a      	str	r2, [r3, #88]	; 0x58
 80018f8:	e007      	b.n	800190a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001902:	f023 0303 	bic.w	r3, r3, #3
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	aaaaaaab 	.word	0xaaaaaaab
 8001920:	08004ba0 	.word	0x08004ba0

08001924 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d11f      	bne.n	800197e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d856      	bhi.n	80019f2 <DMA_CheckFifoParam+0xce>
 8001944:	a201      	add	r2, pc, #4	; (adr r2, 800194c <DMA_CheckFifoParam+0x28>)
 8001946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194a:	bf00      	nop
 800194c:	0800195d 	.word	0x0800195d
 8001950:	0800196f 	.word	0x0800196f
 8001954:	0800195d 	.word	0x0800195d
 8001958:	080019f3 	.word	0x080019f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d046      	beq.n	80019f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800196c:	e043      	b.n	80019f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001976:	d140      	bne.n	80019fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800197c:	e03d      	b.n	80019fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001986:	d121      	bne.n	80019cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d837      	bhi.n	80019fe <DMA_CheckFifoParam+0xda>
 800198e:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <DMA_CheckFifoParam+0x70>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	080019a5 	.word	0x080019a5
 8001998:	080019ab 	.word	0x080019ab
 800199c:	080019a5 	.word	0x080019a5
 80019a0:	080019bd 	.word	0x080019bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
      break;
 80019a8:	e030      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d025      	beq.n	8001a02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ba:	e022      	b.n	8001a02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019c4:	d11f      	bne.n	8001a06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019ca:	e01c      	b.n	8001a06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d903      	bls.n	80019da <DMA_CheckFifoParam+0xb6>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d003      	beq.n	80019e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019d8:	e018      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
      break;
 80019de:	e015      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00e      	beq.n	8001a0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
      break;
 80019f0:	e00b      	b.n	8001a0a <DMA_CheckFifoParam+0xe6>
      break;
 80019f2:	bf00      	nop
 80019f4:	e00a      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;
 80019f6:	bf00      	nop
 80019f8:	e008      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;
 80019fa:	bf00      	nop
 80019fc:	e006      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;
 80019fe:	bf00      	nop
 8001a00:	e004      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;
 8001a02:	bf00      	nop
 8001a04:	e002      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a06:	bf00      	nop
 8001a08:	e000      	b.n	8001a0c <DMA_CheckFifoParam+0xe8>
      break;
 8001a0a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e16b      	b.n	8001d10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 815a 	bne.w	8001d0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d005      	beq.n	8001a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d130      	bne.n	8001ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 0201 	and.w	r2, r3, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d017      	beq.n	8001b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d123      	bne.n	8001b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	69b9      	ldr	r1, [r7, #24]
 8001b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80b4 	beq.w	8001d0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b60      	ldr	r3, [pc, #384]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a5f      	ldr	r2, [pc, #380]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bbe:	4a5b      	ldr	r2, [pc, #364]	; (8001d2c <HAL_GPIO_Init+0x310>)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_GPIO_Init+0x314>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d02b      	beq.n	8001c42 <HAL_GPIO_Init+0x226>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a51      	ldr	r2, [pc, #324]	; (8001d34 <HAL_GPIO_Init+0x318>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d025      	beq.n	8001c3e <HAL_GPIO_Init+0x222>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a50      	ldr	r2, [pc, #320]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01f      	beq.n	8001c3a <HAL_GPIO_Init+0x21e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_GPIO_Init+0x320>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d019      	beq.n	8001c36 <HAL_GPIO_Init+0x21a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4e      	ldr	r2, [pc, #312]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0x216>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4d      	ldr	r2, [pc, #308]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00d      	beq.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <HAL_GPIO_Init+0x32c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d007      	beq.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_GPIO_Init+0x20a>
 8001c22:	2307      	movs	r3, #7
 8001c24:	e00e      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c26:	2308      	movs	r3, #8
 8001c28:	e00c      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	e00a      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e008      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x228>
 8001c42:	2300      	movs	r3, #0
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	f002 0203 	and.w	r2, r2, #3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c54:	4935      	ldr	r1, [pc, #212]	; (8001d2c <HAL_GPIO_Init+0x310>)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c86:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c8c:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb0:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cda:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b0f      	cmp	r3, #15
 8001d14:	f67f ae90 	bls.w	8001a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020c00 	.word	0x40020c00
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40021400 	.word	0x40021400
 8001d48:	40021800 	.word	0x40021800
 8001d4c:	40021c00 	.word	0x40021c00
 8001d50:	40013c00 	.word	0x40013c00

08001d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
 8001d60:	4613      	mov	r3, r2
 8001d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d64:	787b      	ldrb	r3, [r7, #1]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d70:	e003      	b.n	8001d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d72:	887b      	ldrh	r3, [r7, #2]
 8001d74:	041a      	lsls	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	619a      	str	r2, [r3, #24]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e12b      	b.n	8001ff2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fe42 	bl	8000a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2224      	movs	r2, #36	; 0x24
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dec:	f000 fd40 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8001df0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4a81      	ldr	r2, [pc, #516]	; (8001ffc <HAL_I2C_Init+0x274>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d807      	bhi.n	8001e0c <HAL_I2C_Init+0x84>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4a80      	ldr	r2, [pc, #512]	; (8002000 <HAL_I2C_Init+0x278>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	bf94      	ite	ls
 8001e04:	2301      	movls	r3, #1
 8001e06:	2300      	movhi	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e006      	b.n	8001e1a <HAL_I2C_Init+0x92>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4a7d      	ldr	r2, [pc, #500]	; (8002004 <HAL_I2C_Init+0x27c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	bf94      	ite	ls
 8001e14:	2301      	movls	r3, #1
 8001e16:	2300      	movhi	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0e7      	b.n	8001ff2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4a78      	ldr	r2, [pc, #480]	; (8002008 <HAL_I2C_Init+0x280>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0c9b      	lsrs	r3, r3, #18
 8001e2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4a6a      	ldr	r2, [pc, #424]	; (8001ffc <HAL_I2C_Init+0x274>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d802      	bhi.n	8001e5c <HAL_I2C_Init+0xd4>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	e009      	b.n	8001e70 <HAL_I2C_Init+0xe8>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	4a69      	ldr	r2, [pc, #420]	; (800200c <HAL_I2C_Init+0x284>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	099b      	lsrs	r3, r3, #6
 8001e6e:	3301      	adds	r3, #1
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	495c      	ldr	r1, [pc, #368]	; (8001ffc <HAL_I2C_Init+0x274>)
 8001e8c:	428b      	cmp	r3, r1
 8001e8e:	d819      	bhi.n	8001ec4 <HAL_I2C_Init+0x13c>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e59      	subs	r1, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e9e:	1c59      	adds	r1, r3, #1
 8001ea0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ea4:	400b      	ands	r3, r1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_I2C_Init+0x138>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1e59      	subs	r1, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebe:	e051      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	e04f      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d111      	bne.n	8001ef0 <HAL_I2C_Init+0x168>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	e012      	b.n	8001f16 <HAL_I2C_Init+0x18e>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e58      	subs	r0, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	0099      	lsls	r1, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Init+0x196>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e022      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10e      	bne.n	8001f44 <HAL_I2C_Init+0x1bc>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e58      	subs	r0, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	440b      	add	r3, r1
 8001f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f42:	e00f      	b.n	8001f64 <HAL_I2C_Init+0x1dc>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e58      	subs	r0, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	0099      	lsls	r1, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	6809      	ldr	r1, [r1, #0]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6911      	ldr	r1, [r2, #16]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68d2      	ldr	r2, [r2, #12]
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	000186a0 	.word	0x000186a0
 8002000:	001e847f 	.word	0x001e847f
 8002004:	003d08ff 	.word	0x003d08ff
 8002008:	431bde83 	.word	0x431bde83
 800200c:	10624dd3 	.word	0x10624dd3

08002010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e267      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d075      	beq.n	800211a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800202e:	4b88      	ldr	r3, [pc, #544]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b04      	cmp	r3, #4
 8002038:	d00c      	beq.n	8002054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800203a:	4b85      	ldr	r3, [pc, #532]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002042:	2b08      	cmp	r3, #8
 8002044:	d112      	bne.n	800206c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002046:	4b82      	ldr	r3, [pc, #520]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002052:	d10b      	bne.n	800206c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4b7e      	ldr	r3, [pc, #504]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d05b      	beq.n	8002118 <HAL_RCC_OscConfig+0x108>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d157      	bne.n	8002118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e242      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d106      	bne.n	8002084 <HAL_RCC_OscConfig+0x74>
 8002076:	4b76      	ldr	r3, [pc, #472]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a75      	ldr	r2, [pc, #468]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e01d      	b.n	80020c0 <HAL_RCC_OscConfig+0xb0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x98>
 800208e:	4b70      	ldr	r3, [pc, #448]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a6f      	ldr	r2, [pc, #444]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b6d      	ldr	r3, [pc, #436]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a6c      	ldr	r2, [pc, #432]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0xb0>
 80020a8:	4b69      	ldr	r3, [pc, #420]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a68      	ldr	r2, [pc, #416]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b66      	ldr	r3, [pc, #408]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a65      	ldr	r2, [pc, #404]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 80020ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d013      	beq.n	80020f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe ff88 	bl	8000fdc <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe ff84 	bl	8000fdc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e207      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b5b      	ldr	r3, [pc, #364]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0xc0>
 80020ee:	e014      	b.n	800211a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7fe ff74 	bl	8000fdc <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7fe ff70 	bl	8000fdc <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e1f3      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210a:	4b51      	ldr	r3, [pc, #324]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0xe8>
 8002116:	e000      	b.n	800211a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d063      	beq.n	80021ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002126:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800213a:	2b08      	cmp	r3, #8
 800213c:	d11c      	bne.n	8002178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213e:	4b44      	ldr	r3, [pc, #272]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d116      	bne.n	8002178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_RCC_OscConfig+0x152>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e1c7      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4937      	ldr	r1, [pc, #220]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	e03a      	b.n	80021ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002180:	4b34      	ldr	r3, [pc, #208]	; (8002254 <HAL_RCC_OscConfig+0x244>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe ff29 	bl	8000fdc <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218e:	f7fe ff25 	bl	8000fdc <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e1a8      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a0:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4925      	ldr	r1, [pc, #148]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	600b      	str	r3, [r1, #0]
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_RCC_OscConfig+0x244>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe ff08 	bl	8000fdc <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d0:	f7fe ff04 	bl	8000fdc <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e187      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d036      	beq.n	8002268 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_RCC_OscConfig+0x248>)
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7fe fee8 	bl	8000fdc <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002210:	f7fe fee4 	bl	8000fdc <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e167      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_OscConfig+0x240>)
 8002224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x200>
 800222e:	e01b      	b.n	8002268 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_OscConfig+0x248>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7fe fed1 	bl	8000fdc <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	e00e      	b.n	800225c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223e:	f7fe fecd 	bl	8000fdc <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d907      	bls.n	800225c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e150      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
 8002250:	40023800 	.word	0x40023800
 8002254:	42470000 	.word	0x42470000
 8002258:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	4b88      	ldr	r3, [pc, #544]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 800225e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ea      	bne.n	800223e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8097 	beq.w	80023a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227a:	4b81      	ldr	r3, [pc, #516]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10f      	bne.n	80022a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b7d      	ldr	r3, [pc, #500]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a7c      	ldr	r2, [pc, #496]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b7a      	ldr	r3, [pc, #488]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4b77      	ldr	r3, [pc, #476]	; (8002484 <HAL_RCC_OscConfig+0x474>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d118      	bne.n	80022e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b2:	4b74      	ldr	r3, [pc, #464]	; (8002484 <HAL_RCC_OscConfig+0x474>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a73      	ldr	r2, [pc, #460]	; (8002484 <HAL_RCC_OscConfig+0x474>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7fe fe8d 	bl	8000fdc <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c6:	f7fe fe89 	bl	8000fdc <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e10c      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b6a      	ldr	r3, [pc, #424]	; (8002484 <HAL_RCC_OscConfig+0x474>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x2ea>
 80022ec:	4b64      	ldr	r3, [pc, #400]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4a63      	ldr	r2, [pc, #396]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6713      	str	r3, [r2, #112]	; 0x70
 80022f8:	e01c      	b.n	8002334 <HAL_RCC_OscConfig+0x324>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x30c>
 8002302:	4b5f      	ldr	r3, [pc, #380]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a5e      	ldr	r2, [pc, #376]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
 800230e:	4b5c      	ldr	r3, [pc, #368]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a5b      	ldr	r2, [pc, #364]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6713      	str	r3, [r2, #112]	; 0x70
 800231a:	e00b      	b.n	8002334 <HAL_RCC_OscConfig+0x324>
 800231c:	4b58      	ldr	r3, [pc, #352]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	4a57      	ldr	r2, [pc, #348]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6713      	str	r3, [r2, #112]	; 0x70
 8002328:	4b55      	ldr	r3, [pc, #340]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	4a54      	ldr	r2, [pc, #336]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 800232e:	f023 0304 	bic.w	r3, r3, #4
 8002332:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d015      	beq.n	8002368 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7fe fe4e 	bl	8000fdc <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	e00a      	b.n	800235a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe fe4a 	bl	8000fdc <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0cb      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	4b49      	ldr	r3, [pc, #292]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0ee      	beq.n	8002344 <HAL_RCC_OscConfig+0x334>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002368:	f7fe fe38 	bl	8000fdc <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7fe fe34 	bl	8000fdc <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0b5      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002386:	4b3e      	ldr	r3, [pc, #248]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1ee      	bne.n	8002370 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4b39      	ldr	r3, [pc, #228]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	4a38      	ldr	r2, [pc, #224]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 800239e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a1 	beq.w	80024f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ae:	4b34      	ldr	r3, [pc, #208]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d05c      	beq.n	8002474 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d141      	bne.n	8002446 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c2:	4b31      	ldr	r3, [pc, #196]	; (8002488 <HAL_RCC_OscConfig+0x478>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fe08 	bl	8000fdc <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d0:	f7fe fe04 	bl	8000fdc <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e087      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	085b      	lsrs	r3, r3, #1
 8002406:	3b01      	subs	r3, #1
 8002408:	041b      	lsls	r3, r3, #16
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	061b      	lsls	r3, r3, #24
 8002412:	491b      	ldr	r1, [pc, #108]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCC_OscConfig+0x478>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7fe fddd 	bl	8000fdc <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002426:	f7fe fdd9 	bl	8000fdc <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e05c      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x416>
 8002444:	e054      	b.n	80024f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_RCC_OscConfig+0x478>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe fdc6 	bl	8000fdc <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fdc2 	bl	8000fdc <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e045      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_OscConfig+0x470>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x444>
 8002472:	e03d      	b.n	80024f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d107      	bne.n	800248c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e038      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
 8002480:	40023800 	.word	0x40023800
 8002484:	40007000 	.word	0x40007000
 8002488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800248c:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCC_OscConfig+0x4ec>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d028      	beq.n	80024ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d121      	bne.n	80024ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d11a      	bne.n	80024ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024bc:	4013      	ands	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d111      	bne.n	80024ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	3b01      	subs	r3, #1
 80024d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d107      	bne.n	80024ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0cc      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002514:	4b68      	ldr	r3, [pc, #416]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d90c      	bls.n	800253c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b65      	ldr	r3, [pc, #404]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0b8      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002554:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a58      	ldr	r2, [pc, #352]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800255e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800256c:	4b53      	ldr	r3, [pc, #332]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b50      	ldr	r3, [pc, #320]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	494d      	ldr	r1, [pc, #308]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d044      	beq.n	8002620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d119      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e07f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d003      	beq.n	80025be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025be:	4b3f      	ldr	r3, [pc, #252]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e06f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ce:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e067      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025de:	4b37      	ldr	r3, [pc, #220]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f023 0203 	bic.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4934      	ldr	r1, [pc, #208]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f0:	f7fe fcf4 	bl	8000fdc <HAL_GetTick>
 80025f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	e00a      	b.n	800260e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f8:	f7fe fcf0 	bl	8000fdc <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e04f      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 020c 	and.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	429a      	cmp	r2, r3
 800261e:	d1eb      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002620:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d20c      	bcs.n	8002648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e032      	b.n	80026ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4916      	ldr	r1, [pc, #88]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	490e      	ldr	r1, [pc, #56]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002686:	f000 f821 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 800268a:	4602      	mov	r2, r0
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	490a      	ldr	r1, [pc, #40]	; (80026c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	5ccb      	ldrb	r3, [r1, r3]
 800269a:	fa22 f303 	lsr.w	r3, r2, r3
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fc54 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023c00 	.word	0x40023c00
 80026bc:	40023800 	.word	0x40023800
 80026c0:	08004b88 	.word	0x08004b88
 80026c4:	20000000 	.word	0x20000000
 80026c8:	20000004 	.word	0x20000004

080026cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d0:	b090      	sub	sp, #64	; 0x40
 80026d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
 80026d8:	2300      	movs	r3, #0
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026dc:	2300      	movs	r3, #0
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d00d      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x40>
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	f200 80a1 	bhi.w	8002838 <HAL_RCC_GetSysClockFreq+0x16c>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x34>
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x3a>
 80026fe:	e09b      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b53      	ldr	r3, [pc, #332]	; (8002850 <HAL_RCC_GetSysClockFreq+0x184>)
 8002702:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002704:	e09b      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002706:	4b53      	ldr	r3, [pc, #332]	; (8002854 <HAL_RCC_GetSysClockFreq+0x188>)
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800270a:	e098      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800270c:	4b4f      	ldr	r3, [pc, #316]	; (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002716:	4b4d      	ldr	r3, [pc, #308]	; (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d028      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	099b      	lsrs	r3, r3, #6
 8002728:	2200      	movs	r2, #0
 800272a:	623b      	str	r3, [r7, #32]
 800272c:	627a      	str	r2, [r7, #36]	; 0x24
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002734:	2100      	movs	r1, #0
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_RCC_GetSysClockFreq+0x188>)
 8002738:	fb03 f201 	mul.w	r2, r3, r1
 800273c:	2300      	movs	r3, #0
 800273e:	fb00 f303 	mul.w	r3, r0, r3
 8002742:	4413      	add	r3, r2
 8002744:	4a43      	ldr	r2, [pc, #268]	; (8002854 <HAL_RCC_GetSysClockFreq+0x188>)
 8002746:	fba0 1202 	umull	r1, r2, r0, r2
 800274a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800274c:	460a      	mov	r2, r1
 800274e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002752:	4413      	add	r3, r2
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	2200      	movs	r2, #0
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	61fa      	str	r2, [r7, #28]
 800275e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002762:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002766:	f7fd fd83 	bl	8000270 <__aeabi_uldivmod>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4613      	mov	r3, r2
 8002770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002772:	e053      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	2200      	movs	r2, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	617a      	str	r2, [r7, #20]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002786:	f04f 0b00 	mov.w	fp, #0
 800278a:	4652      	mov	r2, sl
 800278c:	465b      	mov	r3, fp
 800278e:	f04f 0000 	mov.w	r0, #0
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	0159      	lsls	r1, r3, #5
 8002798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800279c:	0150      	lsls	r0, r2, #5
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	ebb2 080a 	subs.w	r8, r2, sl
 80027a6:	eb63 090b 	sbc.w	r9, r3, fp
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027be:	ebb2 0408 	subs.w	r4, r2, r8
 80027c2:	eb63 0509 	sbc.w	r5, r3, r9
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	00eb      	lsls	r3, r5, #3
 80027d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027d4:	00e2      	lsls	r2, r4, #3
 80027d6:	4614      	mov	r4, r2
 80027d8:	461d      	mov	r5, r3
 80027da:	eb14 030a 	adds.w	r3, r4, sl
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	eb45 030b 	adc.w	r3, r5, fp
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027f2:	4629      	mov	r1, r5
 80027f4:	028b      	lsls	r3, r1, #10
 80027f6:	4621      	mov	r1, r4
 80027f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027fc:	4621      	mov	r1, r4
 80027fe:	028a      	lsls	r2, r1, #10
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002806:	2200      	movs	r2, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	60fa      	str	r2, [r7, #12]
 800280c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002810:	f7fd fd2e 	bl	8000270 <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4613      	mov	r3, r2
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_GetSysClockFreq+0x180>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	3301      	adds	r3, #1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800282c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002836:	e002      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetSysClockFreq+0x184>)
 800283a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800283c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002840:	4618      	mov	r0, r3
 8002842:	3740      	adds	r7, #64	; 0x40
 8002844:	46bd      	mov	sp, r7
 8002846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400
 8002854:	017d7840 	.word	0x017d7840

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_GetHCLKFreq+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002874:	f7ff fff0 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	08004b98 	.word	0x08004b98

08002898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800289c:	f7ff ffdc 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0b5b      	lsrs	r3, r3, #13
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08004b98 	.word	0x08004b98

080028c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e042      	b.n	8002958 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f8ee 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 ff85 	bl	8003814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b20      	cmp	r3, #32
 800297e:	d175      	bne.n	8002a6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_UART_Transmit+0x2c>
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e06e      	b.n	8002a6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2221      	movs	r2, #33	; 0x21
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299e:	f7fe fb1d 	bl	8000fdc <HAL_GetTick>
 80029a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88fa      	ldrh	r2, [r7, #6]
 80029a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b8:	d108      	bne.n	80029cc <HAL_UART_Transmit+0x6c>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d104      	bne.n	80029cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	e003      	b.n	80029d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029d4:	e02e      	b.n	8002a34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	2180      	movs	r1, #128	; 0x80
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fc5d 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e03a      	b.n	8002a6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10b      	bne.n	8002a16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	3302      	adds	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	e007      	b.n	8002a26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	3301      	adds	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1cb      	bne.n	80029d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2140      	movs	r1, #64	; 0x40
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fc29 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e006      	b.n	8002a6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
  }
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b08c      	sub	sp, #48	; 0x30
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	4613      	mov	r3, r2
 8002a82:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d14a      	bne.n	8002b26 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e043      	b.n	8002b28 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fc4e 	bl	8003354 <UART_Start_Receive_DMA>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d12c      	bne.n	8002b20 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d125      	bne.n	8002b1a <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	330c      	adds	r3, #12
 8002aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	e853 3f00 	ldrex	r3, [r3]
 8002af2:	617b      	str	r3, [r7, #20]
   return(result);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f043 0310 	orr.w	r3, r3, #16
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	330c      	adds	r3, #12
 8002b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b04:	627a      	str	r2, [r7, #36]	; 0x24
 8002b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b08:	6a39      	ldr	r1, [r7, #32]
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0c:	e841 2300 	strex	r3, r2, [r1]
 8002b10:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e5      	bne.n	8002ae4 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002b18:	e002      	b.n	8002b20 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002b20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b24:	e000      	b.n	8002b28 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
  }
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3730      	adds	r7, #48	; 0x30
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b0ba      	sub	sp, #232	; 0xe8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10f      	bne.n	8002b96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_UART_IRQHandler+0x66>
 8002b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fd81 	bl	8003696 <UART_Receive_IT>
      return;
 8002b94:	e25b      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80de 	beq.w	8002d5c <HAL_UART_IRQHandler+0x22c>
 8002ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d106      	bne.n	8002bba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80d1 	beq.w	8002d5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_UART_IRQHandler+0xae>
 8002bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_UART_IRQHandler+0xd2>
 8002bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f043 0202 	orr.w	r2, r3, #2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_UART_IRQHandler+0xf6>
 8002c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f043 0204 	orr.w	r2, r3, #4
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d011      	beq.n	8002c56 <HAL_UART_IRQHandler+0x126>
 8002c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f043 0208 	orr.w	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 81f2 	beq.w	8003044 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_UART_IRQHandler+0x14e>
 8002c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fd0c 	bl	8003696 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <HAL_UART_IRQHandler+0x17a>
 8002ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d04f      	beq.n	8002d4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fc14 	bl	80034d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b40      	cmp	r3, #64	; 0x40
 8002cbc:	d141      	bne.n	8002d42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3314      	adds	r3, #20
 8002cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ccc:	e853 3f00 	ldrex	r3, [r3]
 8002cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3314      	adds	r3, #20
 8002ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1d9      	bne.n	8002cbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d013      	beq.n	8002d3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	4a7e      	ldr	r2, [pc, #504]	; (8002f10 <HAL_UART_IRQHandler+0x3e0>)
 8002d18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fbf0 	bl	8001504 <HAL_DMA_Abort_IT>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d34:	4610      	mov	r0, r2
 8002d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d38:	e00e      	b.n	8002d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f9a8 	bl	8003090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	e00a      	b.n	8002d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f9a4 	bl	8003090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d48:	e006      	b.n	8002d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f9a0 	bl	8003090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002d56:	e175      	b.n	8003044 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	bf00      	nop
    return;
 8002d5a:	e173      	b.n	8003044 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f040 814f 	bne.w	8003004 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8148 	beq.w	8003004 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8141 	beq.w	8003004 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b40      	cmp	r3, #64	; 0x40
 8002da4:	f040 80b6 	bne.w	8002f14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8145 	beq.w	8003048 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	f080 813e 	bcs.w	8003048 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dde:	f000 8088 	beq.w	8002ef2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	330c      	adds	r3, #12
 8002de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	330c      	adds	r3, #12
 8002e0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1d9      	bne.n	8002de2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3314      	adds	r3, #20
 8002e34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e1      	bne.n	8002e2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3314      	adds	r3, #20
 8002e70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e74:	e853 3f00 	ldrex	r3, [r3]
 8002e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3314      	adds	r3, #20
 8002e8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e3      	bne.n	8002e6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eba:	e853 3f00 	ldrex	r3, [r3]
 8002ebe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec2:	f023 0310 	bic.w	r3, r3, #16
 8002ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ed4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ed6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002edc:	e841 2300 	strex	r3, r2, [r1]
 8002ee0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e3      	bne.n	8002eb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe fa99 	bl	8001424 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4619      	mov	r1, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fd fb2f 	bl	800056c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f0e:	e09b      	b.n	8003048 <HAL_UART_IRQHandler+0x518>
 8002f10:	0800359f 	.word	0x0800359f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 808e 	beq.w	800304c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8089 	beq.w	800304c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f5e:	647a      	str	r2, [r7, #68]	; 0x44
 8002f60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e3      	bne.n	8002f3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3314      	adds	r3, #20
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	623b      	str	r3, [r7, #32]
   return(result);
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3314      	adds	r3, #20
 8002f92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f96:	633a      	str	r2, [r7, #48]	; 0x30
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e3      	bne.n	8002f72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0310 	bic.w	r3, r3, #16
 8002fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fdc:	61fa      	str	r2, [r7, #28]
 8002fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	69b9      	ldr	r1, [r7, #24]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e3      	bne.n	8002fb8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7fd fab5 	bl	800056c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003002:	e023      	b.n	800304c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_UART_IRQHandler+0x4f4>
 8003010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fad2 	bl	80035c6 <UART_Transmit_IT>
    return;
 8003022:	e014      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00e      	beq.n	800304e <HAL_UART_IRQHandler+0x51e>
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fb12 	bl	8003666 <UART_EndTransmit_IT>
    return;
 8003042:	e004      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
    return;
 8003044:	bf00      	nop
 8003046:	e002      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
      return;
 8003048:	bf00      	nop
 800304a:	e000      	b.n	800304e <HAL_UART_IRQHandler+0x51e>
      return;
 800304c:	bf00      	nop
  }
}
 800304e:	37e8      	adds	r7, #232	; 0xe8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b09c      	sub	sp, #112	; 0x70
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d172      	bne.n	80031a6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80030c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c2:	2200      	movs	r2, #0
 80030c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80030de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80030e8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e5      	bne.n	80030c6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3314      	adds	r3, #20
 8003100:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800310a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	667b      	str	r3, [r7, #100]	; 0x64
 8003112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3314      	adds	r3, #20
 8003118:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800311a:	647a      	str	r2, [r7, #68]	; 0x44
 800311c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e5      	bne.n	80030fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3314      	adds	r3, #20
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	623b      	str	r3, [r7, #32]
   return(result);
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003144:	663b      	str	r3, [r7, #96]	; 0x60
 8003146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3314      	adds	r3, #20
 800314c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800314e:	633a      	str	r2, [r7, #48]	; 0x30
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003156:	e841 2300 	strex	r3, r2, [r1]
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e5      	bne.n	800312e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800316a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	2b01      	cmp	r3, #1
 8003170:	d119      	bne.n	80031a6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	60fb      	str	r3, [r7, #12]
   return(result);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f023 0310 	bic.w	r3, r3, #16
 8003188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800318a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003192:	61fa      	str	r2, [r7, #28]
 8003194:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	617b      	str	r3, [r7, #20]
   return(result);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a8:	2200      	movs	r2, #0
 80031aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031b8:	4619      	mov	r1, r3
 80031ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031bc:	f7fd f9d6 	bl	800056c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031c0:	e002      	b.n	80031c8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80031c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031c4:	f7ff ff50 	bl	8003068 <HAL_UART_RxCpltCallback>
}
 80031c8:	bf00      	nop
 80031ca:	3770      	adds	r7, #112	; 0x70
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d108      	bne.n	80031fe <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	4619      	mov	r1, r3
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7fd f9b8 	bl	800056c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031fc:	e002      	b.n	8003204 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff ff3c 	bl	800307c <HAL_UART_RxHalfCpltCallback>
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003228:	2b80      	cmp	r3, #128	; 0x80
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b21      	cmp	r3, #33	; 0x21
 800323e:	d108      	bne.n	8003252 <UART_DMAError+0x46>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2200      	movs	r2, #0
 800324a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800324c:	68b8      	ldr	r0, [r7, #8]
 800324e:	f000 f91b 	bl	8003488 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b22      	cmp	r3, #34	; 0x22
 8003272:	d108      	bne.n	8003286 <UART_DMAError+0x7a>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2200      	movs	r2, #0
 800327e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003280:	68b8      	ldr	r0, [r7, #8]
 8003282:	f000 f929 	bl	80034d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f043 0210 	orr.w	r2, r3, #16
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003292:	68b8      	ldr	r0, [r7, #8]
 8003294:	f7ff fefc 	bl	8003090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b0:	e03b      	b.n	800332a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d037      	beq.n	800332a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ba:	f7fd fe8f 	bl	8000fdc <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	6a3a      	ldr	r2, [r7, #32]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d302      	bcc.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e03a      	b.n	800334a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d023      	beq.n	800332a <UART_WaitOnFlagUntilTimeout+0x8a>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b80      	cmp	r3, #128	; 0x80
 80032e6:	d020      	beq.n	800332a <UART_WaitOnFlagUntilTimeout+0x8a>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d01d      	beq.n	800332a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d116      	bne.n	800332a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f8e0 	bl	80034d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2208      	movs	r2, #8
 800331c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e00f      	b.n	800334a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4013      	ands	r3, r2
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	429a      	cmp	r2, r3
 8003346:	d0b4      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b098      	sub	sp, #96	; 0x60
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	4613      	mov	r3, r2
 8003360:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	88fa      	ldrh	r2, [r7, #6]
 800336c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2222      	movs	r2, #34	; 0x22
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	4a3e      	ldr	r2, [pc, #248]	; (800347c <UART_Start_Receive_DMA+0x128>)
 8003382:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	4a3d      	ldr	r2, [pc, #244]	; (8003480 <UART_Start_Receive_DMA+0x12c>)
 800338a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	4a3c      	ldr	r2, [pc, #240]	; (8003484 <UART_Start_Receive_DMA+0x130>)
 8003392:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	2200      	movs	r2, #0
 800339a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800339c:	f107 0308 	add.w	r3, r7, #8
 80033a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	f7fd ffde 	bl	8001374 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80033fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e5      	bne.n	80033d6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3314      	adds	r3, #20
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	657b      	str	r3, [r7, #84]	; 0x54
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3314      	adds	r3, #20
 8003428:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800342a:	63ba      	str	r2, [r7, #56]	; 0x38
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e5      	bne.n	800340a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3314      	adds	r3, #20
 8003444:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	617b      	str	r3, [r7, #20]
   return(result);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003454:	653b      	str	r3, [r7, #80]	; 0x50
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3314      	adds	r3, #20
 800345c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800345e:	627a      	str	r2, [r7, #36]	; 0x24
 8003460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	6a39      	ldr	r1, [r7, #32]
 8003464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	61fb      	str	r3, [r7, #28]
   return(result);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e5      	bne.n	800343e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3760      	adds	r7, #96	; 0x60
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	080030a5 	.word	0x080030a5
 8003480:	080031d1 	.word	0x080031d1
 8003484:	0800320d 	.word	0x0800320d

08003488 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	e853 3f00 	ldrex	r3, [r3]
 800349e:	60bb      	str	r3, [r7, #8]
   return(result);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	330c      	adds	r3, #12
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	61ba      	str	r2, [r7, #24]
 80034b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6979      	ldr	r1, [r7, #20]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	613b      	str	r3, [r7, #16]
   return(result);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e5      	bne.n	8003490 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80034cc:	bf00      	nop
 80034ce:	3724      	adds	r7, #36	; 0x24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b095      	sub	sp, #84	; 0x54
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003500:	643a      	str	r2, [r7, #64]	; 0x40
 8003502:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003506:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e5      	bne.n	80034e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	61fb      	str	r3, [r7, #28]
   return(result);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	64bb      	str	r3, [r7, #72]	; 0x48
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3314      	adds	r3, #20
 8003532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003534:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800353a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e5      	bne.n	8003514 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	2b01      	cmp	r3, #1
 800354e:	d119      	bne.n	8003584 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f023 0310 	bic.w	r3, r3, #16
 8003566:	647b      	str	r3, [r7, #68]	; 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003570:	61ba      	str	r2, [r7, #24]
 8003572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	6979      	ldr	r1, [r7, #20]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	613b      	str	r3, [r7, #16]
   return(result);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e5      	bne.n	8003550 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003592:	bf00      	nop
 8003594:	3754      	adds	r7, #84	; 0x54
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff fd69 	bl	8003090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b21      	cmp	r3, #33	; 0x21
 80035d8:	d13e      	bne.n	8003658 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	d114      	bne.n	800360e <UART_Transmit_IT+0x48>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d110      	bne.n	800360e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003600:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	1c9a      	adds	r2, r3, #2
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	621a      	str	r2, [r3, #32]
 800360c:	e008      	b.n	8003620 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	1c59      	adds	r1, r3, #1
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6211      	str	r1, [r2, #32]
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29b      	uxth	r3, r3
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4619      	mov	r1, r3
 800362e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10f      	bne.n	8003654 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003642:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003652:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003658:	2302      	movs	r3, #2
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800367c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fce4 	bl	8003054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b08c      	sub	sp, #48	; 0x30
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b22      	cmp	r3, #34	; 0x22
 80036a8:	f040 80ae 	bne.w	8003808 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b4:	d117      	bne.n	80036e6 <UART_Receive_IT+0x50>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d113      	bne.n	80036e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	1c9a      	adds	r2, r3, #2
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
 80036e4:	e026      	b.n	8003734 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f8:	d007      	beq.n	800370a <UART_Receive_IT+0x74>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <UART_Receive_IT+0x82>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e008      	b.n	800372a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003724:	b2da      	uxtb	r2, r3
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29b      	uxth	r3, r3
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4619      	mov	r1, r3
 8003742:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003744:	2b00      	cmp	r3, #0
 8003746:	d15d      	bne.n	8003804 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0220 	bic.w	r2, r2, #32
 8003756:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003766:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	2b01      	cmp	r3, #1
 800378c:	d135      	bne.n	80037fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	613b      	str	r3, [r7, #16]
   return(result);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f023 0310 	bic.w	r3, r3, #16
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	623a      	str	r2, [r7, #32]
 80037b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	69f9      	ldr	r1, [r7, #28]
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e5      	bne.n	8003794 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d10a      	bne.n	80037ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fc feba 	bl	800056c <HAL_UARTEx_RxEventCallback>
 80037f8:	e002      	b.n	8003800 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fc34 	bl	8003068 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e002      	b.n	800380a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3730      	adds	r7, #48	; 0x30
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003818:	b0c0      	sub	sp, #256	; 0x100
 800381a:	af00      	add	r7, sp, #0
 800381c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	68d9      	ldr	r1, [r3, #12]
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	ea40 0301 	orr.w	r3, r0, r1
 800383c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	431a      	orrs	r2, r3
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	431a      	orrs	r2, r3
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800386c:	f021 010c 	bic.w	r1, r1, #12
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800387a:	430b      	orrs	r3, r1
 800387c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388e:	6999      	ldr	r1, [r3, #24]
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	ea40 0301 	orr.w	r3, r0, r1
 800389a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b8f      	ldr	r3, [pc, #572]	; (8003ae0 <UART_SetConfig+0x2cc>)
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d005      	beq.n	80038b4 <UART_SetConfig+0xa0>
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b8d      	ldr	r3, [pc, #564]	; (8003ae4 <UART_SetConfig+0x2d0>)
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d104      	bne.n	80038be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038b4:	f7fe fff0 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 80038b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038bc:	e003      	b.n	80038c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038be:	f7fe ffd7 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 80038c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d0:	f040 810c 	bne.w	8003aec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d8:	2200      	movs	r2, #0
 80038da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	1891      	adds	r1, r2, r2
 80038ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80038ee:	415b      	adcs	r3, r3
 80038f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038f6:	4621      	mov	r1, r4
 80038f8:	eb12 0801 	adds.w	r8, r2, r1
 80038fc:	4629      	mov	r1, r5
 80038fe:	eb43 0901 	adc.w	r9, r3, r1
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800390e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003916:	4690      	mov	r8, r2
 8003918:	4699      	mov	r9, r3
 800391a:	4623      	mov	r3, r4
 800391c:	eb18 0303 	adds.w	r3, r8, r3
 8003920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003924:	462b      	mov	r3, r5
 8003926:	eb49 0303 	adc.w	r3, r9, r3
 800392a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800393a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800393e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003942:	460b      	mov	r3, r1
 8003944:	18db      	adds	r3, r3, r3
 8003946:	653b      	str	r3, [r7, #80]	; 0x50
 8003948:	4613      	mov	r3, r2
 800394a:	eb42 0303 	adc.w	r3, r2, r3
 800394e:	657b      	str	r3, [r7, #84]	; 0x54
 8003950:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003954:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003958:	f7fc fc8a 	bl	8000270 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4b61      	ldr	r3, [pc, #388]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003962:	fba3 2302 	umull	r2, r3, r3, r2
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	011c      	lsls	r4, r3, #4
 800396a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003974:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003978:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800397c:	4642      	mov	r2, r8
 800397e:	464b      	mov	r3, r9
 8003980:	1891      	adds	r1, r2, r2
 8003982:	64b9      	str	r1, [r7, #72]	; 0x48
 8003984:	415b      	adcs	r3, r3
 8003986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003988:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800398c:	4641      	mov	r1, r8
 800398e:	eb12 0a01 	adds.w	sl, r2, r1
 8003992:	4649      	mov	r1, r9
 8003994:	eb43 0b01 	adc.w	fp, r3, r1
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ac:	4692      	mov	sl, r2
 80039ae:	469b      	mov	fp, r3
 80039b0:	4643      	mov	r3, r8
 80039b2:	eb1a 0303 	adds.w	r3, sl, r3
 80039b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ba:	464b      	mov	r3, r9
 80039bc:	eb4b 0303 	adc.w	r3, fp, r3
 80039c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039d8:	460b      	mov	r3, r1
 80039da:	18db      	adds	r3, r3, r3
 80039dc:	643b      	str	r3, [r7, #64]	; 0x40
 80039de:	4613      	mov	r3, r2
 80039e0:	eb42 0303 	adc.w	r3, r2, r3
 80039e4:	647b      	str	r3, [r7, #68]	; 0x44
 80039e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039ee:	f7fc fc3f 	bl	8000270 <__aeabi_uldivmod>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <UART_SetConfig+0x2d4>)
 80039fa:	fba3 2301 	umull	r2, r3, r3, r1
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2264      	movs	r2, #100	; 0x64
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	1acb      	subs	r3, r1, r3
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a0e:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003a10:	fba3 2302 	umull	r2, r3, r3, r2
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a1c:	441c      	add	r4, r3
 8003a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a30:	4642      	mov	r2, r8
 8003a32:	464b      	mov	r3, r9
 8003a34:	1891      	adds	r1, r2, r2
 8003a36:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a38:	415b      	adcs	r3, r3
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a40:	4641      	mov	r1, r8
 8003a42:	1851      	adds	r1, r2, r1
 8003a44:	6339      	str	r1, [r7, #48]	; 0x30
 8003a46:	4649      	mov	r1, r9
 8003a48:	414b      	adcs	r3, r1
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a58:	4659      	mov	r1, fp
 8003a5a:	00cb      	lsls	r3, r1, #3
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a62:	4651      	mov	r1, sl
 8003a64:	00ca      	lsls	r2, r1, #3
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a74:	464b      	mov	r3, r9
 8003a76:	460a      	mov	r2, r1
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a94:	460b      	mov	r3, r1
 8003a96:	18db      	adds	r3, r3, r3
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	eb42 0303 	adc.w	r3, r2, r3
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003aaa:	f7fc fbe1 	bl	8000270 <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	2164      	movs	r1, #100	; 0x64
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	3332      	adds	r3, #50	; 0x32
 8003ac6:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <UART_SetConfig+0x2d4>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	f003 0207 	and.w	r2, r3, #7
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4422      	add	r2, r4
 8003ada:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003adc:	e106      	b.n	8003cec <UART_SetConfig+0x4d8>
 8003ade:	bf00      	nop
 8003ae0:	40011000 	.word	0x40011000
 8003ae4:	40011400 	.word	0x40011400
 8003ae8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003af6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003afa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003afe:	4642      	mov	r2, r8
 8003b00:	464b      	mov	r3, r9
 8003b02:	1891      	adds	r1, r2, r2
 8003b04:	6239      	str	r1, [r7, #32]
 8003b06:	415b      	adcs	r3, r3
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b0e:	4641      	mov	r1, r8
 8003b10:	1854      	adds	r4, r2, r1
 8003b12:	4649      	mov	r1, r9
 8003b14:	eb43 0501 	adc.w	r5, r3, r1
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	00eb      	lsls	r3, r5, #3
 8003b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b26:	00e2      	lsls	r2, r4, #3
 8003b28:	4614      	mov	r4, r2
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	4643      	mov	r3, r8
 8003b2e:	18e3      	adds	r3, r4, r3
 8003b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b34:	464b      	mov	r3, r9
 8003b36:	eb45 0303 	adc.w	r3, r5, r3
 8003b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	008b      	lsls	r3, r1, #2
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b64:	4621      	mov	r1, r4
 8003b66:	008a      	lsls	r2, r1, #2
 8003b68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b6c:	f7fc fb80 	bl	8000270 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4b60      	ldr	r3, [pc, #384]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003b76:	fba3 2302 	umull	r2, r3, r3, r2
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	011c      	lsls	r4, r3, #4
 8003b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b90:	4642      	mov	r2, r8
 8003b92:	464b      	mov	r3, r9
 8003b94:	1891      	adds	r1, r2, r2
 8003b96:	61b9      	str	r1, [r7, #24]
 8003b98:	415b      	adcs	r3, r3
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	1851      	adds	r1, r2, r1
 8003ba4:	6139      	str	r1, [r7, #16]
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	414b      	adcs	r3, r1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bb8:	4659      	mov	r1, fp
 8003bba:	00cb      	lsls	r3, r1, #3
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	00ca      	lsls	r2, r1, #3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4642      	mov	r2, r8
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	eb42 0303 	adc.w	r3, r2, r3
 8003bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	008b      	lsls	r3, r1, #2
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c02:	4641      	mov	r1, r8
 8003c04:	008a      	lsls	r2, r1, #2
 8003c06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c0a:	f7fc fb31 	bl	8000270 <__aeabi_uldivmod>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003c16:	fba3 2301 	umull	r2, r3, r3, r1
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2264      	movs	r2, #100	; 0x64
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	1acb      	subs	r3, r1, r3
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	3332      	adds	r3, #50	; 0x32
 8003c28:	4a33      	ldr	r2, [pc, #204]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c34:	441c      	add	r4, r3
 8003c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	673b      	str	r3, [r7, #112]	; 0x70
 8003c3e:	677a      	str	r2, [r7, #116]	; 0x74
 8003c40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c44:	4642      	mov	r2, r8
 8003c46:	464b      	mov	r3, r9
 8003c48:	1891      	adds	r1, r2, r2
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	415b      	adcs	r3, r3
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c54:	4641      	mov	r1, r8
 8003c56:	1851      	adds	r1, r2, r1
 8003c58:	6039      	str	r1, [r7, #0]
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	414b      	adcs	r3, r1
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	00cb      	lsls	r3, r1, #3
 8003c70:	4651      	mov	r1, sl
 8003c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c76:	4651      	mov	r1, sl
 8003c78:	00ca      	lsls	r2, r1, #3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4642      	mov	r2, r8
 8003c82:	189b      	adds	r3, r3, r2
 8003c84:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c86:	464b      	mov	r3, r9
 8003c88:	460a      	mov	r2, r1
 8003c8a:	eb42 0303 	adc.w	r3, r2, r3
 8003c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	663b      	str	r3, [r7, #96]	; 0x60
 8003c9a:	667a      	str	r2, [r7, #100]	; 0x64
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ca8:	4649      	mov	r1, r9
 8003caa:	008b      	lsls	r3, r1, #2
 8003cac:	4641      	mov	r1, r8
 8003cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	008a      	lsls	r2, r1, #2
 8003cb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cba:	f7fc fad9 	bl	8000270 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	; 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	3332      	adds	r3, #50	; 0x32
 8003cd6:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <UART_SetConfig+0x4e4>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 020f 	and.w	r2, r3, #15
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4422      	add	r2, r4
 8003cea:	609a      	str	r2, [r3, #8]
}
 8003cec:	bf00      	nop
 8003cee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf8:	51eb851f 	.word	0x51eb851f

08003cfc <std>:
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	b510      	push	{r4, lr}
 8003d00:	4604      	mov	r4, r0
 8003d02:	e9c0 3300 	strd	r3, r3, [r0]
 8003d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d0a:	6083      	str	r3, [r0, #8]
 8003d0c:	8181      	strh	r1, [r0, #12]
 8003d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d10:	81c2      	strh	r2, [r0, #14]
 8003d12:	6183      	str	r3, [r0, #24]
 8003d14:	4619      	mov	r1, r3
 8003d16:	2208      	movs	r2, #8
 8003d18:	305c      	adds	r0, #92	; 0x5c
 8003d1a:	f000 f906 	bl	8003f2a <memset>
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <std+0x58>)
 8003d20:	6263      	str	r3, [r4, #36]	; 0x24
 8003d22:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <std+0x5c>)
 8003d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <std+0x60>)
 8003d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <std+0x64>)
 8003d2c:	6323      	str	r3, [r4, #48]	; 0x30
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <std+0x68>)
 8003d30:	6224      	str	r4, [r4, #32]
 8003d32:	429c      	cmp	r4, r3
 8003d34:	d006      	beq.n	8003d44 <std+0x48>
 8003d36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003d3a:	4294      	cmp	r4, r2
 8003d3c:	d002      	beq.n	8003d44 <std+0x48>
 8003d3e:	33d0      	adds	r3, #208	; 0xd0
 8003d40:	429c      	cmp	r4, r3
 8003d42:	d105      	bne.n	8003d50 <std+0x54>
 8003d44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4c:	f000 b966 	b.w	800401c <__retarget_lock_init_recursive>
 8003d50:	bd10      	pop	{r4, pc}
 8003d52:	bf00      	nop
 8003d54:	08003ea5 	.word	0x08003ea5
 8003d58:	08003ec7 	.word	0x08003ec7
 8003d5c:	08003eff 	.word	0x08003eff
 8003d60:	08003f23 	.word	0x08003f23
 8003d64:	2000024c 	.word	0x2000024c

08003d68 <stdio_exit_handler>:
 8003d68:	4a02      	ldr	r2, [pc, #8]	; (8003d74 <stdio_exit_handler+0xc>)
 8003d6a:	4903      	ldr	r1, [pc, #12]	; (8003d78 <stdio_exit_handler+0x10>)
 8003d6c:	4803      	ldr	r0, [pc, #12]	; (8003d7c <stdio_exit_handler+0x14>)
 8003d6e:	f000 b869 	b.w	8003e44 <_fwalk_sglue>
 8003d72:	bf00      	nop
 8003d74:	2000000c 	.word	0x2000000c
 8003d78:	080048c9 	.word	0x080048c9
 8003d7c:	20000018 	.word	0x20000018

08003d80 <cleanup_stdio>:
 8003d80:	6841      	ldr	r1, [r0, #4]
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <cleanup_stdio+0x34>)
 8003d84:	4299      	cmp	r1, r3
 8003d86:	b510      	push	{r4, lr}
 8003d88:	4604      	mov	r4, r0
 8003d8a:	d001      	beq.n	8003d90 <cleanup_stdio+0x10>
 8003d8c:	f000 fd9c 	bl	80048c8 <_fflush_r>
 8003d90:	68a1      	ldr	r1, [r4, #8]
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <cleanup_stdio+0x38>)
 8003d94:	4299      	cmp	r1, r3
 8003d96:	d002      	beq.n	8003d9e <cleanup_stdio+0x1e>
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f000 fd95 	bl	80048c8 <_fflush_r>
 8003d9e:	68e1      	ldr	r1, [r4, #12]
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <cleanup_stdio+0x3c>)
 8003da2:	4299      	cmp	r1, r3
 8003da4:	d004      	beq.n	8003db0 <cleanup_stdio+0x30>
 8003da6:	4620      	mov	r0, r4
 8003da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dac:	f000 bd8c 	b.w	80048c8 <_fflush_r>
 8003db0:	bd10      	pop	{r4, pc}
 8003db2:	bf00      	nop
 8003db4:	2000024c 	.word	0x2000024c
 8003db8:	200002b4 	.word	0x200002b4
 8003dbc:	2000031c 	.word	0x2000031c

08003dc0 <global_stdio_init.part.0>:
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <global_stdio_init.part.0+0x30>)
 8003dc4:	4c0b      	ldr	r4, [pc, #44]	; (8003df4 <global_stdio_init.part.0+0x34>)
 8003dc6:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <global_stdio_init.part.0+0x38>)
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	4620      	mov	r0, r4
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2104      	movs	r1, #4
 8003dd0:	f7ff ff94 	bl	8003cfc <std>
 8003dd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003dd8:	2201      	movs	r2, #1
 8003dda:	2109      	movs	r1, #9
 8003ddc:	f7ff ff8e 	bl	8003cfc <std>
 8003de0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003de4:	2202      	movs	r2, #2
 8003de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dea:	2112      	movs	r1, #18
 8003dec:	f7ff bf86 	b.w	8003cfc <std>
 8003df0:	20000384 	.word	0x20000384
 8003df4:	2000024c 	.word	0x2000024c
 8003df8:	08003d69 	.word	0x08003d69

08003dfc <__sfp_lock_acquire>:
 8003dfc:	4801      	ldr	r0, [pc, #4]	; (8003e04 <__sfp_lock_acquire+0x8>)
 8003dfe:	f000 b90e 	b.w	800401e <__retarget_lock_acquire_recursive>
 8003e02:	bf00      	nop
 8003e04:	2000038d 	.word	0x2000038d

08003e08 <__sfp_lock_release>:
 8003e08:	4801      	ldr	r0, [pc, #4]	; (8003e10 <__sfp_lock_release+0x8>)
 8003e0a:	f000 b909 	b.w	8004020 <__retarget_lock_release_recursive>
 8003e0e:	bf00      	nop
 8003e10:	2000038d 	.word	0x2000038d

08003e14 <__sinit>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	4604      	mov	r4, r0
 8003e18:	f7ff fff0 	bl	8003dfc <__sfp_lock_acquire>
 8003e1c:	6a23      	ldr	r3, [r4, #32]
 8003e1e:	b11b      	cbz	r3, 8003e28 <__sinit+0x14>
 8003e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e24:	f7ff bff0 	b.w	8003e08 <__sfp_lock_release>
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <__sinit+0x28>)
 8003e2a:	6223      	str	r3, [r4, #32]
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <__sinit+0x2c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f5      	bne.n	8003e20 <__sinit+0xc>
 8003e34:	f7ff ffc4 	bl	8003dc0 <global_stdio_init.part.0>
 8003e38:	e7f2      	b.n	8003e20 <__sinit+0xc>
 8003e3a:	bf00      	nop
 8003e3c:	08003d81 	.word	0x08003d81
 8003e40:	20000384 	.word	0x20000384

08003e44 <_fwalk_sglue>:
 8003e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e48:	4607      	mov	r7, r0
 8003e4a:	4688      	mov	r8, r1
 8003e4c:	4614      	mov	r4, r2
 8003e4e:	2600      	movs	r6, #0
 8003e50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e54:	f1b9 0901 	subs.w	r9, r9, #1
 8003e58:	d505      	bpl.n	8003e66 <_fwalk_sglue+0x22>
 8003e5a:	6824      	ldr	r4, [r4, #0]
 8003e5c:	2c00      	cmp	r4, #0
 8003e5e:	d1f7      	bne.n	8003e50 <_fwalk_sglue+0xc>
 8003e60:	4630      	mov	r0, r6
 8003e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e66:	89ab      	ldrh	r3, [r5, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d907      	bls.n	8003e7c <_fwalk_sglue+0x38>
 8003e6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e70:	3301      	adds	r3, #1
 8003e72:	d003      	beq.n	8003e7c <_fwalk_sglue+0x38>
 8003e74:	4629      	mov	r1, r5
 8003e76:	4638      	mov	r0, r7
 8003e78:	47c0      	blx	r8
 8003e7a:	4306      	orrs	r6, r0
 8003e7c:	3568      	adds	r5, #104	; 0x68
 8003e7e:	e7e9      	b.n	8003e54 <_fwalk_sglue+0x10>

08003e80 <iprintf>:
 8003e80:	b40f      	push	{r0, r1, r2, r3}
 8003e82:	b507      	push	{r0, r1, r2, lr}
 8003e84:	4906      	ldr	r1, [pc, #24]	; (8003ea0 <iprintf+0x20>)
 8003e86:	ab04      	add	r3, sp, #16
 8003e88:	6808      	ldr	r0, [r1, #0]
 8003e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e8e:	6881      	ldr	r1, [r0, #8]
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	f000 f9e9 	bl	8004268 <_vfiprintf_r>
 8003e96:	b003      	add	sp, #12
 8003e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e9c:	b004      	add	sp, #16
 8003e9e:	4770      	bx	lr
 8003ea0:	20000064 	.word	0x20000064

08003ea4 <__sread>:
 8003ea4:	b510      	push	{r4, lr}
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eac:	f000 f868 	bl	8003f80 <_read_r>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	bfab      	itete	ge
 8003eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8003eb8:	181b      	addge	r3, r3, r0
 8003eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ebe:	bfac      	ite	ge
 8003ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ec2:	81a3      	strhlt	r3, [r4, #12]
 8003ec4:	bd10      	pop	{r4, pc}

08003ec6 <__swrite>:
 8003ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eca:	461f      	mov	r7, r3
 8003ecc:	898b      	ldrh	r3, [r1, #12]
 8003ece:	05db      	lsls	r3, r3, #23
 8003ed0:	4605      	mov	r5, r0
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	d505      	bpl.n	8003ee4 <__swrite+0x1e>
 8003ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003edc:	2302      	movs	r3, #2
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f000 f83c 	bl	8003f5c <_lseek_r>
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eee:	81a3      	strh	r3, [r4, #12]
 8003ef0:	4632      	mov	r2, r6
 8003ef2:	463b      	mov	r3, r7
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003efa:	f000 b853 	b.w	8003fa4 <_write_r>

08003efe <__sseek>:
 8003efe:	b510      	push	{r4, lr}
 8003f00:	460c      	mov	r4, r1
 8003f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f06:	f000 f829 	bl	8003f5c <_lseek_r>
 8003f0a:	1c43      	adds	r3, r0, #1
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	bf15      	itete	ne
 8003f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f1a:	81a3      	strheq	r3, [r4, #12]
 8003f1c:	bf18      	it	ne
 8003f1e:	81a3      	strhne	r3, [r4, #12]
 8003f20:	bd10      	pop	{r4, pc}

08003f22 <__sclose>:
 8003f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f26:	f000 b809 	b.w	8003f3c <_close_r>

08003f2a <memset>:
 8003f2a:	4402      	add	r2, r0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d100      	bne.n	8003f34 <memset+0xa>
 8003f32:	4770      	bx	lr
 8003f34:	f803 1b01 	strb.w	r1, [r3], #1
 8003f38:	e7f9      	b.n	8003f2e <memset+0x4>
	...

08003f3c <_close_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4d06      	ldr	r5, [pc, #24]	; (8003f58 <_close_r+0x1c>)
 8003f40:	2300      	movs	r3, #0
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	602b      	str	r3, [r5, #0]
 8003f48:	f7fc ff3b 	bl	8000dc2 <_close>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_close_r+0x1a>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_close_r+0x1a>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	20000388 	.word	0x20000388

08003f5c <_lseek_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4d07      	ldr	r5, [pc, #28]	; (8003f7c <_lseek_r+0x20>)
 8003f60:	4604      	mov	r4, r0
 8003f62:	4608      	mov	r0, r1
 8003f64:	4611      	mov	r1, r2
 8003f66:	2200      	movs	r2, #0
 8003f68:	602a      	str	r2, [r5, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f7fc ff50 	bl	8000e10 <_lseek>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d102      	bne.n	8003f7a <_lseek_r+0x1e>
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	b103      	cbz	r3, 8003f7a <_lseek_r+0x1e>
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	20000388 	.word	0x20000388

08003f80 <_read_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d07      	ldr	r5, [pc, #28]	; (8003fa0 <_read_r+0x20>)
 8003f84:	4604      	mov	r4, r0
 8003f86:	4608      	mov	r0, r1
 8003f88:	4611      	mov	r1, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f7fc fede 	bl	8000d50 <_read>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_read_r+0x1e>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_read_r+0x1e>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	20000388 	.word	0x20000388

08003fa4 <_write_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d07      	ldr	r5, [pc, #28]	; (8003fc4 <_write_r+0x20>)
 8003fa8:	4604      	mov	r4, r0
 8003faa:	4608      	mov	r0, r1
 8003fac:	4611      	mov	r1, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	602a      	str	r2, [r5, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7fc fee9 	bl	8000d8a <_write>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_write_r+0x1e>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_write_r+0x1e>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	20000388 	.word	0x20000388

08003fc8 <__errno>:
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <__errno+0x8>)
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000064 	.word	0x20000064

08003fd4 <__libc_init_array>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4d0d      	ldr	r5, [pc, #52]	; (800400c <__libc_init_array+0x38>)
 8003fd8:	4c0d      	ldr	r4, [pc, #52]	; (8004010 <__libc_init_array+0x3c>)
 8003fda:	1b64      	subs	r4, r4, r5
 8003fdc:	10a4      	asrs	r4, r4, #2
 8003fde:	2600      	movs	r6, #0
 8003fe0:	42a6      	cmp	r6, r4
 8003fe2:	d109      	bne.n	8003ff8 <__libc_init_array+0x24>
 8003fe4:	4d0b      	ldr	r5, [pc, #44]	; (8004014 <__libc_init_array+0x40>)
 8003fe6:	4c0c      	ldr	r4, [pc, #48]	; (8004018 <__libc_init_array+0x44>)
 8003fe8:	f000 fdc0 	bl	8004b6c <_init>
 8003fec:	1b64      	subs	r4, r4, r5
 8003fee:	10a4      	asrs	r4, r4, #2
 8003ff0:	2600      	movs	r6, #0
 8003ff2:	42a6      	cmp	r6, r4
 8003ff4:	d105      	bne.n	8004002 <__libc_init_array+0x2e>
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffc:	4798      	blx	r3
 8003ffe:	3601      	adds	r6, #1
 8004000:	e7ee      	b.n	8003fe0 <__libc_init_array+0xc>
 8004002:	f855 3b04 	ldr.w	r3, [r5], #4
 8004006:	4798      	blx	r3
 8004008:	3601      	adds	r6, #1
 800400a:	e7f2      	b.n	8003ff2 <__libc_init_array+0x1e>
 800400c:	08004be4 	.word	0x08004be4
 8004010:	08004be4 	.word	0x08004be4
 8004014:	08004be4 	.word	0x08004be4
 8004018:	08004be8 	.word	0x08004be8

0800401c <__retarget_lock_init_recursive>:
 800401c:	4770      	bx	lr

0800401e <__retarget_lock_acquire_recursive>:
 800401e:	4770      	bx	lr

08004020 <__retarget_lock_release_recursive>:
 8004020:	4770      	bx	lr
	...

08004024 <_free_r>:
 8004024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004026:	2900      	cmp	r1, #0
 8004028:	d044      	beq.n	80040b4 <_free_r+0x90>
 800402a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800402e:	9001      	str	r0, [sp, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f1a1 0404 	sub.w	r4, r1, #4
 8004036:	bfb8      	it	lt
 8004038:	18e4      	addlt	r4, r4, r3
 800403a:	f000 f8df 	bl	80041fc <__malloc_lock>
 800403e:	4a1e      	ldr	r2, [pc, #120]	; (80040b8 <_free_r+0x94>)
 8004040:	9801      	ldr	r0, [sp, #4]
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	b933      	cbnz	r3, 8004054 <_free_r+0x30>
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	6014      	str	r4, [r2, #0]
 800404a:	b003      	add	sp, #12
 800404c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004050:	f000 b8da 	b.w	8004208 <__malloc_unlock>
 8004054:	42a3      	cmp	r3, r4
 8004056:	d908      	bls.n	800406a <_free_r+0x46>
 8004058:	6825      	ldr	r5, [r4, #0]
 800405a:	1961      	adds	r1, r4, r5
 800405c:	428b      	cmp	r3, r1
 800405e:	bf01      	itttt	eq
 8004060:	6819      	ldreq	r1, [r3, #0]
 8004062:	685b      	ldreq	r3, [r3, #4]
 8004064:	1949      	addeq	r1, r1, r5
 8004066:	6021      	streq	r1, [r4, #0]
 8004068:	e7ed      	b.n	8004046 <_free_r+0x22>
 800406a:	461a      	mov	r2, r3
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	b10b      	cbz	r3, 8004074 <_free_r+0x50>
 8004070:	42a3      	cmp	r3, r4
 8004072:	d9fa      	bls.n	800406a <_free_r+0x46>
 8004074:	6811      	ldr	r1, [r2, #0]
 8004076:	1855      	adds	r5, r2, r1
 8004078:	42a5      	cmp	r5, r4
 800407a:	d10b      	bne.n	8004094 <_free_r+0x70>
 800407c:	6824      	ldr	r4, [r4, #0]
 800407e:	4421      	add	r1, r4
 8004080:	1854      	adds	r4, r2, r1
 8004082:	42a3      	cmp	r3, r4
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	d1e0      	bne.n	800404a <_free_r+0x26>
 8004088:	681c      	ldr	r4, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	6053      	str	r3, [r2, #4]
 800408e:	440c      	add	r4, r1
 8004090:	6014      	str	r4, [r2, #0]
 8004092:	e7da      	b.n	800404a <_free_r+0x26>
 8004094:	d902      	bls.n	800409c <_free_r+0x78>
 8004096:	230c      	movs	r3, #12
 8004098:	6003      	str	r3, [r0, #0]
 800409a:	e7d6      	b.n	800404a <_free_r+0x26>
 800409c:	6825      	ldr	r5, [r4, #0]
 800409e:	1961      	adds	r1, r4, r5
 80040a0:	428b      	cmp	r3, r1
 80040a2:	bf04      	itt	eq
 80040a4:	6819      	ldreq	r1, [r3, #0]
 80040a6:	685b      	ldreq	r3, [r3, #4]
 80040a8:	6063      	str	r3, [r4, #4]
 80040aa:	bf04      	itt	eq
 80040ac:	1949      	addeq	r1, r1, r5
 80040ae:	6021      	streq	r1, [r4, #0]
 80040b0:	6054      	str	r4, [r2, #4]
 80040b2:	e7ca      	b.n	800404a <_free_r+0x26>
 80040b4:	b003      	add	sp, #12
 80040b6:	bd30      	pop	{r4, r5, pc}
 80040b8:	20000390 	.word	0x20000390

080040bc <sbrk_aligned>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4e0e      	ldr	r6, [pc, #56]	; (80040f8 <sbrk_aligned+0x3c>)
 80040c0:	460c      	mov	r4, r1
 80040c2:	6831      	ldr	r1, [r6, #0]
 80040c4:	4605      	mov	r5, r0
 80040c6:	b911      	cbnz	r1, 80040ce <sbrk_aligned+0x12>
 80040c8:	f000 fcbc 	bl	8004a44 <_sbrk_r>
 80040cc:	6030      	str	r0, [r6, #0]
 80040ce:	4621      	mov	r1, r4
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 fcb7 	bl	8004a44 <_sbrk_r>
 80040d6:	1c43      	adds	r3, r0, #1
 80040d8:	d00a      	beq.n	80040f0 <sbrk_aligned+0x34>
 80040da:	1cc4      	adds	r4, r0, #3
 80040dc:	f024 0403 	bic.w	r4, r4, #3
 80040e0:	42a0      	cmp	r0, r4
 80040e2:	d007      	beq.n	80040f4 <sbrk_aligned+0x38>
 80040e4:	1a21      	subs	r1, r4, r0
 80040e6:	4628      	mov	r0, r5
 80040e8:	f000 fcac 	bl	8004a44 <_sbrk_r>
 80040ec:	3001      	adds	r0, #1
 80040ee:	d101      	bne.n	80040f4 <sbrk_aligned+0x38>
 80040f0:	f04f 34ff 	mov.w	r4, #4294967295
 80040f4:	4620      	mov	r0, r4
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	20000394 	.word	0x20000394

080040fc <_malloc_r>:
 80040fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004100:	1ccd      	adds	r5, r1, #3
 8004102:	f025 0503 	bic.w	r5, r5, #3
 8004106:	3508      	adds	r5, #8
 8004108:	2d0c      	cmp	r5, #12
 800410a:	bf38      	it	cc
 800410c:	250c      	movcc	r5, #12
 800410e:	2d00      	cmp	r5, #0
 8004110:	4607      	mov	r7, r0
 8004112:	db01      	blt.n	8004118 <_malloc_r+0x1c>
 8004114:	42a9      	cmp	r1, r5
 8004116:	d905      	bls.n	8004124 <_malloc_r+0x28>
 8004118:	230c      	movs	r3, #12
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	2600      	movs	r6, #0
 800411e:	4630      	mov	r0, r6
 8004120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004124:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80041f8 <_malloc_r+0xfc>
 8004128:	f000 f868 	bl	80041fc <__malloc_lock>
 800412c:	f8d8 3000 	ldr.w	r3, [r8]
 8004130:	461c      	mov	r4, r3
 8004132:	bb5c      	cbnz	r4, 800418c <_malloc_r+0x90>
 8004134:	4629      	mov	r1, r5
 8004136:	4638      	mov	r0, r7
 8004138:	f7ff ffc0 	bl	80040bc <sbrk_aligned>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	4604      	mov	r4, r0
 8004140:	d155      	bne.n	80041ee <_malloc_r+0xf2>
 8004142:	f8d8 4000 	ldr.w	r4, [r8]
 8004146:	4626      	mov	r6, r4
 8004148:	2e00      	cmp	r6, #0
 800414a:	d145      	bne.n	80041d8 <_malloc_r+0xdc>
 800414c:	2c00      	cmp	r4, #0
 800414e:	d048      	beq.n	80041e2 <_malloc_r+0xe6>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	4631      	mov	r1, r6
 8004154:	4638      	mov	r0, r7
 8004156:	eb04 0903 	add.w	r9, r4, r3
 800415a:	f000 fc73 	bl	8004a44 <_sbrk_r>
 800415e:	4581      	cmp	r9, r0
 8004160:	d13f      	bne.n	80041e2 <_malloc_r+0xe6>
 8004162:	6821      	ldr	r1, [r4, #0]
 8004164:	1a6d      	subs	r5, r5, r1
 8004166:	4629      	mov	r1, r5
 8004168:	4638      	mov	r0, r7
 800416a:	f7ff ffa7 	bl	80040bc <sbrk_aligned>
 800416e:	3001      	adds	r0, #1
 8004170:	d037      	beq.n	80041e2 <_malloc_r+0xe6>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	442b      	add	r3, r5
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	f8d8 3000 	ldr.w	r3, [r8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d038      	beq.n	80041f2 <_malloc_r+0xf6>
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	42a2      	cmp	r2, r4
 8004184:	d12b      	bne.n	80041de <_malloc_r+0xe2>
 8004186:	2200      	movs	r2, #0
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	e00f      	b.n	80041ac <_malloc_r+0xb0>
 800418c:	6822      	ldr	r2, [r4, #0]
 800418e:	1b52      	subs	r2, r2, r5
 8004190:	d41f      	bmi.n	80041d2 <_malloc_r+0xd6>
 8004192:	2a0b      	cmp	r2, #11
 8004194:	d917      	bls.n	80041c6 <_malloc_r+0xca>
 8004196:	1961      	adds	r1, r4, r5
 8004198:	42a3      	cmp	r3, r4
 800419a:	6025      	str	r5, [r4, #0]
 800419c:	bf18      	it	ne
 800419e:	6059      	strne	r1, [r3, #4]
 80041a0:	6863      	ldr	r3, [r4, #4]
 80041a2:	bf08      	it	eq
 80041a4:	f8c8 1000 	streq.w	r1, [r8]
 80041a8:	5162      	str	r2, [r4, r5]
 80041aa:	604b      	str	r3, [r1, #4]
 80041ac:	4638      	mov	r0, r7
 80041ae:	f104 060b 	add.w	r6, r4, #11
 80041b2:	f000 f829 	bl	8004208 <__malloc_unlock>
 80041b6:	f026 0607 	bic.w	r6, r6, #7
 80041ba:	1d23      	adds	r3, r4, #4
 80041bc:	1af2      	subs	r2, r6, r3
 80041be:	d0ae      	beq.n	800411e <_malloc_r+0x22>
 80041c0:	1b9b      	subs	r3, r3, r6
 80041c2:	50a3      	str	r3, [r4, r2]
 80041c4:	e7ab      	b.n	800411e <_malloc_r+0x22>
 80041c6:	42a3      	cmp	r3, r4
 80041c8:	6862      	ldr	r2, [r4, #4]
 80041ca:	d1dd      	bne.n	8004188 <_malloc_r+0x8c>
 80041cc:	f8c8 2000 	str.w	r2, [r8]
 80041d0:	e7ec      	b.n	80041ac <_malloc_r+0xb0>
 80041d2:	4623      	mov	r3, r4
 80041d4:	6864      	ldr	r4, [r4, #4]
 80041d6:	e7ac      	b.n	8004132 <_malloc_r+0x36>
 80041d8:	4634      	mov	r4, r6
 80041da:	6876      	ldr	r6, [r6, #4]
 80041dc:	e7b4      	b.n	8004148 <_malloc_r+0x4c>
 80041de:	4613      	mov	r3, r2
 80041e0:	e7cc      	b.n	800417c <_malloc_r+0x80>
 80041e2:	230c      	movs	r3, #12
 80041e4:	603b      	str	r3, [r7, #0]
 80041e6:	4638      	mov	r0, r7
 80041e8:	f000 f80e 	bl	8004208 <__malloc_unlock>
 80041ec:	e797      	b.n	800411e <_malloc_r+0x22>
 80041ee:	6025      	str	r5, [r4, #0]
 80041f0:	e7dc      	b.n	80041ac <_malloc_r+0xb0>
 80041f2:	605b      	str	r3, [r3, #4]
 80041f4:	deff      	udf	#255	; 0xff
 80041f6:	bf00      	nop
 80041f8:	20000390 	.word	0x20000390

080041fc <__malloc_lock>:
 80041fc:	4801      	ldr	r0, [pc, #4]	; (8004204 <__malloc_lock+0x8>)
 80041fe:	f7ff bf0e 	b.w	800401e <__retarget_lock_acquire_recursive>
 8004202:	bf00      	nop
 8004204:	2000038c 	.word	0x2000038c

08004208 <__malloc_unlock>:
 8004208:	4801      	ldr	r0, [pc, #4]	; (8004210 <__malloc_unlock+0x8>)
 800420a:	f7ff bf09 	b.w	8004020 <__retarget_lock_release_recursive>
 800420e:	bf00      	nop
 8004210:	2000038c 	.word	0x2000038c

08004214 <__sfputc_r>:
 8004214:	6893      	ldr	r3, [r2, #8]
 8004216:	3b01      	subs	r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	b410      	push	{r4}
 800421c:	6093      	str	r3, [r2, #8]
 800421e:	da08      	bge.n	8004232 <__sfputc_r+0x1e>
 8004220:	6994      	ldr	r4, [r2, #24]
 8004222:	42a3      	cmp	r3, r4
 8004224:	db01      	blt.n	800422a <__sfputc_r+0x16>
 8004226:	290a      	cmp	r1, #10
 8004228:	d103      	bne.n	8004232 <__sfputc_r+0x1e>
 800422a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800422e:	f000 bb73 	b.w	8004918 <__swbuf_r>
 8004232:	6813      	ldr	r3, [r2, #0]
 8004234:	1c58      	adds	r0, r3, #1
 8004236:	6010      	str	r0, [r2, #0]
 8004238:	7019      	strb	r1, [r3, #0]
 800423a:	4608      	mov	r0, r1
 800423c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004240:	4770      	bx	lr

08004242 <__sfputs_r>:
 8004242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004244:	4606      	mov	r6, r0
 8004246:	460f      	mov	r7, r1
 8004248:	4614      	mov	r4, r2
 800424a:	18d5      	adds	r5, r2, r3
 800424c:	42ac      	cmp	r4, r5
 800424e:	d101      	bne.n	8004254 <__sfputs_r+0x12>
 8004250:	2000      	movs	r0, #0
 8004252:	e007      	b.n	8004264 <__sfputs_r+0x22>
 8004254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004258:	463a      	mov	r2, r7
 800425a:	4630      	mov	r0, r6
 800425c:	f7ff ffda 	bl	8004214 <__sfputc_r>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d1f3      	bne.n	800424c <__sfputs_r+0xa>
 8004264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004268 <_vfiprintf_r>:
 8004268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426c:	460d      	mov	r5, r1
 800426e:	b09d      	sub	sp, #116	; 0x74
 8004270:	4614      	mov	r4, r2
 8004272:	4698      	mov	r8, r3
 8004274:	4606      	mov	r6, r0
 8004276:	b118      	cbz	r0, 8004280 <_vfiprintf_r+0x18>
 8004278:	6a03      	ldr	r3, [r0, #32]
 800427a:	b90b      	cbnz	r3, 8004280 <_vfiprintf_r+0x18>
 800427c:	f7ff fdca 	bl	8003e14 <__sinit>
 8004280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004282:	07d9      	lsls	r1, r3, #31
 8004284:	d405      	bmi.n	8004292 <_vfiprintf_r+0x2a>
 8004286:	89ab      	ldrh	r3, [r5, #12]
 8004288:	059a      	lsls	r2, r3, #22
 800428a:	d402      	bmi.n	8004292 <_vfiprintf_r+0x2a>
 800428c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800428e:	f7ff fec6 	bl	800401e <__retarget_lock_acquire_recursive>
 8004292:	89ab      	ldrh	r3, [r5, #12]
 8004294:	071b      	lsls	r3, r3, #28
 8004296:	d501      	bpl.n	800429c <_vfiprintf_r+0x34>
 8004298:	692b      	ldr	r3, [r5, #16]
 800429a:	b99b      	cbnz	r3, 80042c4 <_vfiprintf_r+0x5c>
 800429c:	4629      	mov	r1, r5
 800429e:	4630      	mov	r0, r6
 80042a0:	f000 fb78 	bl	8004994 <__swsetup_r>
 80042a4:	b170      	cbz	r0, 80042c4 <_vfiprintf_r+0x5c>
 80042a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042a8:	07dc      	lsls	r4, r3, #31
 80042aa:	d504      	bpl.n	80042b6 <_vfiprintf_r+0x4e>
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	b01d      	add	sp, #116	; 0x74
 80042b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b6:	89ab      	ldrh	r3, [r5, #12]
 80042b8:	0598      	lsls	r0, r3, #22
 80042ba:	d4f7      	bmi.n	80042ac <_vfiprintf_r+0x44>
 80042bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042be:	f7ff feaf 	bl	8004020 <__retarget_lock_release_recursive>
 80042c2:	e7f3      	b.n	80042ac <_vfiprintf_r+0x44>
 80042c4:	2300      	movs	r3, #0
 80042c6:	9309      	str	r3, [sp, #36]	; 0x24
 80042c8:	2320      	movs	r3, #32
 80042ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80042d2:	2330      	movs	r3, #48	; 0x30
 80042d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004488 <_vfiprintf_r+0x220>
 80042d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042dc:	f04f 0901 	mov.w	r9, #1
 80042e0:	4623      	mov	r3, r4
 80042e2:	469a      	mov	sl, r3
 80042e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042e8:	b10a      	cbz	r2, 80042ee <_vfiprintf_r+0x86>
 80042ea:	2a25      	cmp	r2, #37	; 0x25
 80042ec:	d1f9      	bne.n	80042e2 <_vfiprintf_r+0x7a>
 80042ee:	ebba 0b04 	subs.w	fp, sl, r4
 80042f2:	d00b      	beq.n	800430c <_vfiprintf_r+0xa4>
 80042f4:	465b      	mov	r3, fp
 80042f6:	4622      	mov	r2, r4
 80042f8:	4629      	mov	r1, r5
 80042fa:	4630      	mov	r0, r6
 80042fc:	f7ff ffa1 	bl	8004242 <__sfputs_r>
 8004300:	3001      	adds	r0, #1
 8004302:	f000 80a9 	beq.w	8004458 <_vfiprintf_r+0x1f0>
 8004306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004308:	445a      	add	r2, fp
 800430a:	9209      	str	r2, [sp, #36]	; 0x24
 800430c:	f89a 3000 	ldrb.w	r3, [sl]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80a1 	beq.w	8004458 <_vfiprintf_r+0x1f0>
 8004316:	2300      	movs	r3, #0
 8004318:	f04f 32ff 	mov.w	r2, #4294967295
 800431c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004320:	f10a 0a01 	add.w	sl, sl, #1
 8004324:	9304      	str	r3, [sp, #16]
 8004326:	9307      	str	r3, [sp, #28]
 8004328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800432c:	931a      	str	r3, [sp, #104]	; 0x68
 800432e:	4654      	mov	r4, sl
 8004330:	2205      	movs	r2, #5
 8004332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004336:	4854      	ldr	r0, [pc, #336]	; (8004488 <_vfiprintf_r+0x220>)
 8004338:	f7fb ff4a 	bl	80001d0 <memchr>
 800433c:	9a04      	ldr	r2, [sp, #16]
 800433e:	b9d8      	cbnz	r0, 8004378 <_vfiprintf_r+0x110>
 8004340:	06d1      	lsls	r1, r2, #27
 8004342:	bf44      	itt	mi
 8004344:	2320      	movmi	r3, #32
 8004346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800434a:	0713      	lsls	r3, r2, #28
 800434c:	bf44      	itt	mi
 800434e:	232b      	movmi	r3, #43	; 0x2b
 8004350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004354:	f89a 3000 	ldrb.w	r3, [sl]
 8004358:	2b2a      	cmp	r3, #42	; 0x2a
 800435a:	d015      	beq.n	8004388 <_vfiprintf_r+0x120>
 800435c:	9a07      	ldr	r2, [sp, #28]
 800435e:	4654      	mov	r4, sl
 8004360:	2000      	movs	r0, #0
 8004362:	f04f 0c0a 	mov.w	ip, #10
 8004366:	4621      	mov	r1, r4
 8004368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800436c:	3b30      	subs	r3, #48	; 0x30
 800436e:	2b09      	cmp	r3, #9
 8004370:	d94d      	bls.n	800440e <_vfiprintf_r+0x1a6>
 8004372:	b1b0      	cbz	r0, 80043a2 <_vfiprintf_r+0x13a>
 8004374:	9207      	str	r2, [sp, #28]
 8004376:	e014      	b.n	80043a2 <_vfiprintf_r+0x13a>
 8004378:	eba0 0308 	sub.w	r3, r0, r8
 800437c:	fa09 f303 	lsl.w	r3, r9, r3
 8004380:	4313      	orrs	r3, r2
 8004382:	9304      	str	r3, [sp, #16]
 8004384:	46a2      	mov	sl, r4
 8004386:	e7d2      	b.n	800432e <_vfiprintf_r+0xc6>
 8004388:	9b03      	ldr	r3, [sp, #12]
 800438a:	1d19      	adds	r1, r3, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	9103      	str	r1, [sp, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	bfbb      	ittet	lt
 8004394:	425b      	neglt	r3, r3
 8004396:	f042 0202 	orrlt.w	r2, r2, #2
 800439a:	9307      	strge	r3, [sp, #28]
 800439c:	9307      	strlt	r3, [sp, #28]
 800439e:	bfb8      	it	lt
 80043a0:	9204      	strlt	r2, [sp, #16]
 80043a2:	7823      	ldrb	r3, [r4, #0]
 80043a4:	2b2e      	cmp	r3, #46	; 0x2e
 80043a6:	d10c      	bne.n	80043c2 <_vfiprintf_r+0x15a>
 80043a8:	7863      	ldrb	r3, [r4, #1]
 80043aa:	2b2a      	cmp	r3, #42	; 0x2a
 80043ac:	d134      	bne.n	8004418 <_vfiprintf_r+0x1b0>
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	1d1a      	adds	r2, r3, #4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	9203      	str	r2, [sp, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bfb8      	it	lt
 80043ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80043be:	3402      	adds	r4, #2
 80043c0:	9305      	str	r3, [sp, #20]
 80043c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004498 <_vfiprintf_r+0x230>
 80043c6:	7821      	ldrb	r1, [r4, #0]
 80043c8:	2203      	movs	r2, #3
 80043ca:	4650      	mov	r0, sl
 80043cc:	f7fb ff00 	bl	80001d0 <memchr>
 80043d0:	b138      	cbz	r0, 80043e2 <_vfiprintf_r+0x17a>
 80043d2:	9b04      	ldr	r3, [sp, #16]
 80043d4:	eba0 000a 	sub.w	r0, r0, sl
 80043d8:	2240      	movs	r2, #64	; 0x40
 80043da:	4082      	lsls	r2, r0
 80043dc:	4313      	orrs	r3, r2
 80043de:	3401      	adds	r4, #1
 80043e0:	9304      	str	r3, [sp, #16]
 80043e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e6:	4829      	ldr	r0, [pc, #164]	; (800448c <_vfiprintf_r+0x224>)
 80043e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043ec:	2206      	movs	r2, #6
 80043ee:	f7fb feef 	bl	80001d0 <memchr>
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d03f      	beq.n	8004476 <_vfiprintf_r+0x20e>
 80043f6:	4b26      	ldr	r3, [pc, #152]	; (8004490 <_vfiprintf_r+0x228>)
 80043f8:	bb1b      	cbnz	r3, 8004442 <_vfiprintf_r+0x1da>
 80043fa:	9b03      	ldr	r3, [sp, #12]
 80043fc:	3307      	adds	r3, #7
 80043fe:	f023 0307 	bic.w	r3, r3, #7
 8004402:	3308      	adds	r3, #8
 8004404:	9303      	str	r3, [sp, #12]
 8004406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004408:	443b      	add	r3, r7
 800440a:	9309      	str	r3, [sp, #36]	; 0x24
 800440c:	e768      	b.n	80042e0 <_vfiprintf_r+0x78>
 800440e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004412:	460c      	mov	r4, r1
 8004414:	2001      	movs	r0, #1
 8004416:	e7a6      	b.n	8004366 <_vfiprintf_r+0xfe>
 8004418:	2300      	movs	r3, #0
 800441a:	3401      	adds	r4, #1
 800441c:	9305      	str	r3, [sp, #20]
 800441e:	4619      	mov	r1, r3
 8004420:	f04f 0c0a 	mov.w	ip, #10
 8004424:	4620      	mov	r0, r4
 8004426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800442a:	3a30      	subs	r2, #48	; 0x30
 800442c:	2a09      	cmp	r2, #9
 800442e:	d903      	bls.n	8004438 <_vfiprintf_r+0x1d0>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0c6      	beq.n	80043c2 <_vfiprintf_r+0x15a>
 8004434:	9105      	str	r1, [sp, #20]
 8004436:	e7c4      	b.n	80043c2 <_vfiprintf_r+0x15a>
 8004438:	fb0c 2101 	mla	r1, ip, r1, r2
 800443c:	4604      	mov	r4, r0
 800443e:	2301      	movs	r3, #1
 8004440:	e7f0      	b.n	8004424 <_vfiprintf_r+0x1bc>
 8004442:	ab03      	add	r3, sp, #12
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	462a      	mov	r2, r5
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <_vfiprintf_r+0x22c>)
 800444a:	a904      	add	r1, sp, #16
 800444c:	4630      	mov	r0, r6
 800444e:	f3af 8000 	nop.w
 8004452:	4607      	mov	r7, r0
 8004454:	1c78      	adds	r0, r7, #1
 8004456:	d1d6      	bne.n	8004406 <_vfiprintf_r+0x19e>
 8004458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800445a:	07d9      	lsls	r1, r3, #31
 800445c:	d405      	bmi.n	800446a <_vfiprintf_r+0x202>
 800445e:	89ab      	ldrh	r3, [r5, #12]
 8004460:	059a      	lsls	r2, r3, #22
 8004462:	d402      	bmi.n	800446a <_vfiprintf_r+0x202>
 8004464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004466:	f7ff fddb 	bl	8004020 <__retarget_lock_release_recursive>
 800446a:	89ab      	ldrh	r3, [r5, #12]
 800446c:	065b      	lsls	r3, r3, #25
 800446e:	f53f af1d 	bmi.w	80042ac <_vfiprintf_r+0x44>
 8004472:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004474:	e71c      	b.n	80042b0 <_vfiprintf_r+0x48>
 8004476:	ab03      	add	r3, sp, #12
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	462a      	mov	r2, r5
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <_vfiprintf_r+0x22c>)
 800447e:	a904      	add	r1, sp, #16
 8004480:	4630      	mov	r0, r6
 8004482:	f000 f879 	bl	8004578 <_printf_i>
 8004486:	e7e4      	b.n	8004452 <_vfiprintf_r+0x1ea>
 8004488:	08004ba8 	.word	0x08004ba8
 800448c:	08004bb2 	.word	0x08004bb2
 8004490:	00000000 	.word	0x00000000
 8004494:	08004243 	.word	0x08004243
 8004498:	08004bae 	.word	0x08004bae

0800449c <_printf_common>:
 800449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	4616      	mov	r6, r2
 80044a2:	4699      	mov	r9, r3
 80044a4:	688a      	ldr	r2, [r1, #8]
 80044a6:	690b      	ldr	r3, [r1, #16]
 80044a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044ac:	4293      	cmp	r3, r2
 80044ae:	bfb8      	it	lt
 80044b0:	4613      	movlt	r3, r2
 80044b2:	6033      	str	r3, [r6, #0]
 80044b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044b8:	4607      	mov	r7, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	b10a      	cbz	r2, 80044c2 <_printf_common+0x26>
 80044be:	3301      	adds	r3, #1
 80044c0:	6033      	str	r3, [r6, #0]
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	0699      	lsls	r1, r3, #26
 80044c6:	bf42      	ittt	mi
 80044c8:	6833      	ldrmi	r3, [r6, #0]
 80044ca:	3302      	addmi	r3, #2
 80044cc:	6033      	strmi	r3, [r6, #0]
 80044ce:	6825      	ldr	r5, [r4, #0]
 80044d0:	f015 0506 	ands.w	r5, r5, #6
 80044d4:	d106      	bne.n	80044e4 <_printf_common+0x48>
 80044d6:	f104 0a19 	add.w	sl, r4, #25
 80044da:	68e3      	ldr	r3, [r4, #12]
 80044dc:	6832      	ldr	r2, [r6, #0]
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	42ab      	cmp	r3, r5
 80044e2:	dc26      	bgt.n	8004532 <_printf_common+0x96>
 80044e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044e8:	1e13      	subs	r3, r2, #0
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	bf18      	it	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	0692      	lsls	r2, r2, #26
 80044f2:	d42b      	bmi.n	800454c <_printf_common+0xb0>
 80044f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044f8:	4649      	mov	r1, r9
 80044fa:	4638      	mov	r0, r7
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d01e      	beq.n	8004540 <_printf_common+0xa4>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	6922      	ldr	r2, [r4, #16]
 8004506:	f003 0306 	and.w	r3, r3, #6
 800450a:	2b04      	cmp	r3, #4
 800450c:	bf02      	ittt	eq
 800450e:	68e5      	ldreq	r5, [r4, #12]
 8004510:	6833      	ldreq	r3, [r6, #0]
 8004512:	1aed      	subeq	r5, r5, r3
 8004514:	68a3      	ldr	r3, [r4, #8]
 8004516:	bf0c      	ite	eq
 8004518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800451c:	2500      	movne	r5, #0
 800451e:	4293      	cmp	r3, r2
 8004520:	bfc4      	itt	gt
 8004522:	1a9b      	subgt	r3, r3, r2
 8004524:	18ed      	addgt	r5, r5, r3
 8004526:	2600      	movs	r6, #0
 8004528:	341a      	adds	r4, #26
 800452a:	42b5      	cmp	r5, r6
 800452c:	d11a      	bne.n	8004564 <_printf_common+0xc8>
 800452e:	2000      	movs	r0, #0
 8004530:	e008      	b.n	8004544 <_printf_common+0xa8>
 8004532:	2301      	movs	r3, #1
 8004534:	4652      	mov	r2, sl
 8004536:	4649      	mov	r1, r9
 8004538:	4638      	mov	r0, r7
 800453a:	47c0      	blx	r8
 800453c:	3001      	adds	r0, #1
 800453e:	d103      	bne.n	8004548 <_printf_common+0xac>
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004548:	3501      	adds	r5, #1
 800454a:	e7c6      	b.n	80044da <_printf_common+0x3e>
 800454c:	18e1      	adds	r1, r4, r3
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	2030      	movs	r0, #48	; 0x30
 8004552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004556:	4422      	add	r2, r4
 8004558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800455c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004560:	3302      	adds	r3, #2
 8004562:	e7c7      	b.n	80044f4 <_printf_common+0x58>
 8004564:	2301      	movs	r3, #1
 8004566:	4622      	mov	r2, r4
 8004568:	4649      	mov	r1, r9
 800456a:	4638      	mov	r0, r7
 800456c:	47c0      	blx	r8
 800456e:	3001      	adds	r0, #1
 8004570:	d0e6      	beq.n	8004540 <_printf_common+0xa4>
 8004572:	3601      	adds	r6, #1
 8004574:	e7d9      	b.n	800452a <_printf_common+0x8e>
	...

08004578 <_printf_i>:
 8004578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	7e0f      	ldrb	r7, [r1, #24]
 800457e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004580:	2f78      	cmp	r7, #120	; 0x78
 8004582:	4691      	mov	r9, r2
 8004584:	4680      	mov	r8, r0
 8004586:	460c      	mov	r4, r1
 8004588:	469a      	mov	sl, r3
 800458a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800458e:	d807      	bhi.n	80045a0 <_printf_i+0x28>
 8004590:	2f62      	cmp	r7, #98	; 0x62
 8004592:	d80a      	bhi.n	80045aa <_printf_i+0x32>
 8004594:	2f00      	cmp	r7, #0
 8004596:	f000 80d4 	beq.w	8004742 <_printf_i+0x1ca>
 800459a:	2f58      	cmp	r7, #88	; 0x58
 800459c:	f000 80c0 	beq.w	8004720 <_printf_i+0x1a8>
 80045a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045a8:	e03a      	b.n	8004620 <_printf_i+0xa8>
 80045aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ae:	2b15      	cmp	r3, #21
 80045b0:	d8f6      	bhi.n	80045a0 <_printf_i+0x28>
 80045b2:	a101      	add	r1, pc, #4	; (adr r1, 80045b8 <_printf_i+0x40>)
 80045b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045b8:	08004611 	.word	0x08004611
 80045bc:	08004625 	.word	0x08004625
 80045c0:	080045a1 	.word	0x080045a1
 80045c4:	080045a1 	.word	0x080045a1
 80045c8:	080045a1 	.word	0x080045a1
 80045cc:	080045a1 	.word	0x080045a1
 80045d0:	08004625 	.word	0x08004625
 80045d4:	080045a1 	.word	0x080045a1
 80045d8:	080045a1 	.word	0x080045a1
 80045dc:	080045a1 	.word	0x080045a1
 80045e0:	080045a1 	.word	0x080045a1
 80045e4:	08004729 	.word	0x08004729
 80045e8:	08004651 	.word	0x08004651
 80045ec:	080046e3 	.word	0x080046e3
 80045f0:	080045a1 	.word	0x080045a1
 80045f4:	080045a1 	.word	0x080045a1
 80045f8:	0800474b 	.word	0x0800474b
 80045fc:	080045a1 	.word	0x080045a1
 8004600:	08004651 	.word	0x08004651
 8004604:	080045a1 	.word	0x080045a1
 8004608:	080045a1 	.word	0x080045a1
 800460c:	080046eb 	.word	0x080046eb
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	1d1a      	adds	r2, r3, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	602a      	str	r2, [r5, #0]
 8004618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800461c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004620:	2301      	movs	r3, #1
 8004622:	e09f      	b.n	8004764 <_printf_i+0x1ec>
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	682b      	ldr	r3, [r5, #0]
 8004628:	0607      	lsls	r7, r0, #24
 800462a:	f103 0104 	add.w	r1, r3, #4
 800462e:	6029      	str	r1, [r5, #0]
 8004630:	d501      	bpl.n	8004636 <_printf_i+0xbe>
 8004632:	681e      	ldr	r6, [r3, #0]
 8004634:	e003      	b.n	800463e <_printf_i+0xc6>
 8004636:	0646      	lsls	r6, r0, #25
 8004638:	d5fb      	bpl.n	8004632 <_printf_i+0xba>
 800463a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800463e:	2e00      	cmp	r6, #0
 8004640:	da03      	bge.n	800464a <_printf_i+0xd2>
 8004642:	232d      	movs	r3, #45	; 0x2d
 8004644:	4276      	negs	r6, r6
 8004646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800464a:	485a      	ldr	r0, [pc, #360]	; (80047b4 <_printf_i+0x23c>)
 800464c:	230a      	movs	r3, #10
 800464e:	e012      	b.n	8004676 <_printf_i+0xfe>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	1d19      	adds	r1, r3, #4
 8004656:	6029      	str	r1, [r5, #0]
 8004658:	0605      	lsls	r5, r0, #24
 800465a:	d501      	bpl.n	8004660 <_printf_i+0xe8>
 800465c:	681e      	ldr	r6, [r3, #0]
 800465e:	e002      	b.n	8004666 <_printf_i+0xee>
 8004660:	0641      	lsls	r1, r0, #25
 8004662:	d5fb      	bpl.n	800465c <_printf_i+0xe4>
 8004664:	881e      	ldrh	r6, [r3, #0]
 8004666:	4853      	ldr	r0, [pc, #332]	; (80047b4 <_printf_i+0x23c>)
 8004668:	2f6f      	cmp	r7, #111	; 0x6f
 800466a:	bf0c      	ite	eq
 800466c:	2308      	moveq	r3, #8
 800466e:	230a      	movne	r3, #10
 8004670:	2100      	movs	r1, #0
 8004672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004676:	6865      	ldr	r5, [r4, #4]
 8004678:	60a5      	str	r5, [r4, #8]
 800467a:	2d00      	cmp	r5, #0
 800467c:	bfa2      	ittt	ge
 800467e:	6821      	ldrge	r1, [r4, #0]
 8004680:	f021 0104 	bicge.w	r1, r1, #4
 8004684:	6021      	strge	r1, [r4, #0]
 8004686:	b90e      	cbnz	r6, 800468c <_printf_i+0x114>
 8004688:	2d00      	cmp	r5, #0
 800468a:	d04b      	beq.n	8004724 <_printf_i+0x1ac>
 800468c:	4615      	mov	r5, r2
 800468e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004692:	fb03 6711 	mls	r7, r3, r1, r6
 8004696:	5dc7      	ldrb	r7, [r0, r7]
 8004698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800469c:	4637      	mov	r7, r6
 800469e:	42bb      	cmp	r3, r7
 80046a0:	460e      	mov	r6, r1
 80046a2:	d9f4      	bls.n	800468e <_printf_i+0x116>
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d10b      	bne.n	80046c0 <_printf_i+0x148>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	07de      	lsls	r6, r3, #31
 80046ac:	d508      	bpl.n	80046c0 <_printf_i+0x148>
 80046ae:	6923      	ldr	r3, [r4, #16]
 80046b0:	6861      	ldr	r1, [r4, #4]
 80046b2:	4299      	cmp	r1, r3
 80046b4:	bfde      	ittt	le
 80046b6:	2330      	movle	r3, #48	; 0x30
 80046b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046c0:	1b52      	subs	r2, r2, r5
 80046c2:	6122      	str	r2, [r4, #16]
 80046c4:	f8cd a000 	str.w	sl, [sp]
 80046c8:	464b      	mov	r3, r9
 80046ca:	aa03      	add	r2, sp, #12
 80046cc:	4621      	mov	r1, r4
 80046ce:	4640      	mov	r0, r8
 80046d0:	f7ff fee4 	bl	800449c <_printf_common>
 80046d4:	3001      	adds	r0, #1
 80046d6:	d14a      	bne.n	800476e <_printf_i+0x1f6>
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	b004      	add	sp, #16
 80046de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	f043 0320 	orr.w	r3, r3, #32
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	4833      	ldr	r0, [pc, #204]	; (80047b8 <_printf_i+0x240>)
 80046ec:	2778      	movs	r7, #120	; 0x78
 80046ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	6829      	ldr	r1, [r5, #0]
 80046f6:	061f      	lsls	r7, r3, #24
 80046f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80046fc:	d402      	bmi.n	8004704 <_printf_i+0x18c>
 80046fe:	065f      	lsls	r7, r3, #25
 8004700:	bf48      	it	mi
 8004702:	b2b6      	uxthmi	r6, r6
 8004704:	07df      	lsls	r7, r3, #31
 8004706:	bf48      	it	mi
 8004708:	f043 0320 	orrmi.w	r3, r3, #32
 800470c:	6029      	str	r1, [r5, #0]
 800470e:	bf48      	it	mi
 8004710:	6023      	strmi	r3, [r4, #0]
 8004712:	b91e      	cbnz	r6, 800471c <_printf_i+0x1a4>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	f023 0320 	bic.w	r3, r3, #32
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	2310      	movs	r3, #16
 800471e:	e7a7      	b.n	8004670 <_printf_i+0xf8>
 8004720:	4824      	ldr	r0, [pc, #144]	; (80047b4 <_printf_i+0x23c>)
 8004722:	e7e4      	b.n	80046ee <_printf_i+0x176>
 8004724:	4615      	mov	r5, r2
 8004726:	e7bd      	b.n	80046a4 <_printf_i+0x12c>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	6826      	ldr	r6, [r4, #0]
 800472c:	6961      	ldr	r1, [r4, #20]
 800472e:	1d18      	adds	r0, r3, #4
 8004730:	6028      	str	r0, [r5, #0]
 8004732:	0635      	lsls	r5, r6, #24
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	d501      	bpl.n	800473c <_printf_i+0x1c4>
 8004738:	6019      	str	r1, [r3, #0]
 800473a:	e002      	b.n	8004742 <_printf_i+0x1ca>
 800473c:	0670      	lsls	r0, r6, #25
 800473e:	d5fb      	bpl.n	8004738 <_printf_i+0x1c0>
 8004740:	8019      	strh	r1, [r3, #0]
 8004742:	2300      	movs	r3, #0
 8004744:	6123      	str	r3, [r4, #16]
 8004746:	4615      	mov	r5, r2
 8004748:	e7bc      	b.n	80046c4 <_printf_i+0x14c>
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	1d1a      	adds	r2, r3, #4
 800474e:	602a      	str	r2, [r5, #0]
 8004750:	681d      	ldr	r5, [r3, #0]
 8004752:	6862      	ldr	r2, [r4, #4]
 8004754:	2100      	movs	r1, #0
 8004756:	4628      	mov	r0, r5
 8004758:	f7fb fd3a 	bl	80001d0 <memchr>
 800475c:	b108      	cbz	r0, 8004762 <_printf_i+0x1ea>
 800475e:	1b40      	subs	r0, r0, r5
 8004760:	6060      	str	r0, [r4, #4]
 8004762:	6863      	ldr	r3, [r4, #4]
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	2300      	movs	r3, #0
 8004768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800476c:	e7aa      	b.n	80046c4 <_printf_i+0x14c>
 800476e:	6923      	ldr	r3, [r4, #16]
 8004770:	462a      	mov	r2, r5
 8004772:	4649      	mov	r1, r9
 8004774:	4640      	mov	r0, r8
 8004776:	47d0      	blx	sl
 8004778:	3001      	adds	r0, #1
 800477a:	d0ad      	beq.n	80046d8 <_printf_i+0x160>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	079b      	lsls	r3, r3, #30
 8004780:	d413      	bmi.n	80047aa <_printf_i+0x232>
 8004782:	68e0      	ldr	r0, [r4, #12]
 8004784:	9b03      	ldr	r3, [sp, #12]
 8004786:	4298      	cmp	r0, r3
 8004788:	bfb8      	it	lt
 800478a:	4618      	movlt	r0, r3
 800478c:	e7a6      	b.n	80046dc <_printf_i+0x164>
 800478e:	2301      	movs	r3, #1
 8004790:	4632      	mov	r2, r6
 8004792:	4649      	mov	r1, r9
 8004794:	4640      	mov	r0, r8
 8004796:	47d0      	blx	sl
 8004798:	3001      	adds	r0, #1
 800479a:	d09d      	beq.n	80046d8 <_printf_i+0x160>
 800479c:	3501      	adds	r5, #1
 800479e:	68e3      	ldr	r3, [r4, #12]
 80047a0:	9903      	ldr	r1, [sp, #12]
 80047a2:	1a5b      	subs	r3, r3, r1
 80047a4:	42ab      	cmp	r3, r5
 80047a6:	dcf2      	bgt.n	800478e <_printf_i+0x216>
 80047a8:	e7eb      	b.n	8004782 <_printf_i+0x20a>
 80047aa:	2500      	movs	r5, #0
 80047ac:	f104 0619 	add.w	r6, r4, #25
 80047b0:	e7f5      	b.n	800479e <_printf_i+0x226>
 80047b2:	bf00      	nop
 80047b4:	08004bb9 	.word	0x08004bb9
 80047b8:	08004bca 	.word	0x08004bca

080047bc <__sflush_r>:
 80047bc:	898a      	ldrh	r2, [r1, #12]
 80047be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c2:	4605      	mov	r5, r0
 80047c4:	0710      	lsls	r0, r2, #28
 80047c6:	460c      	mov	r4, r1
 80047c8:	d458      	bmi.n	800487c <__sflush_r+0xc0>
 80047ca:	684b      	ldr	r3, [r1, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	dc05      	bgt.n	80047dc <__sflush_r+0x20>
 80047d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dc02      	bgt.n	80047dc <__sflush_r+0x20>
 80047d6:	2000      	movs	r0, #0
 80047d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047de:	2e00      	cmp	r6, #0
 80047e0:	d0f9      	beq.n	80047d6 <__sflush_r+0x1a>
 80047e2:	2300      	movs	r3, #0
 80047e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047e8:	682f      	ldr	r7, [r5, #0]
 80047ea:	6a21      	ldr	r1, [r4, #32]
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	d032      	beq.n	8004856 <__sflush_r+0x9a>
 80047f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	075a      	lsls	r2, r3, #29
 80047f6:	d505      	bpl.n	8004804 <__sflush_r+0x48>
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	1ac0      	subs	r0, r0, r3
 80047fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047fe:	b10b      	cbz	r3, 8004804 <__sflush_r+0x48>
 8004800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004802:	1ac0      	subs	r0, r0, r3
 8004804:	2300      	movs	r3, #0
 8004806:	4602      	mov	r2, r0
 8004808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800480a:	6a21      	ldr	r1, [r4, #32]
 800480c:	4628      	mov	r0, r5
 800480e:	47b0      	blx	r6
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	d106      	bne.n	8004824 <__sflush_r+0x68>
 8004816:	6829      	ldr	r1, [r5, #0]
 8004818:	291d      	cmp	r1, #29
 800481a:	d82b      	bhi.n	8004874 <__sflush_r+0xb8>
 800481c:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <__sflush_r+0x108>)
 800481e:	410a      	asrs	r2, r1
 8004820:	07d6      	lsls	r6, r2, #31
 8004822:	d427      	bmi.n	8004874 <__sflush_r+0xb8>
 8004824:	2200      	movs	r2, #0
 8004826:	6062      	str	r2, [r4, #4]
 8004828:	04d9      	lsls	r1, r3, #19
 800482a:	6922      	ldr	r2, [r4, #16]
 800482c:	6022      	str	r2, [r4, #0]
 800482e:	d504      	bpl.n	800483a <__sflush_r+0x7e>
 8004830:	1c42      	adds	r2, r0, #1
 8004832:	d101      	bne.n	8004838 <__sflush_r+0x7c>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b903      	cbnz	r3, 800483a <__sflush_r+0x7e>
 8004838:	6560      	str	r0, [r4, #84]	; 0x54
 800483a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800483c:	602f      	str	r7, [r5, #0]
 800483e:	2900      	cmp	r1, #0
 8004840:	d0c9      	beq.n	80047d6 <__sflush_r+0x1a>
 8004842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004846:	4299      	cmp	r1, r3
 8004848:	d002      	beq.n	8004850 <__sflush_r+0x94>
 800484a:	4628      	mov	r0, r5
 800484c:	f7ff fbea 	bl	8004024 <_free_r>
 8004850:	2000      	movs	r0, #0
 8004852:	6360      	str	r0, [r4, #52]	; 0x34
 8004854:	e7c0      	b.n	80047d8 <__sflush_r+0x1c>
 8004856:	2301      	movs	r3, #1
 8004858:	4628      	mov	r0, r5
 800485a:	47b0      	blx	r6
 800485c:	1c41      	adds	r1, r0, #1
 800485e:	d1c8      	bne.n	80047f2 <__sflush_r+0x36>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0c5      	beq.n	80047f2 <__sflush_r+0x36>
 8004866:	2b1d      	cmp	r3, #29
 8004868:	d001      	beq.n	800486e <__sflush_r+0xb2>
 800486a:	2b16      	cmp	r3, #22
 800486c:	d101      	bne.n	8004872 <__sflush_r+0xb6>
 800486e:	602f      	str	r7, [r5, #0]
 8004870:	e7b1      	b.n	80047d6 <__sflush_r+0x1a>
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	e7ad      	b.n	80047d8 <__sflush_r+0x1c>
 800487c:	690f      	ldr	r7, [r1, #16]
 800487e:	2f00      	cmp	r7, #0
 8004880:	d0a9      	beq.n	80047d6 <__sflush_r+0x1a>
 8004882:	0793      	lsls	r3, r2, #30
 8004884:	680e      	ldr	r6, [r1, #0]
 8004886:	bf08      	it	eq
 8004888:	694b      	ldreq	r3, [r1, #20]
 800488a:	600f      	str	r7, [r1, #0]
 800488c:	bf18      	it	ne
 800488e:	2300      	movne	r3, #0
 8004890:	eba6 0807 	sub.w	r8, r6, r7
 8004894:	608b      	str	r3, [r1, #8]
 8004896:	f1b8 0f00 	cmp.w	r8, #0
 800489a:	dd9c      	ble.n	80047d6 <__sflush_r+0x1a>
 800489c:	6a21      	ldr	r1, [r4, #32]
 800489e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048a0:	4643      	mov	r3, r8
 80048a2:	463a      	mov	r2, r7
 80048a4:	4628      	mov	r0, r5
 80048a6:	47b0      	blx	r6
 80048a8:	2800      	cmp	r0, #0
 80048aa:	dc06      	bgt.n	80048ba <__sflush_r+0xfe>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b2:	81a3      	strh	r3, [r4, #12]
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	e78e      	b.n	80047d8 <__sflush_r+0x1c>
 80048ba:	4407      	add	r7, r0
 80048bc:	eba8 0800 	sub.w	r8, r8, r0
 80048c0:	e7e9      	b.n	8004896 <__sflush_r+0xda>
 80048c2:	bf00      	nop
 80048c4:	dfbffffe 	.word	0xdfbffffe

080048c8 <_fflush_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	690b      	ldr	r3, [r1, #16]
 80048cc:	4605      	mov	r5, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	b913      	cbnz	r3, 80048d8 <_fflush_r+0x10>
 80048d2:	2500      	movs	r5, #0
 80048d4:	4628      	mov	r0, r5
 80048d6:	bd38      	pop	{r3, r4, r5, pc}
 80048d8:	b118      	cbz	r0, 80048e2 <_fflush_r+0x1a>
 80048da:	6a03      	ldr	r3, [r0, #32]
 80048dc:	b90b      	cbnz	r3, 80048e2 <_fflush_r+0x1a>
 80048de:	f7ff fa99 	bl	8003e14 <__sinit>
 80048e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f3      	beq.n	80048d2 <_fflush_r+0xa>
 80048ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048ec:	07d0      	lsls	r0, r2, #31
 80048ee:	d404      	bmi.n	80048fa <_fflush_r+0x32>
 80048f0:	0599      	lsls	r1, r3, #22
 80048f2:	d402      	bmi.n	80048fa <_fflush_r+0x32>
 80048f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048f6:	f7ff fb92 	bl	800401e <__retarget_lock_acquire_recursive>
 80048fa:	4628      	mov	r0, r5
 80048fc:	4621      	mov	r1, r4
 80048fe:	f7ff ff5d 	bl	80047bc <__sflush_r>
 8004902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004904:	07da      	lsls	r2, r3, #31
 8004906:	4605      	mov	r5, r0
 8004908:	d4e4      	bmi.n	80048d4 <_fflush_r+0xc>
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	059b      	lsls	r3, r3, #22
 800490e:	d4e1      	bmi.n	80048d4 <_fflush_r+0xc>
 8004910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004912:	f7ff fb85 	bl	8004020 <__retarget_lock_release_recursive>
 8004916:	e7dd      	b.n	80048d4 <_fflush_r+0xc>

08004918 <__swbuf_r>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	460e      	mov	r6, r1
 800491c:	4614      	mov	r4, r2
 800491e:	4605      	mov	r5, r0
 8004920:	b118      	cbz	r0, 800492a <__swbuf_r+0x12>
 8004922:	6a03      	ldr	r3, [r0, #32]
 8004924:	b90b      	cbnz	r3, 800492a <__swbuf_r+0x12>
 8004926:	f7ff fa75 	bl	8003e14 <__sinit>
 800492a:	69a3      	ldr	r3, [r4, #24]
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	071a      	lsls	r2, r3, #28
 8004932:	d525      	bpl.n	8004980 <__swbuf_r+0x68>
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	b31b      	cbz	r3, 8004980 <__swbuf_r+0x68>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	6922      	ldr	r2, [r4, #16]
 800493c:	1a98      	subs	r0, r3, r2
 800493e:	6963      	ldr	r3, [r4, #20]
 8004940:	b2f6      	uxtb	r6, r6
 8004942:	4283      	cmp	r3, r0
 8004944:	4637      	mov	r7, r6
 8004946:	dc04      	bgt.n	8004952 <__swbuf_r+0x3a>
 8004948:	4621      	mov	r1, r4
 800494a:	4628      	mov	r0, r5
 800494c:	f7ff ffbc 	bl	80048c8 <_fflush_r>
 8004950:	b9e0      	cbnz	r0, 800498c <__swbuf_r+0x74>
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	3b01      	subs	r3, #1
 8004956:	60a3      	str	r3, [r4, #8]
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	6022      	str	r2, [r4, #0]
 800495e:	701e      	strb	r6, [r3, #0]
 8004960:	6962      	ldr	r2, [r4, #20]
 8004962:	1c43      	adds	r3, r0, #1
 8004964:	429a      	cmp	r2, r3
 8004966:	d004      	beq.n	8004972 <__swbuf_r+0x5a>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	07db      	lsls	r3, r3, #31
 800496c:	d506      	bpl.n	800497c <__swbuf_r+0x64>
 800496e:	2e0a      	cmp	r6, #10
 8004970:	d104      	bne.n	800497c <__swbuf_r+0x64>
 8004972:	4621      	mov	r1, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f7ff ffa7 	bl	80048c8 <_fflush_r>
 800497a:	b938      	cbnz	r0, 800498c <__swbuf_r+0x74>
 800497c:	4638      	mov	r0, r7
 800497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004980:	4621      	mov	r1, r4
 8004982:	4628      	mov	r0, r5
 8004984:	f000 f806 	bl	8004994 <__swsetup_r>
 8004988:	2800      	cmp	r0, #0
 800498a:	d0d5      	beq.n	8004938 <__swbuf_r+0x20>
 800498c:	f04f 37ff 	mov.w	r7, #4294967295
 8004990:	e7f4      	b.n	800497c <__swbuf_r+0x64>
	...

08004994 <__swsetup_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <__swsetup_r+0xac>)
 8004998:	4605      	mov	r5, r0
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	460c      	mov	r4, r1
 800499e:	b118      	cbz	r0, 80049a8 <__swsetup_r+0x14>
 80049a0:	6a03      	ldr	r3, [r0, #32]
 80049a2:	b90b      	cbnz	r3, 80049a8 <__swsetup_r+0x14>
 80049a4:	f7ff fa36 	bl	8003e14 <__sinit>
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049ae:	0718      	lsls	r0, r3, #28
 80049b0:	d422      	bmi.n	80049f8 <__swsetup_r+0x64>
 80049b2:	06d9      	lsls	r1, r3, #27
 80049b4:	d407      	bmi.n	80049c6 <__swsetup_r+0x32>
 80049b6:	2309      	movs	r3, #9
 80049b8:	602b      	str	r3, [r5, #0]
 80049ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049be:	81a3      	strh	r3, [r4, #12]
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	e034      	b.n	8004a30 <__swsetup_r+0x9c>
 80049c6:	0758      	lsls	r0, r3, #29
 80049c8:	d512      	bpl.n	80049f0 <__swsetup_r+0x5c>
 80049ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049cc:	b141      	cbz	r1, 80049e0 <__swsetup_r+0x4c>
 80049ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049d2:	4299      	cmp	r1, r3
 80049d4:	d002      	beq.n	80049dc <__swsetup_r+0x48>
 80049d6:	4628      	mov	r0, r5
 80049d8:	f7ff fb24 	bl	8004024 <_free_r>
 80049dc:	2300      	movs	r3, #0
 80049de:	6363      	str	r3, [r4, #52]	; 0x34
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	2300      	movs	r3, #0
 80049ea:	6063      	str	r3, [r4, #4]
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	f043 0308 	orr.w	r3, r3, #8
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	6923      	ldr	r3, [r4, #16]
 80049fa:	b94b      	cbnz	r3, 8004a10 <__swsetup_r+0x7c>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a06:	d003      	beq.n	8004a10 <__swsetup_r+0x7c>
 8004a08:	4621      	mov	r1, r4
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f000 f850 	bl	8004ab0 <__smakebuf_r>
 8004a10:	89a0      	ldrh	r0, [r4, #12]
 8004a12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a16:	f010 0301 	ands.w	r3, r0, #1
 8004a1a:	d00a      	beq.n	8004a32 <__swsetup_r+0x9e>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60a3      	str	r3, [r4, #8]
 8004a20:	6963      	ldr	r3, [r4, #20]
 8004a22:	425b      	negs	r3, r3
 8004a24:	61a3      	str	r3, [r4, #24]
 8004a26:	6923      	ldr	r3, [r4, #16]
 8004a28:	b943      	cbnz	r3, 8004a3c <__swsetup_r+0xa8>
 8004a2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a2e:	d1c4      	bne.n	80049ba <__swsetup_r+0x26>
 8004a30:	bd38      	pop	{r3, r4, r5, pc}
 8004a32:	0781      	lsls	r1, r0, #30
 8004a34:	bf58      	it	pl
 8004a36:	6963      	ldrpl	r3, [r4, #20]
 8004a38:	60a3      	str	r3, [r4, #8]
 8004a3a:	e7f4      	b.n	8004a26 <__swsetup_r+0x92>
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	e7f7      	b.n	8004a30 <__swsetup_r+0x9c>
 8004a40:	20000064 	.word	0x20000064

08004a44 <_sbrk_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4d06      	ldr	r5, [pc, #24]	; (8004a60 <_sbrk_r+0x1c>)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	602b      	str	r3, [r5, #0]
 8004a50:	f7fc f9ec 	bl	8000e2c <_sbrk>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_sbrk_r+0x1a>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_sbrk_r+0x1a>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	20000388 	.word	0x20000388

08004a64 <__swhatbuf_r>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	460c      	mov	r4, r1
 8004a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6c:	2900      	cmp	r1, #0
 8004a6e:	b096      	sub	sp, #88	; 0x58
 8004a70:	4615      	mov	r5, r2
 8004a72:	461e      	mov	r6, r3
 8004a74:	da0d      	bge.n	8004a92 <__swhatbuf_r+0x2e>
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a7c:	f04f 0100 	mov.w	r1, #0
 8004a80:	bf0c      	ite	eq
 8004a82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004a86:	2340      	movne	r3, #64	; 0x40
 8004a88:	2000      	movs	r0, #0
 8004a8a:	6031      	str	r1, [r6, #0]
 8004a8c:	602b      	str	r3, [r5, #0]
 8004a8e:	b016      	add	sp, #88	; 0x58
 8004a90:	bd70      	pop	{r4, r5, r6, pc}
 8004a92:	466a      	mov	r2, sp
 8004a94:	f000 f848 	bl	8004b28 <_fstat_r>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	dbec      	blt.n	8004a76 <__swhatbuf_r+0x12>
 8004a9c:	9901      	ldr	r1, [sp, #4]
 8004a9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004aa2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004aa6:	4259      	negs	r1, r3
 8004aa8:	4159      	adcs	r1, r3
 8004aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aae:	e7eb      	b.n	8004a88 <__swhatbuf_r+0x24>

08004ab0 <__smakebuf_r>:
 8004ab0:	898b      	ldrh	r3, [r1, #12]
 8004ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ab4:	079d      	lsls	r5, r3, #30
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	460c      	mov	r4, r1
 8004aba:	d507      	bpl.n	8004acc <__smakebuf_r+0x1c>
 8004abc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	6163      	str	r3, [r4, #20]
 8004ac8:	b002      	add	sp, #8
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	ab01      	add	r3, sp, #4
 8004ace:	466a      	mov	r2, sp
 8004ad0:	f7ff ffc8 	bl	8004a64 <__swhatbuf_r>
 8004ad4:	9900      	ldr	r1, [sp, #0]
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7ff fb0f 	bl	80040fc <_malloc_r>
 8004ade:	b948      	cbnz	r0, 8004af4 <__smakebuf_r+0x44>
 8004ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ae4:	059a      	lsls	r2, r3, #22
 8004ae6:	d4ef      	bmi.n	8004ac8 <__smakebuf_r+0x18>
 8004ae8:	f023 0303 	bic.w	r3, r3, #3
 8004aec:	f043 0302 	orr.w	r3, r3, #2
 8004af0:	81a3      	strh	r3, [r4, #12]
 8004af2:	e7e3      	b.n	8004abc <__smakebuf_r+0xc>
 8004af4:	89a3      	ldrh	r3, [r4, #12]
 8004af6:	6020      	str	r0, [r4, #0]
 8004af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afc:	81a3      	strh	r3, [r4, #12]
 8004afe:	9b00      	ldr	r3, [sp, #0]
 8004b00:	6163      	str	r3, [r4, #20]
 8004b02:	9b01      	ldr	r3, [sp, #4]
 8004b04:	6120      	str	r0, [r4, #16]
 8004b06:	b15b      	cbz	r3, 8004b20 <__smakebuf_r+0x70>
 8004b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f000 f81d 	bl	8004b4c <_isatty_r>
 8004b12:	b128      	cbz	r0, 8004b20 <__smakebuf_r+0x70>
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	f023 0303 	bic.w	r3, r3, #3
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	81a3      	strh	r3, [r4, #12]
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	431d      	orrs	r5, r3
 8004b24:	81a5      	strh	r5, [r4, #12]
 8004b26:	e7cf      	b.n	8004ac8 <__smakebuf_r+0x18>

08004b28 <_fstat_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4d07      	ldr	r5, [pc, #28]	; (8004b48 <_fstat_r+0x20>)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	602b      	str	r3, [r5, #0]
 8004b36:	f7fc f950 	bl	8000dda <_fstat>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d102      	bne.n	8004b44 <_fstat_r+0x1c>
 8004b3e:	682b      	ldr	r3, [r5, #0]
 8004b40:	b103      	cbz	r3, 8004b44 <_fstat_r+0x1c>
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	bd38      	pop	{r3, r4, r5, pc}
 8004b46:	bf00      	nop
 8004b48:	20000388 	.word	0x20000388

08004b4c <_isatty_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4d06      	ldr	r5, [pc, #24]	; (8004b68 <_isatty_r+0x1c>)
 8004b50:	2300      	movs	r3, #0
 8004b52:	4604      	mov	r4, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	f7fc f94f 	bl	8000dfa <_isatty>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_isatty_r+0x1a>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_isatty_r+0x1a>
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	20000388 	.word	0x20000388

08004b6c <_init>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr

08004b78 <_fini>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	bf00      	nop
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr
