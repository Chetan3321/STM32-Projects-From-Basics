
OLED_TRY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002010  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  080021a4  080021a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f2c  08002f2c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f34  08002f34  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f38  08002f38  00012f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000014  08002f50  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08002f50  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008035  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001702  00000000  00000000  00028079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00029780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  00029f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c65  00000000  00000000  0002a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8d4  00000000  00000000  00040325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000851f5  00000000  00000000  0004abf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfdee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fc8  00000000  00000000  000cfe40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800218c 	.word	0x0800218c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	0800218c 	.word	0x0800218c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd88 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f83a 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8c6 	bl	8000674 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e8:	f000 f896 	bl	8000618 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();  // initialise
 80004ec:	f000 faf2 	bl	8000ad4 <SSD1306_Init>
/// lets print some string

  SSD1306_GotoXY (0,0);
 80004f0:	2100      	movs	r1, #0
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fc4c 	bl	8000d90 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	4913      	ldr	r1, [pc, #76]	; (8000548 <main+0x70>)
 80004fc:	4813      	ldr	r0, [pc, #76]	; (800054c <main+0x74>)
 80004fe:	f000 fcdd 	bl	8000ebc <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 8000502:	211e      	movs	r1, #30
 8000504:	200a      	movs	r0, #10
 8000506:	f000 fc43 	bl	8000d90 <SSD1306_GotoXY>
  SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 800050a:	2201      	movs	r2, #1
 800050c:	490e      	ldr	r1, [pc, #56]	; (8000548 <main+0x70>)
 800050e:	4810      	ldr	r0, [pc, #64]	; (8000550 <main+0x78>)
 8000510:	f000 fcd4 	bl	8000ebc <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 8000514:	f000 fb96 	bl	8000c44 <SSD1306_UpdateScreen>

  HAL_Delay (2000);
 8000518:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800051c:	f000 fdda 	bl	80010d4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2102      	movs	r1, #2
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <main+0x7c>)
 8000526:	f001 f863 	bl	80015f0 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 800052a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800052e:	f000 fdd1 	bl	80010d4 <HAL_Delay>
	  HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_SET);
 8000532:	2201      	movs	r2, #1
 8000534:	2102      	movs	r1, #2
 8000536:	4807      	ldr	r0, [pc, #28]	; (8000554 <main+0x7c>)
 8000538:	f001 f85a 	bl	80015f0 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 800053c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000540:	f000 fdc8 	bl	80010d4 <HAL_Delay>
	  HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8000544:	e7ec      	b.n	8000520 <main+0x48>
 8000546:	bf00      	nop
 8000548:	20000004 	.word	0x20000004
 800054c:	080021a4 	.word	0x080021a4
 8000550:	080021ac 	.word	0x080021ac
 8000554:	40020000 	.word	0x40020000

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fe08 	bl	800217c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <SystemClock_Config+0xb8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <SystemClock_Config+0xb8>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <SystemClock_Config+0xb8>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <SystemClock_Config+0xbc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <SystemClock_Config+0xbc>)
 80005a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <SystemClock_Config+0xbc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 f96d 	bl	80018ac <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d8:	f000 f89c 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fbd0 	bl	8001d9c <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000602:	f000 f887 	bl	8000714 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C1_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_I2C1_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C1_Init+0x50>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_I2C1_Init+0x58>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_I2C1_Init+0x50>)
 8000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_I2C1_Init+0x50>)
 8000656:	f000 ffe5 	bl	8001624 <HAL_I2C_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 f858 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000030 	.word	0x20000030
 800066c:	40005400 	.word	0x40005400
 8000670:	000186a0 	.word	0x000186a0

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_GPIO_Init+0x98>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a1e      	ldr	r2, [pc, #120]	; (800070c <MX_GPIO_Init+0x98>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_GPIO_Init+0x98>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_GPIO_Init+0x98>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <MX_GPIO_Init+0x98>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_GPIO_Init+0x98>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_GPIO_Init+0x98>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a10      	ldr	r2, [pc, #64]	; (800070c <MX_GPIO_Init+0x98>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_GPIO_Init+0x98>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2102      	movs	r1, #2
 80006e2:	480b      	ldr	r0, [pc, #44]	; (8000710 <MX_GPIO_Init+0x9c>)
 80006e4:	f000 ff84 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A1_Pin */
  GPIO_InitStruct.Pin = A1_Pin;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A1_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	4619      	mov	r1, r3
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_GPIO_Init+0x9c>)
 8000700:	f000 fdf2 	bl	80012e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40020000 	.word	0x40020000

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <HAL_MspInit+0x4c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x4c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <HAL_I2C_MspInit+0x84>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d12c      	bne.n	80007ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <HAL_I2C_MspInit+0x88>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <HAL_I2C_MspInit+0x88>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_I2C_MspInit+0x88>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b4:	2312      	movs	r3, #18
 80007b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c0:	2304      	movs	r3, #4
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <HAL_I2C_MspInit+0x8c>)
 80007cc:	f000 fd8c 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_I2C_MspInit+0x88>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <HAL_I2C_MspInit+0x88>)
 80007da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_I2C_MspInit+0x88>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40005400 	.word	0x40005400
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020400 	.word	0x40020400

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084c:	f000 fc22 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800087e:	490e      	ldr	r1, [pc, #56]	; (80008b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000880:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000894:	4c0b      	ldr	r4, [pc, #44]	; (80008c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008a2:	f7ff ffd7 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008a6:	f001 fc45 	bl	8002134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008aa:	f7ff fe15 	bl	80004d8 <main>
  bx  lr    
 80008ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008bc:	08002f3c 	.word	0x08002f3c
  ldr r2, =_sbss
 80008c0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008c4:	20000490 	.word	0x20000490

080008c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC_IRQHandler>
	...

080008cc <i2c_init>:
 */


#include "i2c.h"

void i2c_init(void){
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
RCC->AHB1ENR|=RCC_AHB1ENR_GPIOBEN; //enable gpiob clock
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <i2c_init+0x8c>)
 80008d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d4:	4a20      	ldr	r2, [pc, #128]	; (8000958 <i2c_init+0x8c>)
 80008d6:	f043 0302 	orr.w	r3, r3, #2
 80008da:	6313      	str	r3, [r2, #48]	; 0x30
RCC->APB1ENR|=RCC_APB1ENR_I2C1EN; //enable i2c1 clock
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <i2c_init+0x8c>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <i2c_init+0x8c>)
 80008e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
GPIOB->MODER|=0xA0000; //set pb8and9 to alternative function
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <i2c_init+0x90>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <i2c_init+0x90>)
 80008ee:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80008f2:	6013      	str	r3, [r2, #0]
GPIOB->AFR[1]|=0x44;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <i2c_init+0x90>)
 80008f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f8:	4a18      	ldr	r2, [pc, #96]	; (800095c <i2c_init+0x90>)
 80008fa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80008fe:	6253      	str	r3, [r2, #36]	; 0x24
GPIOB->OTYPER|=GPIO_OTYPER_OT8|GPIO_OTYPER_OT9; //set pb8 and pb9 as open drain
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <i2c_init+0x90>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <i2c_init+0x90>)
 8000906:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800090a:	6053      	str	r3, [r2, #4]
I2C1->CR1=I2C_CR1_SWRST;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <i2c_init+0x94>)
 800090e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000912:	601a      	str	r2, [r3, #0]
I2C1->CR1&=~I2C_CR1_SWRST;	
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <i2c_init+0x94>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a11      	ldr	r2, [pc, #68]	; (8000960 <i2c_init+0x94>)
 800091a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800091e:	6013      	str	r3, [r2, #0]
I2C1->CR2|=50;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <i2c_init+0x94>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <i2c_init+0x94>)
 8000926:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 800092a:	6053      	str	r3, [r2, #4]
I2C1->CCR|=0x2|(1<<15)|(1<<14); 
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <i2c_init+0x94>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <i2c_init+0x94>)
 8000932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	61d3      	str	r3, [r2, #28]
I2C1->TRISE=20; //output max rise 
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <i2c_init+0x94>)
 800093e:	2214      	movs	r2, #20
 8000940:	621a      	str	r2, [r3, #32]
I2C1->CR1|=I2C_CR1_PE;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <i2c_init+0x94>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a06      	ldr	r2, [pc, #24]	; (8000960 <i2c_init+0x94>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6013      	str	r3, [r2, #0]
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40023800 	.word	0x40023800
 800095c:	40020400 	.word	0x40020400
 8000960:	40005400 	.word	0x40005400

08000964 <i2c_writeByte>:
while(!(I2C1->SR1&I2C_SR1_RXNE)){;}
*data++=I2C1->DR;
return 0;
}

void i2c_writeByte(char saddr,char maddr,char data){
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	460b      	mov	r3, r1
 8000970:	71bb      	strb	r3, [r7, #6]
 8000972:	4613      	mov	r3, r2
 8000974:	717b      	strb	r3, [r7, #5]


volatile int Temp;
while(I2C1->SR2&I2C_SR2_BUSY){;}          /*wait until bus not busy*/
 8000976:	bf00      	nop
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <i2c_writeByte+0xa4>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f9      	bne.n	8000978 <i2c_writeByte+0x14>
I2C1->CR1|=I2C_CR1_START;                 /*generate start*/
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <i2c_writeByte+0xa4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <i2c_writeByte+0xa4>)
 800098a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098e:	6013      	str	r3, [r2, #0]
while(!(I2C1->SR1&I2C_SR1_SB)){;}         /*wait until start bit is set*/
 8000990:	bf00      	nop
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <i2c_writeByte+0xa4>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0f9      	beq.n	8000992 <i2c_writeByte+0x2e>
I2C1->DR = saddr<< 1;                 	 /* Send slave address*/
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	005a      	lsls	r2, r3, #1
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <i2c_writeByte+0xa4>)
 80009a4:	611a      	str	r2, [r3, #16]
while(!(I2C1->SR1&I2C_SR1_ADDR)){;}      /*wait until address flag is set*/
 80009a6:	bf00      	nop
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <i2c_writeByte+0xa4>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0f9      	beq.n	80009a8 <i2c_writeByte+0x44>
Temp = I2C1->SR2; 											 /*clear SR2 by reading it */
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <i2c_writeByte+0xa4>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	60fb      	str	r3, [r7, #12]
while(!(I2C1->SR1&I2C_SR1_TXE)){;}       /*Wait until Data register empty*/
 80009ba:	bf00      	nop
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <i2c_writeByte+0xa4>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0f9      	beq.n	80009bc <i2c_writeByte+0x58>
I2C1->DR = maddr;                        /* send memory address*/
 80009c8:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <i2c_writeByte+0xa4>)
 80009ca:	79bb      	ldrb	r3, [r7, #6]
 80009cc:	6113      	str	r3, [r2, #16]
while(!(I2C1->SR1&I2C_SR1_TXE)){;}       /*wait until data register empty*/
 80009ce:	bf00      	nop
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <i2c_writeByte+0xa4>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0f9      	beq.n	80009d0 <i2c_writeByte+0x6c>
I2C1->DR = data; 	
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <i2c_writeByte+0xa4>)
 80009de:	797b      	ldrb	r3, [r7, #5]
 80009e0:	6113      	str	r3, [r2, #16]
while (!(I2C1->SR1 & I2C_SR1_BTF));      /*wait until transfer finished*/
 80009e2:	bf00      	nop
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <i2c_writeByte+0xa4>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d0f9      	beq.n	80009e4 <i2c_writeByte+0x80>
I2C1->CR1 |=I2C_CR1_STOP;								 /*Generate Stop*/	
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <i2c_writeByte+0xa4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <i2c_writeByte+0xa4>)
 80009f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fa:	6013      	str	r3, [r2, #0]
	
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	40005400 	.word	0x40005400

08000a0c <i2c_WriteMulti>:

void i2c_WriteMulti(char saddr,char maddr,char *buffer, uint8_t length){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	603a      	str	r2, [r7, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	71bb      	strb	r3, [r7, #6]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	717b      	strb	r3, [r7, #5]

while (I2C1->SR2 & I2C_SR2_BUSY);           //wait until bus not busy
 8000a22:	bf00      	nop
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f9      	bne.n	8000a24 <i2c_WriteMulti+0x18>
I2C1->CR1 |= I2C_CR1_START;                   //generate start
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3a:	6013      	str	r3, [r2, #0]
while (!(I2C1->SR1 & I2C_SR1_SB)){;}					//wait until start is generated
 8000a3c:	bf00      	nop
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f9      	beq.n	8000a3e <i2c_WriteMulti+0x32>
volatile int Temp;														
I2C1->DR = saddr<< 1;                 	 			// Send slave address
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	005a      	lsls	r2, r3, #1
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a50:	611a      	str	r2, [r3, #16]
while (!(I2C1->SR1 & I2C_SR1_ADDR)){;}        //wait until address flag is set
 8000a52:	bf00      	nop
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0f9      	beq.n	8000a54 <i2c_WriteMulti+0x48>
Temp = I2C1->SR2; 						      //Clear SR2
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	60bb      	str	r3, [r7, #8]
while (!(I2C1->SR1 & I2C_SR1_TXE));           //Wait until Data register empty
 8000a66:	bf00      	nop
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0f9      	beq.n	8000a68 <i2c_WriteMulti+0x5c>
I2C1->DR = maddr;                      				// send memory address
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	6113      	str	r3, [r2, #16]
while (!(I2C1->SR1 & I2C_SR1_TXE));           //wait until data register empty
 8000a7a:	bf00      	nop
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d0f9      	beq.n	8000a7c <i2c_WriteMulti+0x70>
//sending the data
for (uint8_t i=0;i<length;i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e00f      	b.n	8000aae <i2c_WriteMulti+0xa2>
 { 
 I2C1->DR=buffer[i]; 													//filling buffer with command or data
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a98:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000a9a:	bf00      	nop
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0f9      	beq.n	8000a9c <i2c_WriteMulti+0x90>
for (uint8_t i=0;i<length;i++)
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]
 8000aae:	7bfa      	ldrb	r2, [r7, #15]
 8000ab0:	797b      	ldrb	r3, [r7, #5]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d3eb      	bcc.n	8000a8e <i2c_WriteMulti+0x82>
 }	
                             
I2C1->CR1 |= I2C_CR1_STOP;										//wait until transfer finished
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <i2c_WriteMulti+0xc4>)
 8000abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac0:	6013      	str	r3, [r2, #0]



 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40005400 	.word	0x40005400

08000ad4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0

	/* Init I2C */
	i2c_init();
 8000ada:	f7ff fef7 	bl	80008cc <i2c_init>
	ssd1306_I2C_Init();
 8000ade:	f000 fa13 	bl	8000f08 <ssd1306_I2C_Init>
	

	
	/* A little delay */
	uint32_t p = 2500;
 8000ae2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000ae6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ae8:	e002      	b.n	8000af0 <SSD1306_Init+0x1c>
		p--;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1f9      	bne.n	8000aea <SSD1306_Init+0x16>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000af6:	22ae      	movs	r2, #174	; 0xae
 8000af8:	2100      	movs	r1, #0
 8000afa:	203c      	movs	r0, #60	; 0x3c
 8000afc:	f7ff ff32 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000b00:	2220      	movs	r2, #32
 8000b02:	2100      	movs	r1, #0
 8000b04:	203c      	movs	r0, #60	; 0x3c
 8000b06:	f7ff ff2d 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000b0a:	2210      	movs	r2, #16
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	203c      	movs	r0, #60	; 0x3c
 8000b10:	f7ff ff28 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b14:	22b0      	movs	r2, #176	; 0xb0
 8000b16:	2100      	movs	r1, #0
 8000b18:	203c      	movs	r0, #60	; 0x3c
 8000b1a:	f7ff ff23 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000b1e:	22c8      	movs	r2, #200	; 0xc8
 8000b20:	2100      	movs	r1, #0
 8000b22:	203c      	movs	r0, #60	; 0x3c
 8000b24:	f7ff ff1e 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	203c      	movs	r0, #60	; 0x3c
 8000b2e:	f7ff ff19 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000b32:	2210      	movs	r2, #16
 8000b34:	2100      	movs	r1, #0
 8000b36:	203c      	movs	r0, #60	; 0x3c
 8000b38:	f7ff ff14 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000b3c:	2240      	movs	r2, #64	; 0x40
 8000b3e:	2100      	movs	r1, #0
 8000b40:	203c      	movs	r0, #60	; 0x3c
 8000b42:	f7ff ff0f 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000b46:	2281      	movs	r2, #129	; 0x81
 8000b48:	2100      	movs	r1, #0
 8000b4a:	203c      	movs	r0, #60	; 0x3c
 8000b4c:	f7ff ff0a 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xFF);
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	2100      	movs	r1, #0
 8000b54:	203c      	movs	r0, #60	; 0x3c
 8000b56:	f7ff ff05 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000b5a:	22a1      	movs	r2, #161	; 0xa1
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	203c      	movs	r0, #60	; 0x3c
 8000b60:	f7ff ff00 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000b64:	22a6      	movs	r2, #166	; 0xa6
 8000b66:	2100      	movs	r1, #0
 8000b68:	203c      	movs	r0, #60	; 0x3c
 8000b6a:	f7ff fefb 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000b6e:	22a8      	movs	r2, #168	; 0xa8
 8000b70:	2100      	movs	r1, #0
 8000b72:	203c      	movs	r0, #60	; 0x3c
 8000b74:	f7ff fef6 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x3F); //
 8000b78:	223f      	movs	r2, #63	; 0x3f
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	203c      	movs	r0, #60	; 0x3c
 8000b7e:	f7ff fef1 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b82:	22a4      	movs	r2, #164	; 0xa4
 8000b84:	2100      	movs	r1, #0
 8000b86:	203c      	movs	r0, #60	; 0x3c
 8000b88:	f7ff feec 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000b8c:	22d3      	movs	r2, #211	; 0xd3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	203c      	movs	r0, #60	; 0x3c
 8000b92:	f7ff fee7 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	203c      	movs	r0, #60	; 0x3c
 8000b9c:	f7ff fee2 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ba0:	22d5      	movs	r2, #213	; 0xd5
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	203c      	movs	r0, #60	; 0x3c
 8000ba6:	f7ff fedd 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000baa:	22f0      	movs	r2, #240	; 0xf0
 8000bac:	2100      	movs	r1, #0
 8000bae:	203c      	movs	r0, #60	; 0x3c
 8000bb0:	f7ff fed8 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000bb4:	22d9      	movs	r2, #217	; 0xd9
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	203c      	movs	r0, #60	; 0x3c
 8000bba:	f7ff fed3 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x22); //
 8000bbe:	2222      	movs	r2, #34	; 0x22
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	203c      	movs	r0, #60	; 0x3c
 8000bc4:	f7ff fece 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000bc8:	22da      	movs	r2, #218	; 0xda
 8000bca:	2100      	movs	r1, #0
 8000bcc:	203c      	movs	r0, #60	; 0x3c
 8000bce:	f7ff fec9 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x12);
 8000bd2:	2212      	movs	r2, #18
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	203c      	movs	r0, #60	; 0x3c
 8000bd8:	f7ff fec4 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000bdc:	22db      	movs	r2, #219	; 0xdb
 8000bde:	2100      	movs	r1, #0
 8000be0:	203c      	movs	r0, #60	; 0x3c
 8000be2:	f7ff febf 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000be6:	2220      	movs	r2, #32
 8000be8:	2100      	movs	r1, #0
 8000bea:	203c      	movs	r0, #60	; 0x3c
 8000bec:	f7ff feba 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000bf0:	228d      	movs	r2, #141	; 0x8d
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	203c      	movs	r0, #60	; 0x3c
 8000bf6:	f7ff feb5 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0x14); //
 8000bfa:	2214      	movs	r2, #20
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	203c      	movs	r0, #60	; 0x3c
 8000c00:	f7ff feb0 	bl	8000964 <i2c_writeByte>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000c04:	22af      	movs	r2, #175	; 0xaf
 8000c06:	2100      	movs	r1, #0
 8000c08:	203c      	movs	r0, #60	; 0x3c
 8000c0a:	f7ff feab 	bl	8000964 <i2c_writeByte>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000c0e:	222e      	movs	r2, #46	; 0x2e
 8000c10:	2100      	movs	r1, #0
 8000c12:	203c      	movs	r0, #60	; 0x3c
 8000c14:	f7ff fea6 	bl	8000964 <i2c_writeByte>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 f841 	bl	8000ca0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000c1e:	f000 f811 	bl	8000c44 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <SSD1306_Init+0x16c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SSD1306_Init+0x16c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SSD1306_Init+0x16c>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000c34:	2301      	movs	r3, #1
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000484 	.word	0x20000484

08000c44 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	e01d      	b.n	8000c8c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	3b50      	subs	r3, #80	; 0x50
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	203c      	movs	r0, #60	; 0x3c
 8000c5c:	f7ff fe82 	bl	8000964 <i2c_writeByte>
		SSD1306_WRITECOMMAND(0x00);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	203c      	movs	r0, #60	; 0x3c
 8000c66:	f7ff fe7d 	bl	8000964 <i2c_writeByte>
		SSD1306_WRITECOMMAND(0x10);
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	203c      	movs	r0, #60	; 0x3c
 8000c70:	f7ff fe78 	bl	8000964 <i2c_writeByte>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	01db      	lsls	r3, r3, #7
 8000c78:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <SSD1306_UpdateScreen+0x58>)
 8000c7a:	441a      	add	r2, r3
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	2140      	movs	r1, #64	; 0x40
 8000c80:	203c      	movs	r0, #60	; 0x3c
 8000c82:	f000 f957 	bl	8000f34 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b07      	cmp	r3, #7
 8000c90:	d9de      	bls.n	8000c50 <SSD1306_UpdateScreen+0xc>
	}
}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000084 	.word	0x20000084

08000ca0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <SSD1306_Fill+0x14>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e000      	b.n	8000cb6 <SSD1306_Fill+0x16>
 8000cb4:	23ff      	movs	r3, #255	; 0xff
 8000cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <SSD1306_Fill+0x2c>)
 8000cbe:	f001 fa5d 	bl	800217c <memset>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000084 	.word	0x20000084

08000cd0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	70fb      	strb	r3, [r7, #3]
	if (
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ce6:	d848      	bhi.n	8000d7a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000ce8:	88bb      	ldrh	r3, [r7, #4]
 8000cea:	2b3f      	cmp	r3, #63	; 0x3f
 8000cec:	d845      	bhi.n	8000d7a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <SSD1306_DrawPixel+0xb8>)
 8000cf0:	791b      	ldrb	r3, [r3, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d006      	beq.n	8000d04 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bf0c      	ite	eq
 8000cfc:	2301      	moveq	r3, #1
 8000cfe:	2300      	movne	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d11a      	bne.n	8000d40 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d0a:	88fa      	ldrh	r2, [r7, #6]
 8000d0c:	88bb      	ldrh	r3, [r7, #4]
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	b298      	uxth	r0, r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	01db      	lsls	r3, r3, #7
 8000d16:	4413      	add	r3, r2
 8000d18:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <SSD1306_DrawPixel+0xbc>)
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	2101      	movs	r1, #1
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b259      	sxtb	r1, r3
 8000d30:	88fa      	ldrh	r2, [r7, #6]
 8000d32:	4603      	mov	r3, r0
 8000d34:	01db      	lsls	r3, r3, #7
 8000d36:	4413      	add	r3, r2
 8000d38:	b2c9      	uxtb	r1, r1
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <SSD1306_DrawPixel+0xbc>)
 8000d3c:	54d1      	strb	r1, [r2, r3]
 8000d3e:	e01d      	b.n	8000d7c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d40:	88fa      	ldrh	r2, [r7, #6]
 8000d42:	88bb      	ldrh	r3, [r7, #4]
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	b298      	uxth	r0, r3
 8000d48:	4603      	mov	r3, r0
 8000d4a:	01db      	lsls	r3, r3, #7
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <SSD1306_DrawPixel+0xbc>)
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	4013      	ands	r3, r2
 8000d68:	b259      	sxtb	r1, r3
 8000d6a:	88fa      	ldrh	r2, [r7, #6]
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	01db      	lsls	r3, r3, #7
 8000d70:	4413      	add	r3, r2
 8000d72:	b2c9      	uxtb	r1, r1
 8000d74:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SSD1306_DrawPixel+0xbc>)
 8000d76:	54d1      	strb	r1, [r2, r3]
 8000d78:	e000      	b.n	8000d7c <SSD1306_DrawPixel+0xac>
		return;
 8000d7a:	bf00      	nop
	}
}
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000484 	.word	0x20000484
 8000d8c:	20000084 	.word	0x20000084

08000d90 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	460a      	mov	r2, r1
 8000d9a:	80fb      	strh	r3, [r7, #6]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000da0:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SSD1306_GotoXY+0x28>)
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <SSD1306_GotoXY+0x28>)
 8000da8:	88bb      	ldrh	r3, [r7, #4]
 8000daa:	8053      	strh	r3, [r2, #2]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	20000484 	.word	0x20000484

08000dbc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000dcc:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <SSD1306_Putc+0xfc>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
	if (
 8000dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dda:	dc07      	bgt.n	8000dec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <SSD1306_Putc+0xfc>)
 8000dde:	885b      	ldrh	r3, [r3, #2]
 8000de0:	461a      	mov	r2, r3
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	785b      	ldrb	r3, [r3, #1]
 8000de6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000de8:	2b3f      	cmp	r3, #63	; 0x3f
 8000dea:	dd01      	ble.n	8000df0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e05e      	b.n	8000eae <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	e04b      	b.n	8000e8e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	3b20      	subs	r3, #32
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	7849      	ldrb	r1, [r1, #1]
 8000e02:	fb01 f303 	mul.w	r3, r1, r3
 8000e06:	4619      	mov	r1, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	440b      	add	r3, r1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	e030      	b.n	8000e7c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d010      	beq.n	8000e4c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <SSD1306_Putc+0xfc>)
 8000e2c:	881a      	ldrh	r2, [r3, #0]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	4413      	add	r3, r2
 8000e34:	b298      	uxth	r0, r3
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <SSD1306_Putc+0xfc>)
 8000e38:	885a      	ldrh	r2, [r3, #2]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	79ba      	ldrb	r2, [r7, #6]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f7ff ff43 	bl	8000cd0 <SSD1306_DrawPixel>
 8000e4a:	e014      	b.n	8000e76 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <SSD1306_Putc+0xfc>)
 8000e4e:	881a      	ldrh	r2, [r3, #0]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b298      	uxth	r0, r3
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <SSD1306_Putc+0xfc>)
 8000e5a:	885a      	ldrh	r2, [r3, #2]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b299      	uxth	r1, r3
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	bf0c      	ite	eq
 8000e6a:	2301      	moveq	r3, #1
 8000e6c:	2300      	movne	r3, #0
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	f7ff ff2d 	bl	8000cd0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d3c8      	bcc.n	8000e1a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	785b      	ldrb	r3, [r3, #1]
 8000e92:	461a      	mov	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d3ad      	bcc.n	8000df6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <SSD1306_Putc+0xfc>)
 8000e9c:	881a      	ldrh	r2, [r3, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <SSD1306_Putc+0xfc>)
 8000eaa:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000484 	.word	0x20000484

08000ebc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000eca:	e012      	b.n	8000ef2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	79fa      	ldrb	r2, [r7, #7]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff71 	bl	8000dbc <SSD1306_Putc>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d002      	beq.n	8000eec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	e008      	b.n	8000efe <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1e8      	bne.n	8000ecc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	781b      	ldrb	r3, [r3, #0]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <ssd1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);  
}


void ssd1306_I2C_Init() {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0

	uint32_t p = 250000;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <ssd1306_I2C_Init+0x28>)
 8000f10:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f12:	e002      	b.n	8000f1a <ssd1306_I2C_Init+0x12>
		p--;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1f9      	bne.n	8000f14 <ssd1306_I2C_Init+0xc>

}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	0003d090 	.word	0x0003d090

08000f34 <ssd1306_I2C_WriteMulti>:


void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, char* data, uint16_t count) {
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b0c5      	sub	sp, #276	; 0x114
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000f42:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000f46:	600a      	str	r2, [r1, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f4e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f52:	4622      	mov	r2, r4
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f5a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000f5e:	4602      	mov	r2, r0
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f6a:	460a      	mov	r2, r1
 8000f6c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
uint8_t i;
for(i = 0; i < count; i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f74:	e014      	b.n	8000fa0 <ssd1306_I2C_WriteMulti+0x6c>
dt[i] = data[i];
 8000f76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f7a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f7e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	441a      	add	r2, r3
 8000f86:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f8a:	7811      	ldrb	r1, [r2, #0]
 8000f8c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f90:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f94:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f96:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000fa0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000faa:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000fae:	8812      	ldrh	r2, [r2, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8e0      	bhi.n	8000f76 <ssd1306_I2C_WriteMulti+0x42>
i2c_WriteMulti(address,reg,data,count);
 8000fb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fb8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	b2dc      	uxtb	r4, r3
 8000fc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fc4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000fc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fcc:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000fd0:	7819      	ldrb	r1, [r3, #0]
 8000fd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fd6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000fda:	7818      	ldrb	r0, [r3, #0]
 8000fdc:	4623      	mov	r3, r4
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	f7ff fd14 	bl	8000a0c <i2c_WriteMulti>
}
 8000fe4:	bf00      	nop
 8000fe6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd90      	pop	{r4, r7, pc}
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_Init+0x40>)
 8000ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_Init+0x40>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_Init+0x40>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f931 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	200f      	movs	r0, #15
 8001020:	f000 f808 	bl	8001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fb7c 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023c00 	.word	0x40023c00

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x54>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f93b 	bl	80012ce <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f911 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <HAL_InitTick+0x5c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000000 	.word	0x20000000
 800108c:	20000010 	.word	0x20000010
 8001090:	2000000c 	.word	0x2000000c

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000010 	.word	0x20000010
 80010b8:	2000048c 	.word	0x2000048c

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	2000048c 	.word	0x2000048c

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000010 	.word	0x20000010

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff47 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff5c 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff8e 	bl	80011d4 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffb0 	bl	800123c <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e159      	b.n	80015b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 8148 	bne.w	80015b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d005      	beq.n	800133a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001336:	2b02      	cmp	r3, #2
 8001338:	d130      	bne.n	800139c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 0201 	and.w	r2, r3, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d017      	beq.n	80013d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d123      	bne.n	800142c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a2 	beq.w	80015b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <HAL_GPIO_Init+0x2e8>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a56      	ldr	r2, [pc, #344]	; (80015d0 <HAL_GPIO_Init+0x2e8>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b54      	ldr	r3, [pc, #336]	; (80015d0 <HAL_GPIO_Init+0x2e8>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148a:	4a52      	ldr	r2, [pc, #328]	; (80015d4 <HAL_GPIO_Init+0x2ec>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a49      	ldr	r2, [pc, #292]	; (80015d8 <HAL_GPIO_Init+0x2f0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0x202>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a48      	ldr	r2, [pc, #288]	; (80015dc <HAL_GPIO_Init+0x2f4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0x1fe>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a47      	ldr	r2, [pc, #284]	; (80015e0 <HAL_GPIO_Init+0x2f8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <HAL_GPIO_Init+0x1fa>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a46      	ldr	r2, [pc, #280]	; (80015e4 <HAL_GPIO_Init+0x2fc>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_GPIO_Init+0x1f6>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a45      	ldr	r2, [pc, #276]	; (80015e8 <HAL_GPIO_Init+0x300>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_GPIO_Init+0x1f2>
 80014d6:	2304      	movs	r3, #4
 80014d8:	e008      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014da:	2307      	movs	r3, #7
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014de:	2303      	movs	r3, #3
 80014e0:	e004      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e002      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_Init+0x204>
 80014ea:	2300      	movs	r3, #0
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	f002 0203 	and.w	r2, r2, #3
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	4093      	lsls	r3, r2
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014fc:	4935      	ldr	r1, [pc, #212]	; (80015d4 <HAL_GPIO_Init+0x2ec>)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150a:	4b38      	ldr	r3, [pc, #224]	; (80015ec <HAL_GPIO_Init+0x304>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152e:	4a2f      	ldr	r2, [pc, #188]	; (80015ec <HAL_GPIO_Init+0x304>)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_GPIO_Init+0x304>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001558:	4a24      	ldr	r2, [pc, #144]	; (80015ec <HAL_GPIO_Init+0x304>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <HAL_GPIO_Init+0x304>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001582:	4a1a      	ldr	r2, [pc, #104]	; (80015ec <HAL_GPIO_Init+0x304>)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_GPIO_Init+0x304>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ac:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_GPIO_Init+0x304>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3301      	adds	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b0f      	cmp	r3, #15
 80015bc:	f67f aea2 	bls.w	8001304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40013c00 	.word	0x40013c00

080015f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
 80015fc:	4613      	mov	r3, r2
 80015fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001600:	787b      	ldrb	r3, [r7, #1]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800160c:	e003      	b.n	8001616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800160e:	887b      	ldrh	r3, [r7, #2]
 8001610:	041a      	lsls	r2, r3, #16
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	619a      	str	r2, [r3, #24]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e12b      	b.n	800188e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff f890 	bl	8000770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2224      	movs	r2, #36	; 0x24
 8001654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001676:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001686:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001688:	f000 fd40 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 800168c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4a81      	ldr	r2, [pc, #516]	; (8001898 <HAL_I2C_Init+0x274>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d807      	bhi.n	80016a8 <HAL_I2C_Init+0x84>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4a80      	ldr	r2, [pc, #512]	; (800189c <HAL_I2C_Init+0x278>)
 800169c:	4293      	cmp	r3, r2
 800169e:	bf94      	ite	ls
 80016a0:	2301      	movls	r3, #1
 80016a2:	2300      	movhi	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	e006      	b.n	80016b6 <HAL_I2C_Init+0x92>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4a7d      	ldr	r2, [pc, #500]	; (80018a0 <HAL_I2C_Init+0x27c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	bf94      	ite	ls
 80016b0:	2301      	movls	r3, #1
 80016b2:	2300      	movhi	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0e7      	b.n	800188e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4a78      	ldr	r2, [pc, #480]	; (80018a4 <HAL_I2C_Init+0x280>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0c9b      	lsrs	r3, r3, #18
 80016c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	430a      	orrs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a6a      	ldr	r2, [pc, #424]	; (8001898 <HAL_I2C_Init+0x274>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d802      	bhi.n	80016f8 <HAL_I2C_Init+0xd4>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	3301      	adds	r3, #1
 80016f6:	e009      	b.n	800170c <HAL_I2C_Init+0xe8>
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	4a69      	ldr	r2, [pc, #420]	; (80018a8 <HAL_I2C_Init+0x284>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	099b      	lsrs	r3, r3, #6
 800170a:	3301      	adds	r3, #1
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	430b      	orrs	r3, r1
 8001712:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800171e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	495c      	ldr	r1, [pc, #368]	; (8001898 <HAL_I2C_Init+0x274>)
 8001728:	428b      	cmp	r3, r1
 800172a:	d819      	bhi.n	8001760 <HAL_I2C_Init+0x13c>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1e59      	subs	r1, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fbb1 f3f3 	udiv	r3, r1, r3
 800173a:	1c59      	adds	r1, r3, #1
 800173c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001740:	400b      	ands	r3, r1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00a      	beq.n	800175c <HAL_I2C_Init+0x138>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1e59      	subs	r1, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fbb1 f3f3 	udiv	r3, r1, r3
 8001754:	3301      	adds	r3, #1
 8001756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175a:	e051      	b.n	8001800 <HAL_I2C_Init+0x1dc>
 800175c:	2304      	movs	r3, #4
 800175e:	e04f      	b.n	8001800 <HAL_I2C_Init+0x1dc>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d111      	bne.n	800178c <HAL_I2C_Init+0x168>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1e58      	subs	r0, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	440b      	add	r3, r1
 8001776:	fbb0 f3f3 	udiv	r3, r0, r3
 800177a:	3301      	adds	r3, #1
 800177c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	e012      	b.n	80017b2 <HAL_I2C_Init+0x18e>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1e58      	subs	r0, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	0099      	lsls	r1, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_Init+0x196>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e022      	b.n	8001800 <HAL_I2C_Init+0x1dc>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10e      	bne.n	80017e0 <HAL_I2C_Init+0x1bc>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1e58      	subs	r0, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6859      	ldr	r1, [r3, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	440b      	add	r3, r1
 80017d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017de:	e00f      	b.n	8001800 <HAL_I2C_Init+0x1dc>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1e58      	subs	r0, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	0099      	lsls	r1, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	6809      	ldr	r1, [r1, #0]
 8001804:	4313      	orrs	r3, r2
 8001806:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800182e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6911      	ldr	r1, [r2, #16]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68d2      	ldr	r2, [r2, #12]
 800183a:	4311      	orrs	r1, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	430b      	orrs	r3, r1
 8001842:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2220      	movs	r2, #32
 800187a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	000186a0 	.word	0x000186a0
 800189c:	001e847f 	.word	0x001e847f
 80018a0:	003d08ff 	.word	0x003d08ff
 80018a4:	431bde83 	.word	0x431bde83
 80018a8:	10624dd3 	.word	0x10624dd3

080018ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e267      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d075      	beq.n	80019b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ca:	4b88      	ldr	r3, [pc, #544]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d00c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d6:	4b85      	ldr	r3, [pc, #532]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d112      	bne.n	8001908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e2:	4b82      	ldr	r3, [pc, #520]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ee:	d10b      	bne.n	8001908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	4b7e      	ldr	r3, [pc, #504]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d05b      	beq.n	80019b4 <HAL_RCC_OscConfig+0x108>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d157      	bne.n	80019b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e242      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d106      	bne.n	8001920 <HAL_RCC_OscConfig+0x74>
 8001912:	4b76      	ldr	r3, [pc, #472]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a75      	ldr	r2, [pc, #468]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e01d      	b.n	800195c <HAL_RCC_OscConfig+0xb0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x98>
 800192a:	4b70      	ldr	r3, [pc, #448]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6f      	ldr	r2, [pc, #444]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a6c      	ldr	r2, [pc, #432]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0xb0>
 8001944:	4b69      	ldr	r3, [pc, #420]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a68      	ldr	r2, [pc, #416]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b66      	ldr	r3, [pc, #408]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a65      	ldr	r2, [pc, #404]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fbaa 	bl	80010bc <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fba6 	bl	80010bc <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e207      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b5b      	ldr	r3, [pc, #364]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0xc0>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fb96 	bl	80010bc <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fb92 	bl	80010bc <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1f3      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	4b51      	ldr	r3, [pc, #324]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0xe8>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d063      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019c2:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00b      	beq.n	80019e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d11c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b44      	ldr	r3, [pc, #272]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d116      	bne.n	8001a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_RCC_OscConfig+0x152>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e1c7      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4937      	ldr	r1, [pc, #220]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	e03a      	b.n	8001a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1c:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <HAL_RCC_OscConfig+0x244>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff fb4b 	bl	80010bc <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fb47 	bl	80010bc <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1a8      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4925      	ldr	r1, [pc, #148]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
 8001a5c:	e015      	b.n	8001a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_RCC_OscConfig+0x244>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff fb2a 	bl	80010bc <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fb26 	bl	80010bc <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e187      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d036      	beq.n	8001b04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d016      	beq.n	8001acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_RCC_OscConfig+0x248>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fb0a 	bl	80010bc <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff fb06 	bl	80010bc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e167      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_OscConfig+0x240>)
 8001ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x200>
 8001aca:	e01b      	b.n	8001b04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_OscConfig+0x248>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff faf3 	bl	80010bc <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	e00e      	b.n	8001af8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ada:	f7ff faef 	bl	80010bc <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d907      	bls.n	8001af8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e150      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
 8001aec:	40023800 	.word	0x40023800
 8001af0:	42470000 	.word	0x42470000
 8001af4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1ea      	bne.n	8001ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 8097 	beq.w	8001c40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b16:	4b81      	ldr	r3, [pc, #516]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10f      	bne.n	8001b42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	4b7d      	ldr	r3, [pc, #500]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	4a7c      	ldr	r2, [pc, #496]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	6413      	str	r3, [r2, #64]	; 0x40
 8001b32:	4b7a      	ldr	r3, [pc, #488]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b77      	ldr	r3, [pc, #476]	; (8001d20 <HAL_RCC_OscConfig+0x474>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4e:	4b74      	ldr	r3, [pc, #464]	; (8001d20 <HAL_RCC_OscConfig+0x474>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a73      	ldr	r2, [pc, #460]	; (8001d20 <HAL_RCC_OscConfig+0x474>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5a:	f7ff faaf 	bl	80010bc <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7ff faab 	bl	80010bc <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e10c      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_OscConfig+0x474>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x2ea>
 8001b88:	4b64      	ldr	r3, [pc, #400]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a63      	ldr	r2, [pc, #396]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	e01c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x324>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x30c>
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	4a5e      	ldr	r2, [pc, #376]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8001baa:	4b5c      	ldr	r3, [pc, #368]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	4a5b      	ldr	r2, [pc, #364]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x324>
 8001bb8:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	4b55      	ldr	r3, [pc, #340]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a54      	ldr	r2, [pc, #336]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d015      	beq.n	8001c04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fa70 	bl	80010bc <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7ff fa6c 	bl	80010bc <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e0cb      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf6:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0ee      	beq.n	8001be0 <HAL_RCC_OscConfig+0x334>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7ff fa5a 	bl	80010bc <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fa56 	bl	80010bc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e0b5      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c22:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1ee      	bne.n	8001c0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c34:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a38      	ldr	r2, [pc, #224]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80a1 	beq.w	8001d8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d05c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d141      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <HAL_RCC_OscConfig+0x478>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fa2a 	bl	80010bc <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff fa26 	bl	80010bc <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e087      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	019b      	lsls	r3, r3, #6
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	491b      	ldr	r1, [pc, #108]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x478>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff f9ff 	bl	80010bc <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff f9fb 	bl	80010bc <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e05c      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x416>
 8001ce0:	e054      	b.n	8001d8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_OscConfig+0x478>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f9e8 	bl	80010bc <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f9e4 	bl	80010bc <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e045      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_OscConfig+0x470>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x444>
 8001d0e:	e03d      	b.n	8001d8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e038      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40007000 	.word	0x40007000
 8001d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_RCC_OscConfig+0x4ec>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d028      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d121      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d11a      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d58:	4013      	ands	r3, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d111      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	3b01      	subs	r3, #1
 8001d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0cc      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db0:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d90c      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b8      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	494d      	ldr	r1, [pc, #308]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d044      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d119      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e07f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e06f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e067      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7a:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f023 0203 	bic.w	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4934      	ldr	r1, [pc, #208]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e8c:	f7ff f916 	bl	80010bc <HAL_GetTick>
 8001e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e94:	f7ff f912 	bl	80010bc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e04f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 020c 	and.w	r2, r3, #12
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d1eb      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d20c      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e032      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4916      	ldr	r1, [pc, #88]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f22:	f000 f821 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f26:	4602      	mov	r2, r0
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	490a      	ldr	r1, [pc, #40]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	5ccb      	ldrb	r3, [r1, r3]
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f876 	bl	8001034 <HAL_InitTick>

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	080021b8 	.word	0x080021b8
 8001f60:	20000000 	.word	0x20000000
 8001f64:	2000000c 	.word	0x2000000c

08001f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f6c:	b090      	sub	sp, #64	; 0x40
 8001f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
 8001f74:	2300      	movs	r3, #0
 8001f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f78:	2300      	movs	r3, #0
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	f200 80a1 	bhi.w	80020d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x34>
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d003      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f9a:	e09b      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_GetSysClockFreq+0x184>)
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fa0:	e09b      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fa2:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fa6:	e098      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fa8:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb2:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d028      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fbe:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	099b      	lsrs	r3, r3, #6
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	623b      	str	r3, [r7, #32]
 8001fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fd4:	fb03 f201 	mul.w	r2, r3, r1
 8001fd8:	2300      	movs	r3, #0
 8001fda:	fb00 f303 	mul.w	r3, r0, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fe2:	fba0 1202 	umull	r1, r2, r0, r2
 8001fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fe8:	460a      	mov	r2, r1
 8001fea:	62ba      	str	r2, [r7, #40]	; 0x28
 8001fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fee:	4413      	add	r3, r2
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
 8001ff8:	61fa      	str	r2, [r7, #28]
 8001ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ffe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002002:	f7fe f8e7 	bl	80001d4 <__aeabi_uldivmod>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4613      	mov	r3, r2
 800200c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800200e:	e053      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002010:	4b35      	ldr	r3, [pc, #212]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	2200      	movs	r2, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	617a      	str	r2, [r7, #20]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002022:	f04f 0b00 	mov.w	fp, #0
 8002026:	4652      	mov	r2, sl
 8002028:	465b      	mov	r3, fp
 800202a:	f04f 0000 	mov.w	r0, #0
 800202e:	f04f 0100 	mov.w	r1, #0
 8002032:	0159      	lsls	r1, r3, #5
 8002034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002038:	0150      	lsls	r0, r2, #5
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	ebb2 080a 	subs.w	r8, r2, sl
 8002042:	eb63 090b 	sbc.w	r9, r3, fp
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002052:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002056:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800205a:	ebb2 0408 	subs.w	r4, r2, r8
 800205e:	eb63 0509 	sbc.w	r5, r3, r9
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	00eb      	lsls	r3, r5, #3
 800206c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002070:	00e2      	lsls	r2, r4, #3
 8002072:	4614      	mov	r4, r2
 8002074:	461d      	mov	r5, r3
 8002076:	eb14 030a 	adds.w	r3, r4, sl
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	eb45 030b 	adc.w	r3, r5, fp
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800208e:	4629      	mov	r1, r5
 8002090:	028b      	lsls	r3, r1, #10
 8002092:	4621      	mov	r1, r4
 8002094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002098:	4621      	mov	r1, r4
 800209a:	028a      	lsls	r2, r1, #10
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a2:	2200      	movs	r2, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	60fa      	str	r2, [r7, #12]
 80020a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ac:	f7fe f892 	bl	80001d4 <__aeabi_uldivmod>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4613      	mov	r3, r2
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	3301      	adds	r3, #1
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020d2:	e002      	b.n	80020da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_GetSysClockFreq+0x184>)
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3740      	adds	r7, #64	; 0x40
 80020e0:	46bd      	mov	sp, r7
 80020e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	017d7840 	.word	0x017d7840

080020f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_RCC_GetHCLKFreq+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000

0800210c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002110:	f7ff fff0 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0a9b      	lsrs	r3, r3, #10
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4903      	ldr	r1, [pc, #12]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	080021c8 	.word	0x080021c8

08002134 <__libc_init_array>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	4d0d      	ldr	r5, [pc, #52]	; (800216c <__libc_init_array+0x38>)
 8002138:	4c0d      	ldr	r4, [pc, #52]	; (8002170 <__libc_init_array+0x3c>)
 800213a:	1b64      	subs	r4, r4, r5
 800213c:	10a4      	asrs	r4, r4, #2
 800213e:	2600      	movs	r6, #0
 8002140:	42a6      	cmp	r6, r4
 8002142:	d109      	bne.n	8002158 <__libc_init_array+0x24>
 8002144:	4d0b      	ldr	r5, [pc, #44]	; (8002174 <__libc_init_array+0x40>)
 8002146:	4c0c      	ldr	r4, [pc, #48]	; (8002178 <__libc_init_array+0x44>)
 8002148:	f000 f820 	bl	800218c <_init>
 800214c:	1b64      	subs	r4, r4, r5
 800214e:	10a4      	asrs	r4, r4, #2
 8002150:	2600      	movs	r6, #0
 8002152:	42a6      	cmp	r6, r4
 8002154:	d105      	bne.n	8002162 <__libc_init_array+0x2e>
 8002156:	bd70      	pop	{r4, r5, r6, pc}
 8002158:	f855 3b04 	ldr.w	r3, [r5], #4
 800215c:	4798      	blx	r3
 800215e:	3601      	adds	r6, #1
 8002160:	e7ee      	b.n	8002140 <__libc_init_array+0xc>
 8002162:	f855 3b04 	ldr.w	r3, [r5], #4
 8002166:	4798      	blx	r3
 8002168:	3601      	adds	r6, #1
 800216a:	e7f2      	b.n	8002152 <__libc_init_array+0x1e>
 800216c:	08002f34 	.word	0x08002f34
 8002170:	08002f34 	.word	0x08002f34
 8002174:	08002f34 	.word	0x08002f34
 8002178:	08002f38 	.word	0x08002f38

0800217c <memset>:
 800217c:	4402      	add	r2, r0
 800217e:	4603      	mov	r3, r0
 8002180:	4293      	cmp	r3, r2
 8002182:	d100      	bne.n	8002186 <memset+0xa>
 8002184:	4770      	bx	lr
 8002186:	f803 1b01 	strb.w	r1, [r3], #1
 800218a:	e7f9      	b.n	8002180 <memset+0x4>

0800218c <_init>:
 800218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218e:	bf00      	nop
 8002190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002192:	bc08      	pop	{r3}
 8002194:	469e      	mov	lr, r3
 8002196:	4770      	bx	lr

08002198 <_fini>:
 8002198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219a:	bf00      	nop
 800219c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800219e:	bc08      	pop	{r3}
 80021a0:	469e      	mov	lr, r3
 80021a2:	4770      	bx	lr
