
Locker_allotment_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003278  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e18  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800419c  0800419c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800419c  0800419c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800419c  0800419c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800419c  0800419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080041a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000014  080041b8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  080041b8  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c02  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab7  00000000  00000000  00029c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002b6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174b0  00000000  00000000  0002caa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c466  00000000  00000000  00043f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008290d  00000000  00000000  000503be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2ccb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002990  00000000  00000000  000d2d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	0800336c 	.word	0x0800336c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	0800336c 	.word	0x0800336c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f001 f92a 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 fa14 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 fabc 	bl	80006e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000170:	f000 fa56 	bl	8000620 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000174:	f000 fa82 	bl	800067c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017e:	48b8      	ldr	r0, [pc, #736]	; (8000460 <main+0x300>)
 8000180:	f001 fc02 	bl	8001988 <HAL_GPIO_WritePin>
  	MFRC522_Init();
 8000184:	f000 fbec 	bl	8000960 <MFRC522_Init>

	SSD1306_Init (); // initialise the display
 8000188:	f000 fd44 	bl	8000c14 <SSD1306_Init>
	SSD1306_GotoXY (10,10); // goto 10, 10
 800018c:	210a      	movs	r1, #10
 800018e:	200a      	movs	r0, #10
 8000190:	f000 fea8 	bl	8000ee4 <SSD1306_GotoXY>
	SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 8000194:	2201      	movs	r2, #1
 8000196:	49b3      	ldr	r1, [pc, #716]	; (8000464 <main+0x304>)
 8000198:	48b3      	ldr	r0, [pc, #716]	; (8000468 <main+0x308>)
 800019a:	f000 ff39 	bl	8001010 <SSD1306_Puts>
	SSD1306_GotoXY (10, 28);
 800019e:	211c      	movs	r1, #28
 80001a0:	200a      	movs	r0, #10
 80001a2:	f000 fe9f 	bl	8000ee4 <SSD1306_GotoXY>
	SSD1306_Puts ("Locker", &Font_11x18, 1);
 80001a6:	2201      	movs	r2, #1
 80001a8:	49ae      	ldr	r1, [pc, #696]	; (8000464 <main+0x304>)
 80001aa:	48b0      	ldr	r0, [pc, #704]	; (800046c <main+0x30c>)
 80001ac:	f000 ff30 	bl	8001010 <SSD1306_Puts>
	SSD1306_GotoXY (10, 45);
 80001b0:	212d      	movs	r1, #45	; 0x2d
 80001b2:	200a      	movs	r0, #10
 80001b4:	f000 fe96 	bl	8000ee4 <SSD1306_GotoXY>
	SSD1306_Puts ("Allotment", &Font_11x18, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	49aa      	ldr	r1, [pc, #680]	; (8000464 <main+0x304>)
 80001bc:	48ac      	ldr	r0, [pc, #688]	; (8000470 <main+0x310>)
 80001be:	f000 ff27 	bl	8001010 <SSD1306_Puts>
    SSD1306_UpdateScreen(); // update screen
 80001c2:	f000 fdeb 	bl	8000d9c <SSD1306_UpdateScreen>
    HAL_Delay(2000);
 80001c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001ca:	f001 f959 	bl	8001480 <HAL_Delay>

    SSD1306_Clear();
 80001ce:	f000 ff44 	bl	800105a <SSD1306_Clear>
    SSD1306_UpdateScreen(); // update screen
 80001d2:	f000 fde3 	bl	8000d9c <SSD1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 	  status = MFRC522_Request(PICC_REQIDL, str);
 80001d6:	49a7      	ldr	r1, [pc, #668]	; (8000474 <main+0x314>)
 80001d8:	2026      	movs	r0, #38	; 0x26
 80001da:	f000 fcb9 	bl	8000b50 <MFRC522_Request>
 80001de:	4603      	mov	r3, r0
 80001e0:	461a      	mov	r2, r3
 80001e2:	4ba5      	ldr	r3, [pc, #660]	; (8000478 <main+0x318>)
 80001e4:	701a      	strb	r2, [r3, #0]
	  status = MFRC522_Anticoll(str);
 80001e6:	48a3      	ldr	r0, [pc, #652]	; (8000474 <main+0x314>)
 80001e8:	f000 fcd7 	bl	8000b9a <MFRC522_Anticoll>
 80001ec:	4603      	mov	r3, r0
 80001ee:	461a      	mov	r2, r3
 80001f0:	4ba1      	ldr	r3, [pc, #644]	; (8000478 <main+0x318>)
 80001f2:	701a      	strb	r2, [r3, #0]
	  memcpy(sNum, str, 5);
 80001f4:	4ba1      	ldr	r3, [pc, #644]	; (800047c <main+0x31c>)
 80001f6:	4a9f      	ldr	r2, [pc, #636]	; (8000474 <main+0x314>)
 80001f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001fc:	6018      	str	r0, [r3, #0]
 80001fe:	3304      	adds	r3, #4
 8000200:	7019      	strb	r1, [r3, #0]
	  HAL_Delay(100);
 8000202:	2064      	movs	r0, #100	; 0x64
 8000204:	f001 f93c 	bl	8001480 <HAL_Delay>
	  HAL_Delay(100);
 8000208:	2064      	movs	r0, #100	; 0x64
 800020a:	f001 f939 	bl	8001480 <HAL_Delay>
	  	SSD1306_GotoXY (10, 10);
 800020e:	210a      	movs	r1, #10
 8000210:	200a      	movs	r0, #10
 8000212:	f000 fe67 	bl	8000ee4 <SSD1306_GotoXY>
		SSD1306_Puts ("Scan", &Font_11x18, 1);
 8000216:	2201      	movs	r2, #1
 8000218:	4992      	ldr	r1, [pc, #584]	; (8000464 <main+0x304>)
 800021a:	4899      	ldr	r0, [pc, #612]	; (8000480 <main+0x320>)
 800021c:	f000 fef8 	bl	8001010 <SSD1306_Puts>
		SSD1306_GotoXY (10, 28);
 8000220:	211c      	movs	r1, #28
 8000222:	200a      	movs	r0, #10
 8000224:	f000 fe5e 	bl	8000ee4 <SSD1306_GotoXY>
		SSD1306_Puts ("Your", &Font_11x18, 1);
 8000228:	2201      	movs	r2, #1
 800022a:	498e      	ldr	r1, [pc, #568]	; (8000464 <main+0x304>)
 800022c:	4895      	ldr	r0, [pc, #596]	; (8000484 <main+0x324>)
 800022e:	f000 feef 	bl	8001010 <SSD1306_Puts>
		SSD1306_GotoXY (10, 45);
 8000232:	212d      	movs	r1, #45	; 0x2d
 8000234:	200a      	movs	r0, #10
 8000236:	f000 fe55 	bl	8000ee4 <SSD1306_GotoXY>
		SSD1306_Puts ("Card", &Font_11x18, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	4989      	ldr	r1, [pc, #548]	; (8000464 <main+0x304>)
 800023e:	4892      	ldr	r0, [pc, #584]	; (8000488 <main+0x328>)
 8000240:	f000 fee6 	bl	8001010 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8000244:	f000 fdaa 	bl	8000d9c <SSD1306_UpdateScreen>

	 if(strcmp(sNum, "\x83\x31\x84\xE4\xD2") == 0)
 8000248:	4990      	ldr	r1, [pc, #576]	; (800048c <main+0x32c>)
 800024a:	488c      	ldr	r0, [pc, #560]	; (800047c <main+0x31c>)
 800024c:	f7ff ff7e 	bl	800014c <strcmp>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d151      	bne.n	80002fa <main+0x19a>
	 {
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800025c:	4880      	ldr	r0, [pc, #512]	; (8000460 <main+0x300>)
 800025e:	f001 fb93 	bl	8001988 <HAL_GPIO_WritePin>

		 SSD1306_GotoXY (10, 10);
 8000262:	210a      	movs	r1, #10
 8000264:	200a      	movs	r0, #10
 8000266:	f000 fe3d 	bl	8000ee4 <SSD1306_GotoXY>
		 SSD1306_Puts (" User 1 ", &Font_11x18, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	497d      	ldr	r1, [pc, #500]	; (8000464 <main+0x304>)
 800026e:	4888      	ldr	r0, [pc, #544]	; (8000490 <main+0x330>)
 8000270:	f000 fece 	bl	8001010 <SSD1306_Puts>
		 SSD1306_GotoXY (10, 28);
 8000274:	211c      	movs	r1, #28
 8000276:	200a      	movs	r0, #10
 8000278:	f000 fe34 	bl	8000ee4 <SSD1306_GotoXY>
		 SSD1306_Puts (" Access", &Font_11x18, 1);
 800027c:	2201      	movs	r2, #1
 800027e:	4979      	ldr	r1, [pc, #484]	; (8000464 <main+0x304>)
 8000280:	4884      	ldr	r0, [pc, #528]	; (8000494 <main+0x334>)
 8000282:	f000 fec5 	bl	8001010 <SSD1306_Puts>
		 SSD1306_GotoXY (10, 45);
 8000286:	212d      	movs	r1, #45	; 0x2d
 8000288:	200a      	movs	r0, #10
 800028a:	f000 fe2b 	bl	8000ee4 <SSD1306_GotoXY>
		 SSD1306_Puts (" Alloted", &Font_11x18, 1);
 800028e:	2201      	movs	r2, #1
 8000290:	4974      	ldr	r1, [pc, #464]	; (8000464 <main+0x304>)
 8000292:	4881      	ldr	r0, [pc, #516]	; (8000498 <main+0x338>)
 8000294:	f000 febc 	bl	8001010 <SSD1306_Puts>
		 SSD1306_UpdateScreen(); // update screen
 8000298:	f000 fd80 	bl	8000d9c <SSD1306_UpdateScreen>
		 HAL_Delay(100);
 800029c:	2064      	movs	r0, #100	; 0x64
 800029e:	f001 f8ef 	bl	8001480 <HAL_Delay>

		 HAL_GPIO_WritePin(LOCKER1_GPIO_Port, LOCKER1_Pin, GPIO_PIN_SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002a8:	486d      	ldr	r0, [pc, #436]	; (8000460 <main+0x300>)
 80002aa:	f001 fb6d 	bl	8001988 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 80002ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b2:	f001 f8e5 	bl	8001480 <HAL_Delay>
		 HAL_GPIO_WritePin(LOCKER1_GPIO_Port, LOCKER1_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002bc:	4868      	ldr	r0, [pc, #416]	; (8000460 <main+0x300>)
 80002be:	f001 fb63 	bl	8001988 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 80002c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c6:	f001 f8db 	bl	8001480 <HAL_Delay>
		 memset(sNum, 0, sizeof(sNum));
 80002ca:	2205      	movs	r2, #5
 80002cc:	2100      	movs	r1, #0
 80002ce:	486b      	ldr	r0, [pc, #428]	; (800047c <main+0x31c>)
 80002d0:	f003 f844 	bl	800335c <memset>
		 memset(str, 0, sizeof(str));
 80002d4:	2210      	movs	r2, #16
 80002d6:	2100      	movs	r1, #0
 80002d8:	4866      	ldr	r0, [pc, #408]	; (8000474 <main+0x314>)
 80002da:	f003 f83f 	bl	800335c <memset>

		 SSD1306_Clear();
 80002de:	f000 febc 	bl	800105a <SSD1306_Clear>
		 SSD1306_UpdateScreen(); // update screen
 80002e2:	f000 fd5b 	bl	8000d9c <SSD1306_UpdateScreen>
		 HAL_Delay(100);
 80002e6:	2064      	movs	r0, #100	; 0x64
 80002e8:	f001 f8ca 	bl	8001480 <HAL_Delay>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002f2:	485b      	ldr	r0, [pc, #364]	; (8000460 <main+0x300>)
 80002f4:	f001 fb48 	bl	8001988 <HAL_GPIO_WritePin>
 80002f8:	e76d      	b.n	80001d6 <main+0x76>
	 }
	 else if(strcmp(sNum, "\x93\x20\x68\xA3\x7C") == 0)
 80002fa:	4968      	ldr	r1, [pc, #416]	; (800049c <main+0x33c>)
 80002fc:	485f      	ldr	r0, [pc, #380]	; (800047c <main+0x31c>)
 80002fe:	f7ff ff25 	bl	800014c <strcmp>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d151      	bne.n	80003ac <main+0x24c>
	 {
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030e:	4854      	ldr	r0, [pc, #336]	; (8000460 <main+0x300>)
 8000310:	f001 fb3a 	bl	8001988 <HAL_GPIO_WritePin>
		 SSD1306_GotoXY (10, 10);
 8000314:	210a      	movs	r1, #10
 8000316:	200a      	movs	r0, #10
 8000318:	f000 fde4 	bl	8000ee4 <SSD1306_GotoXY>
		 SSD1306_Puts (" User 2 ", &Font_11x18, 1);
 800031c:	2201      	movs	r2, #1
 800031e:	4951      	ldr	r1, [pc, #324]	; (8000464 <main+0x304>)
 8000320:	485f      	ldr	r0, [pc, #380]	; (80004a0 <main+0x340>)
 8000322:	f000 fe75 	bl	8001010 <SSD1306_Puts>
		 SSD1306_GotoXY (10, 28);
 8000326:	211c      	movs	r1, #28
 8000328:	200a      	movs	r0, #10
 800032a:	f000 fddb 	bl	8000ee4 <SSD1306_GotoXY>
		 SSD1306_Puts (" Access", &Font_11x18, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	494c      	ldr	r1, [pc, #304]	; (8000464 <main+0x304>)
 8000332:	4858      	ldr	r0, [pc, #352]	; (8000494 <main+0x334>)
 8000334:	f000 fe6c 	bl	8001010 <SSD1306_Puts>
		 SSD1306_GotoXY (10, 45);
 8000338:	212d      	movs	r1, #45	; 0x2d
 800033a:	200a      	movs	r0, #10
 800033c:	f000 fdd2 	bl	8000ee4 <SSD1306_GotoXY>
		 SSD1306_Puts (" Alloted", &Font_11x18, 1);
 8000340:	2201      	movs	r2, #1
 8000342:	4948      	ldr	r1, [pc, #288]	; (8000464 <main+0x304>)
 8000344:	4854      	ldr	r0, [pc, #336]	; (8000498 <main+0x338>)
 8000346:	f000 fe63 	bl	8001010 <SSD1306_Puts>
		 SSD1306_UpdateScreen(); // update screen
 800034a:	f000 fd27 	bl	8000d9c <SSD1306_UpdateScreen>
		 HAL_Delay(100);
 800034e:	2064      	movs	r0, #100	; 0x64
 8000350:	f001 f896 	bl	8001480 <HAL_Delay>

		 HAL_GPIO_WritePin(LOCKER2_GPIO_Port, LOCKER2_Pin, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035a:	4852      	ldr	r0, [pc, #328]	; (80004a4 <main+0x344>)
 800035c:	f001 fb14 	bl	8001988 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 8000360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000364:	f001 f88c 	bl	8001480 <HAL_Delay>
		 HAL_GPIO_WritePin(LOCKER2_GPIO_Port, LOCKER2_Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800036e:	484d      	ldr	r0, [pc, #308]	; (80004a4 <main+0x344>)
 8000370:	f001 fb0a 	bl	8001988 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 8000374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000378:	f001 f882 	bl	8001480 <HAL_Delay>
		 memset(sNum, 0, sizeof(sNum));
 800037c:	2205      	movs	r2, #5
 800037e:	2100      	movs	r1, #0
 8000380:	483e      	ldr	r0, [pc, #248]	; (800047c <main+0x31c>)
 8000382:	f002 ffeb 	bl	800335c <memset>
		 memset(str, 0, sizeof(str));
 8000386:	2210      	movs	r2, #16
 8000388:	2100      	movs	r1, #0
 800038a:	483a      	ldr	r0, [pc, #232]	; (8000474 <main+0x314>)
 800038c:	f002 ffe6 	bl	800335c <memset>

		 SSD1306_Clear();
 8000390:	f000 fe63 	bl	800105a <SSD1306_Clear>
		 SSD1306_UpdateScreen(); // update screen
 8000394:	f000 fd02 	bl	8000d9c <SSD1306_UpdateScreen>
		 HAL_Delay(100);
 8000398:	2064      	movs	r0, #100	; 0x64
 800039a:	f001 f871 	bl	8001480 <HAL_Delay>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003a4:	482e      	ldr	r0, [pc, #184]	; (8000460 <main+0x300>)
 80003a6:	f001 faef 	bl	8001988 <HAL_GPIO_WritePin>
 80003aa:	e714      	b.n	80001d6 <main+0x76>
	 }
	 else if(strcmp(sNum, "\x2D\x5F\x92\xE0") == 0)
 80003ac:	493e      	ldr	r1, [pc, #248]	; (80004a8 <main+0x348>)
 80003ae:	4833      	ldr	r0, [pc, #204]	; (800047c <main+0x31c>)
 80003b0:	f7ff fecc 	bl	800014c <strcmp>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d178      	bne.n	80004ac <main+0x34c>
	 {
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c0:	4827      	ldr	r0, [pc, #156]	; (8000460 <main+0x300>)
 80003c2:	f001 fae1 	bl	8001988 <HAL_GPIO_WritePin>
		 SSD1306_GotoXY (10, 10);
 80003c6:	210a      	movs	r1, #10
 80003c8:	200a      	movs	r0, #10
 80003ca:	f000 fd8b 	bl	8000ee4 <SSD1306_GotoXY>
		 SSD1306_Puts (" User 2 ", &Font_11x18, 1);
 80003ce:	2201      	movs	r2, #1
 80003d0:	4924      	ldr	r1, [pc, #144]	; (8000464 <main+0x304>)
 80003d2:	4833      	ldr	r0, [pc, #204]	; (80004a0 <main+0x340>)
 80003d4:	f000 fe1c 	bl	8001010 <SSD1306_Puts>
		 SSD1306_GotoXY (10, 28);
 80003d8:	211c      	movs	r1, #28
 80003da:	200a      	movs	r0, #10
 80003dc:	f000 fd82 	bl	8000ee4 <SSD1306_GotoXY>
		 SSD1306_Puts (" Access", &Font_11x18, 1);
 80003e0:	2201      	movs	r2, #1
 80003e2:	4920      	ldr	r1, [pc, #128]	; (8000464 <main+0x304>)
 80003e4:	482b      	ldr	r0, [pc, #172]	; (8000494 <main+0x334>)
 80003e6:	f000 fe13 	bl	8001010 <SSD1306_Puts>
		 SSD1306_GotoXY (10, 45);
 80003ea:	212d      	movs	r1, #45	; 0x2d
 80003ec:	200a      	movs	r0, #10
 80003ee:	f000 fd79 	bl	8000ee4 <SSD1306_GotoXY>
		 SSD1306_Puts (" Alloted", &Font_11x18, 1);
 80003f2:	2201      	movs	r2, #1
 80003f4:	491b      	ldr	r1, [pc, #108]	; (8000464 <main+0x304>)
 80003f6:	4828      	ldr	r0, [pc, #160]	; (8000498 <main+0x338>)
 80003f8:	f000 fe0a 	bl	8001010 <SSD1306_Puts>
		 SSD1306_UpdateScreen(); // update screen
 80003fc:	f000 fcce 	bl	8000d9c <SSD1306_UpdateScreen>
		 HAL_Delay(100);
 8000400:	2064      	movs	r0, #100	; 0x64
 8000402:	f001 f83d 	bl	8001480 <HAL_Delay>

		 HAL_GPIO_WritePin(LOCKER3_GPIO_Port, LOCKER3_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040c:	4825      	ldr	r0, [pc, #148]	; (80004a4 <main+0x344>)
 800040e:	f001 fabb 	bl	8001988 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 8000412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000416:	f001 f833 	bl	8001480 <HAL_Delay>
		 HAL_GPIO_WritePin(LOCKER3_GPIO_Port, LOCKER3_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000420:	4820      	ldr	r0, [pc, #128]	; (80004a4 <main+0x344>)
 8000422:	f001 fab1 	bl	8001988 <HAL_GPIO_WritePin>
		 HAL_Delay(1000);
 8000426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800042a:	f001 f829 	bl	8001480 <HAL_Delay>
		 memset(sNum, 0, sizeof(sNum));
 800042e:	2205      	movs	r2, #5
 8000430:	2100      	movs	r1, #0
 8000432:	4812      	ldr	r0, [pc, #72]	; (800047c <main+0x31c>)
 8000434:	f002 ff92 	bl	800335c <memset>
		 memset(str, 0, sizeof(str));
 8000438:	2210      	movs	r2, #16
 800043a:	2100      	movs	r1, #0
 800043c:	480d      	ldr	r0, [pc, #52]	; (8000474 <main+0x314>)
 800043e:	f002 ff8d 	bl	800335c <memset>

		 SSD1306_Clear();
 8000442:	f000 fe0a 	bl	800105a <SSD1306_Clear>
		 SSD1306_UpdateScreen(); // update screen
 8000446:	f000 fca9 	bl	8000d9c <SSD1306_UpdateScreen>
		 HAL_Delay(100);
 800044a:	2064      	movs	r0, #100	; 0x64
 800044c:	f001 f818 	bl	8001480 <HAL_Delay>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000456:	4802      	ldr	r0, [pc, #8]	; (8000460 <main+0x300>)
 8000458:	f001 fa96 	bl	8001988 <HAL_GPIO_WritePin>
 800045c:	e6bb      	b.n	80001d6 <main+0x76>
 800045e:	bf00      	nop
 8000460:	40011000 	.word	0x40011000
 8000464:	20000000 	.word	0x20000000
 8000468:	08003384 	.word	0x08003384
 800046c:	0800338c 	.word	0x0800338c
 8000470:	08003394 	.word	0x08003394
 8000474:	200000e0 	.word	0x200000e0
 8000478:	200000dc 	.word	0x200000dc
 800047c:	200000f0 	.word	0x200000f0
 8000480:	080033a0 	.word	0x080033a0
 8000484:	080033a8 	.word	0x080033a8
 8000488:	080033b0 	.word	0x080033b0
 800048c:	080033b8 	.word	0x080033b8
 8000490:	080033c0 	.word	0x080033c0
 8000494:	080033cc 	.word	0x080033cc
 8000498:	080033d4 	.word	0x080033d4
 800049c:	080033e0 	.word	0x080033e0
 80004a0:	080033e8 	.word	0x080033e8
 80004a4:	40010c00 	.word	0x40010c00
 80004a8:	080033f4 	.word	0x080033f4
	 }
	 else if((sNum[0] != 0) && (sNum[1] != 0) && (sNum[2] != 0) && (sNum[3] != 0) && (sNum[4] != 0))
 80004ac:	4b30      	ldr	r3, [pc, #192]	; (8000570 <main+0x410>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d049      	beq.n	8000548 <main+0x3e8>
 80004b4:	4b2e      	ldr	r3, [pc, #184]	; (8000570 <main+0x410>)
 80004b6:	785b      	ldrb	r3, [r3, #1]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d045      	beq.n	8000548 <main+0x3e8>
 80004bc:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <main+0x410>)
 80004be:	789b      	ldrb	r3, [r3, #2]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d041      	beq.n	8000548 <main+0x3e8>
 80004c4:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <main+0x410>)
 80004c6:	78db      	ldrb	r3, [r3, #3]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d03d      	beq.n	8000548 <main+0x3e8>
 80004cc:	4b28      	ldr	r3, [pc, #160]	; (8000570 <main+0x410>)
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d039      	beq.n	8000548 <main+0x3e8>
	 {
		 if((strcmp(sNum, "\x93\x20\x68\xA3\x7C") == 0) || (strcmp(sNum, "\x83\x31\x84\xE4\xD2") == 0))
 80004d4:	4927      	ldr	r1, [pc, #156]	; (8000574 <main+0x414>)
 80004d6:	4826      	ldr	r0, [pc, #152]	; (8000570 <main+0x410>)
 80004d8:	f7ff fe38 	bl	800014c <strcmp>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d006      	beq.n	80004f0 <main+0x390>
 80004e2:	4925      	ldr	r1, [pc, #148]	; (8000578 <main+0x418>)
 80004e4:	4822      	ldr	r0, [pc, #136]	; (8000570 <main+0x410>)
 80004e6:	f7ff fe31 	bl	800014c <strcmp>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d13c      	bne.n	800056a <main+0x40a>
		 {
			 SSD1306_GotoXY (10, 10);
 80004f0:	210a      	movs	r1, #10
 80004f2:	200a      	movs	r0, #10
 80004f4:	f000 fcf6 	bl	8000ee4 <SSD1306_GotoXY>
			 SSD1306_Puts ("        ", &Font_11x18, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	4920      	ldr	r1, [pc, #128]	; (800057c <main+0x41c>)
 80004fc:	4820      	ldr	r0, [pc, #128]	; (8000580 <main+0x420>)
 80004fe:	f000 fd87 	bl	8001010 <SSD1306_Puts>
			 SSD1306_GotoXY (10, 28);
 8000502:	211c      	movs	r1, #28
 8000504:	200a      	movs	r0, #10
 8000506:	f000 fced 	bl	8000ee4 <SSD1306_GotoXY>
			 SSD1306_Puts (" Access", &Font_11x18, 1);
 800050a:	2201      	movs	r2, #1
 800050c:	491b      	ldr	r1, [pc, #108]	; (800057c <main+0x41c>)
 800050e:	481d      	ldr	r0, [pc, #116]	; (8000584 <main+0x424>)
 8000510:	f000 fd7e 	bl	8001010 <SSD1306_Puts>
			 SSD1306_GotoXY (10, 45);
 8000514:	212d      	movs	r1, #45	; 0x2d
 8000516:	200a      	movs	r0, #10
 8000518:	f000 fce4 	bl	8000ee4 <SSD1306_GotoXY>
			 SSD1306_Puts (" Denied ", &Font_11x18, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	4917      	ldr	r1, [pc, #92]	; (800057c <main+0x41c>)
 8000520:	4819      	ldr	r0, [pc, #100]	; (8000588 <main+0x428>)
 8000522:	f000 fd75 	bl	8001010 <SSD1306_Puts>
			 SSD1306_UpdateScreen(); // update screen
 8000526:	f000 fc39 	bl	8000d9c <SSD1306_UpdateScreen>
			 HAL_Delay(1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052e:	f000 ffa7 	bl	8001480 <HAL_Delay>
			 memset(sNum, 0, sizeof(sNum));
 8000532:	2205      	movs	r2, #5
 8000534:	2100      	movs	r1, #0
 8000536:	480e      	ldr	r0, [pc, #56]	; (8000570 <main+0x410>)
 8000538:	f002 ff10 	bl	800335c <memset>
			 memset(str, 0, sizeof(str));
 800053c:	2210      	movs	r2, #16
 800053e:	2100      	movs	r1, #0
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <main+0x42c>)
 8000542:	f002 ff0b 	bl	800335c <memset>
		 if((strcmp(sNum, "\x93\x20\x68\xA3\x7C") == 0) || (strcmp(sNum, "\x83\x31\x84\xE4\xD2") == 0))
 8000546:	e010      	b.n	800056a <main+0x40a>

		 }
	 }
	 else
	 {
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054e:	4810      	ldr	r0, [pc, #64]	; (8000590 <main+0x430>)
 8000550:	f001 fa1a 	bl	8001988 <HAL_GPIO_WritePin>
		 memset(sNum, 0, sizeof(sNum));
 8000554:	2205      	movs	r2, #5
 8000556:	2100      	movs	r1, #0
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <main+0x410>)
 800055a:	f002 feff 	bl	800335c <memset>
		 memset(str, 0, sizeof(str));
 800055e:	2210      	movs	r2, #16
 8000560:	2100      	movs	r1, #0
 8000562:	480a      	ldr	r0, [pc, #40]	; (800058c <main+0x42c>)
 8000564:	f002 fefa 	bl	800335c <memset>
 8000568:	e635      	b.n	80001d6 <main+0x76>
		 if((strcmp(sNum, "\x93\x20\x68\xA3\x7C") == 0) || (strcmp(sNum, "\x83\x31\x84\xE4\xD2") == 0))
 800056a:	bf00      	nop
 	  status = MFRC522_Request(PICC_REQIDL, str);
 800056c:	e633      	b.n	80001d6 <main+0x76>
 800056e:	bf00      	nop
 8000570:	200000f0 	.word	0x200000f0
 8000574:	080033e0 	.word	0x080033e0
 8000578:	080033b8 	.word	0x080033b8
 800057c:	20000000 	.word	0x20000000
 8000580:	080033fc 	.word	0x080033fc
 8000584:	080033cc 	.word	0x080033cc
 8000588:	08003408 	.word	0x08003408
 800058c:	200000e0 	.word	0x200000e0
 8000590:	40011000 	.word	0x40011000

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b090      	sub	sp, #64	; 0x40
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	2228      	movs	r2, #40	; 0x28
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 feda 	bl	800335c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0318 	add.w	r3, r7, #24
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 ffb5 	bl	800254c <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005e8:	f000 f902 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fa22 	bl	8002a50 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000612:	f000 f8ed 	bl	80007f0 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3740      	adds	r7, #64	; 0x40
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f001 f9ab 	bl	80019b8 <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f8c2 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000030 	.word	0x20000030
 8000674:	40005400 	.word	0x40005400
 8000678:	00061a80 	.word	0x00061a80

0800067c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <MX_SPI1_Init+0x68>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800068c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_SPI1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006b0:	2210      	movs	r2, #16
 80006b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006c8:	220a      	movs	r2, #10
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006ce:	f002 fb39 	bl	8002d44 <HAL_SPI_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006d8:	f000 f88a 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000084 	.word	0x20000084
 80006e4:	40013000 	.word	0x40013000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0310 	add.w	r3, r7, #16
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fc:	4b38      	ldr	r3, [pc, #224]	; (80007e0 <MX_GPIO_Init+0xf8>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a37      	ldr	r2, [pc, #220]	; (80007e0 <MX_GPIO_Init+0xf8>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b35      	ldr	r3, [pc, #212]	; (80007e0 <MX_GPIO_Init+0xf8>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000714:	4b32      	ldr	r3, [pc, #200]	; (80007e0 <MX_GPIO_Init+0xf8>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a31      	ldr	r2, [pc, #196]	; (80007e0 <MX_GPIO_Init+0xf8>)
 800071a:	f043 0320 	orr.w	r3, r3, #32
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <MX_GPIO_Init+0xf8>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0320 	and.w	r3, r3, #32
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <MX_GPIO_Init+0xf8>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a2b      	ldr	r2, [pc, #172]	; (80007e0 <MX_GPIO_Init+0xf8>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <MX_GPIO_Init+0xf8>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <MX_GPIO_Init+0xf8>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <MX_GPIO_Init+0xf8>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_GPIO_Init+0xf8>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOCKER1_Pin|LED_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000762:	4820      	ldr	r0, [pc, #128]	; (80007e4 <MX_GPIO_Init+0xfc>)
 8000764:	f001 f910 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	481e      	ldr	r0, [pc, #120]	; (80007e8 <MX_GPIO_Init+0x100>)
 800076e:	f001 f90b 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LOCKER2_Pin|LOCKER3_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f243 0101 	movw	r1, #12289	; 0x3001
 8000778:	481c      	ldr	r0, [pc, #112]	; (80007ec <MX_GPIO_Init+0x104>)
 800077a:	f001 f905 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LOCKER1_Pin LED_Pin */
  GPIO_InitStruct.Pin = LOCKER1_Pin|LED_Pin;
 800077e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2302      	movs	r3, #2
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4813      	ldr	r0, [pc, #76]	; (80007e4 <MX_GPIO_Init+0xfc>)
 8000798:	f000 ff7a 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800079c:	2310      	movs	r3, #16
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_GPIO_Init+0x100>)
 80007b4:	f000 ff6c 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LOCKER2_Pin LOCKER3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LOCKER2_Pin|LOCKER3_Pin;
 80007b8:	f243 0301 	movw	r3, #12289	; 0x3001
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <MX_GPIO_Init+0x104>)
 80007d2:	f000 ff5d 	bl	8001690 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d6:	bf00      	nop
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40011000 	.word	0x40011000
 80007e8:	40010800 	.word	0x40010800
 80007ec:	40010c00 	.word	0x40010c00

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af02      	add	r7, sp, #8
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000806:	f107 020f 	add.w	r2, r7, #15
 800080a:	1df9      	adds	r1, r7, #7
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2301      	movs	r3, #1
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <RC522_SPI_Transfer+0x28>)
 8000814:	f002 fb1a 	bl	8002e4c <HAL_SPI_TransmitReceive>

	return rx_data;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000084 	.word	0x20000084

08000828 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2110      	movs	r1, #16
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <Write_MFRC522+0x48>)
 800083e:	f001 f8a3 	bl	8001988 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ffd4 	bl	80007fc <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffd0 	bl	80007fc <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2110      	movs	r1, #16
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <Write_MFRC522+0x48>)
 8000862:	f001 f891 	bl	8001988 <HAL_GPIO_WritePin>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40010800 	.word	0x40010800

08000874 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2110      	movs	r1, #16
 8000882:	480f      	ldr	r0, [pc, #60]	; (80008c0 <Read_MFRC522+0x4c>)
 8000884:	f001 f880 	bl	8001988 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	b25b      	sxtb	r3, r3
 800088e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000892:	b25b      	sxtb	r3, r3
 8000894:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000898:	b25b      	sxtb	r3, r3
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffad 	bl	80007fc <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff ffaa 	bl	80007fc <RC522_SPI_Transfer>
 80008a8:	4603      	mov	r3, r0
 80008aa:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2110      	movs	r1, #16
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <Read_MFRC522+0x4c>)
 80008b2:	f001 f869 	bl	8001988 <HAL_GPIO_WritePin>

	return val;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]

}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40010800 	.word	0x40010800

080008c4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	460a      	mov	r2, r1
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	4613      	mov	r3, r2
 80008d2:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ffcc 	bl	8000874 <Read_MFRC522>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80008e0:	7bfa      	ldrb	r2, [r7, #15]
 80008e2:	79bb      	ldrb	r3, [r7, #6]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff9b 	bl	8000828 <Write_MFRC522>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	460a      	mov	r2, r1
 8000904:	71fb      	strb	r3, [r7, #7]
 8000906:	4613      	mov	r3, r2
 8000908:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ffb1 	bl	8000874 <Read_MFRC522>
 8000912:	4603      	mov	r3, r0
 8000914:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000916:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800091a:	43db      	mvns	r3, r3
 800091c:	b25a      	sxtb	r2, r3
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	4013      	ands	r3, r2
 8000924:	b25b      	sxtb	r3, r3
 8000926:	b2da      	uxtb	r2, r3
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff7b 	bl	8000828 <Write_MFRC522>
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800093e:	2014      	movs	r0, #20
 8000940:	f7ff ff98 	bl	8000874 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000944:	2103      	movs	r1, #3
 8000946:	2014      	movs	r0, #20
 8000948:	f7ff ffbc 	bl	80008c4 <SetBitMask>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000954:	210f      	movs	r1, #15
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff66 	bl	8000828 <Write_MFRC522>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2110      	movs	r1, #16
 8000968:	4812      	ldr	r0, [pc, #72]	; (80009b4 <MFRC522_Init+0x54>)
 800096a:	f001 f80d 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	2101      	movs	r1, #1
 8000972:	4811      	ldr	r0, [pc, #68]	; (80009b8 <MFRC522_Init+0x58>)
 8000974:	f001 f808 	bl	8001988 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000978:	f7ff ffea 	bl	8000950 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800097c:	218d      	movs	r1, #141	; 0x8d
 800097e:	202a      	movs	r0, #42	; 0x2a
 8000980:	f7ff ff52 	bl	8000828 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000984:	213e      	movs	r1, #62	; 0x3e
 8000986:	202b      	movs	r0, #43	; 0x2b
 8000988:	f7ff ff4e 	bl	8000828 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 800098c:	211e      	movs	r1, #30
 800098e:	202d      	movs	r0, #45	; 0x2d
 8000990:	f7ff ff4a 	bl	8000828 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000994:	2100      	movs	r1, #0
 8000996:	202c      	movs	r0, #44	; 0x2c
 8000998:	f7ff ff46 	bl	8000828 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	2015      	movs	r0, #21
 80009a0:	f7ff ff42 	bl	8000828 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80009a4:	213d      	movs	r1, #61	; 0x3d
 80009a6:	2011      	movs	r0, #17
 80009a8:	f7ff ff3e 	bl	8000828 <Write_MFRC522>

	AntennaOn();
 80009ac:	f7ff ffc5 	bl	800093a <AntennaOn>
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40010800 	.word	0x40010800
 80009b8:	40010c00 	.word	0x40010c00

080009bc <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint8_t *backLen)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4603      	mov	r3, r0
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	4613      	mov	r3, r2
 80009cc:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 80009ce:	2302      	movs	r3, #2
 80009d0:	75fb      	strb	r3, [r7, #23]
    uchar irqEn = 0x00;
 80009d2:	2300      	movs	r3, #0
 80009d4:	75bb      	strb	r3, [r7, #22]
    uchar waitIRq = 0x00;
 80009d6:	2300      	movs	r3, #0
 80009d8:	757b      	strb	r3, [r7, #21]
    uchar lastBits;
    uchar n;
    uint8_t i;

    switch (command)
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b0c      	cmp	r3, #12
 80009de:	d006      	beq.n	80009ee <MFRC522_ToCard+0x32>
 80009e0:	2b0e      	cmp	r3, #14
 80009e2:	d109      	bne.n	80009f8 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 80009e4:	2312      	movs	r3, #18
 80009e6:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80009e8:	2310      	movs	r3, #16
 80009ea:	757b      	strb	r3, [r7, #21]
			break;
 80009ec:	e005      	b.n	80009fa <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 80009ee:	2377      	movs	r3, #119	; 0x77
 80009f0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80009f2:	2330      	movs	r3, #48	; 0x30
 80009f4:	757b      	strb	r3, [r7, #21]
			break;
 80009f6:	e000      	b.n	80009fa <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80009f8:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80009fa:	7dbb      	ldrb	r3, [r7, #22]
 80009fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	2002      	movs	r0, #2
 8000a06:	f7ff ff0f 	bl	8000828 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	2004      	movs	r0, #4
 8000a0e:	f7ff ff74 	bl	80008fa <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000a12:	2180      	movs	r1, #128	; 0x80
 8000a14:	200a      	movs	r0, #10
 8000a16:	f7ff ff55 	bl	80008c4 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff ff03 	bl	8000828 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	74fb      	strb	r3, [r7, #19]
 8000a26:	e00a      	b.n	8000a3e <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000a28:	7cfb      	ldrb	r3, [r7, #19]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	2009      	movs	r0, #9
 8000a34:	f7ff fef8 	bl	8000828 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000a38:	7cfb      	ldrb	r3, [r7, #19]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	74fb      	strb	r3, [r7, #19]
 8000a3e:	7cfa      	ldrb	r2, [r7, #19]
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d3f0      	bcc.n	8000a28 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f7ff feec 	bl	8000828 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	2b0c      	cmp	r3, #12
 8000a54:	d103      	bne.n	8000a5e <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	200d      	movs	r0, #13
 8000a5a:	f7ff ff33 	bl	80008c4 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000a5e:	23d0      	movs	r3, #208	; 0xd0
 8000a60:	74fb      	strb	r3, [r7, #19]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000a62:	2004      	movs	r0, #4
 8000a64:	f7ff ff06 	bl	8000874 <Read_MFRC522>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	753b      	strb	r3, [r7, #20]
        i--;
 8000a6c:	7cfb      	ldrb	r3, [r7, #19]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	74fb      	strb	r3, [r7, #19]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000a72:	7cfb      	ldrb	r3, [r7, #19]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00a      	beq.n	8000a8e <MFRC522_ToCard+0xd2>
 8000a78:	7d3b      	ldrb	r3, [r7, #20]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d105      	bne.n	8000a8e <MFRC522_ToCard+0xd2>
 8000a82:	7d3a      	ldrb	r2, [r7, #20]
 8000a84:	7d7b      	ldrb	r3, [r7, #21]
 8000a86:	4013      	ands	r3, r2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0e9      	beq.n	8000a62 <MFRC522_ToCard+0xa6>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	200d      	movs	r0, #13
 8000a92:	f7ff ff32 	bl	80008fa <ClearBitMask>

    if (i != 0)
 8000a96:	7cfb      	ldrb	r3, [r7, #19]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d054      	beq.n	8000b46 <MFRC522_ToCard+0x18a>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000a9c:	2006      	movs	r0, #6
 8000a9e:	f7ff fee9 	bl	8000874 <Read_MFRC522>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f003 031b 	and.w	r3, r3, #27
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <MFRC522_ToCard+0x186>
        {
            status = MI_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	75fb      	strb	r3, [r7, #23]
            if (n & irqEn & 0x01)
 8000ab0:	7d3a      	ldrb	r2, [r7, #20]
 8000ab2:	7dbb      	ldrb	r3, [r7, #22]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MFRC522_ToCard+0x108>
            {
				status = MI_NOTAGERR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	75fb      	strb	r3, [r7, #23]
			}

            if (command == PCD_TRANSCEIVE)
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	2b0c      	cmp	r3, #12
 8000ac8:	d13d      	bne.n	8000b46 <MFRC522_ToCard+0x18a>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000aca:	200a      	movs	r0, #10
 8000acc:	f7ff fed2 	bl	8000874 <Read_MFRC522>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	753b      	strb	r3, [r7, #20]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000ad4:	200c      	movs	r0, #12
 8000ad6:	f7ff fecd 	bl	8000874 <Read_MFRC522>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f003 0307 	and.w	r3, r3, #7
 8000ae0:	74bb      	strb	r3, [r7, #18]
                if (lastBits)
 8000ae2:	7cbb      	ldrb	r3, [r7, #18]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00a      	beq.n	8000afe <MFRC522_ToCard+0x142>
                {
					*backLen = (n-1)*8 + lastBits;
 8000ae8:	7d3b      	ldrb	r3, [r7, #20]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	7cbb      	ldrb	r3, [r7, #18]
 8000af4:	4413      	add	r3, r2
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e004      	b.n	8000b08 <MFRC522_ToCard+0x14c>
				}
                else
                {
					*backLen = n*8;
 8000afe:	7d3b      	ldrb	r3, [r7, #20]
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b06:	701a      	strb	r2, [r3, #0]
				}

                if (n == 0)
 8000b08:	7d3b      	ldrb	r3, [r7, #20]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <MFRC522_ToCard+0x156>
                {
					n = 1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	753b      	strb	r3, [r7, #20]
				}
                if (n > MAX_LEN)
 8000b12:	7d3b      	ldrb	r3, [r7, #20]
 8000b14:	2b10      	cmp	r3, #16
 8000b16:	d901      	bls.n	8000b1c <MFRC522_ToCard+0x160>
                {
					n = MAX_LEN;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	753b      	strb	r3, [r7, #20]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	74fb      	strb	r3, [r7, #19]
 8000b20:	e00a      	b.n	8000b38 <MFRC522_ToCard+0x17c>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000b22:	7cfb      	ldrb	r3, [r7, #19]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	18d4      	adds	r4, r2, r3
 8000b28:	2009      	movs	r0, #9
 8000b2a:	f7ff fea3 	bl	8000874 <Read_MFRC522>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000b32:	7cfb      	ldrb	r3, [r7, #19]
 8000b34:	3301      	adds	r3, #1
 8000b36:	74fb      	strb	r3, [r7, #19]
 8000b38:	7cfa      	ldrb	r2, [r7, #19]
 8000b3a:	7d3b      	ldrb	r3, [r7, #20]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d3f0      	bcc.n	8000b22 <MFRC522_ToCard+0x166>
 8000b40:	e001      	b.n	8000b46 <MFRC522_ToCard+0x18a>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000b42:	2302      	movs	r3, #2
 8000b44:	75fb      	strb	r3, [r7, #23]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}

08000b50 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint8_t backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000b5c:	2107      	movs	r1, #7
 8000b5e:	200d      	movs	r0, #13
 8000b60:	f7ff fe62 	bl	8000828 <Write_MFRC522>

	TagType[0] = reqMode;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000b6a:	f107 030e 	add.w	r3, r7, #14
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2201      	movs	r2, #1
 8000b74:	6839      	ldr	r1, [r7, #0]
 8000b76:	200c      	movs	r0, #12
 8000b78:	f7ff ff20 	bl	80009bc <MFRC522_ToCard>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d102      	bne.n	8000b8c <MFRC522_Request+0x3c>
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	2b10      	cmp	r3, #16
 8000b8a:	d001      	beq.n	8000b90 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af02      	add	r7, sp, #8
 8000ba0:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	737b      	strb	r3, [r7, #13]
    uint8_t unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	200d      	movs	r0, #13
 8000baa:	f7ff fe3d 	bl	8000828 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2293      	movs	r2, #147	; 0x93
 8000bb2:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	2220      	movs	r2, #32
 8000bba:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	200c      	movs	r0, #12
 8000bca:	f7ff fef7 	bl	80009bc <MFRC522_ToCard>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d118      	bne.n	8000c0a <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73bb      	strb	r3, [r7, #14]
 8000bdc:	e009      	b.n	8000bf2 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000bde:	7bbb      	ldrb	r3, [r7, #14]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	4413      	add	r3, r2
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	7b7b      	ldrb	r3, [r7, #13]
 8000be8:	4053      	eors	r3, r2
 8000bea:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000bec:	7bbb      	ldrb	r3, [r7, #14]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	73bb      	strb	r3, [r7, #14]
 8000bf2:	7bbb      	ldrb	r3, [r7, #14]
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d9f2      	bls.n	8000bde <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000bf8:	7bbb      	ldrb	r3, [r7, #14]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	7b7a      	ldrb	r2, [r7, #13]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d001      	beq.n	8000c0a <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000c06:	2302      	movs	r3, #2
 8000c08:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c1a:	f000 fa27 	bl	800106c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000c1e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c22:	2201      	movs	r2, #1
 8000c24:	2178      	movs	r1, #120	; 0x78
 8000c26:	485b      	ldr	r0, [pc, #364]	; (8000d94 <SSD1306_Init+0x180>)
 8000c28:	f001 f908 	bl	8001e3c <HAL_I2C_IsDeviceReady>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e0a9      	b.n	8000d8a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000c36:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000c3a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c3c:	e002      	b.n	8000c44 <SSD1306_Init+0x30>
		p--;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f9      	bne.n	8000c3e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000c4a:	22ae      	movs	r2, #174	; 0xae
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2078      	movs	r0, #120	; 0x78
 8000c50:	f000 fa86 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c54:	2220      	movs	r2, #32
 8000c56:	2100      	movs	r1, #0
 8000c58:	2078      	movs	r0, #120	; 0x78
 8000c5a:	f000 fa81 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c5e:	2210      	movs	r2, #16
 8000c60:	2100      	movs	r1, #0
 8000c62:	2078      	movs	r0, #120	; 0x78
 8000c64:	f000 fa7c 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c68:	22b0      	movs	r2, #176	; 0xb0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2078      	movs	r0, #120	; 0x78
 8000c6e:	f000 fa77 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c72:	22c8      	movs	r2, #200	; 0xc8
 8000c74:	2100      	movs	r1, #0
 8000c76:	2078      	movs	r0, #120	; 0x78
 8000c78:	f000 fa72 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2078      	movs	r0, #120	; 0x78
 8000c82:	f000 fa6d 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c86:	2210      	movs	r2, #16
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2078      	movs	r0, #120	; 0x78
 8000c8c:	f000 fa68 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c90:	2240      	movs	r2, #64	; 0x40
 8000c92:	2100      	movs	r1, #0
 8000c94:	2078      	movs	r0, #120	; 0x78
 8000c96:	f000 fa63 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c9a:	2281      	movs	r2, #129	; 0x81
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2078      	movs	r0, #120	; 0x78
 8000ca0:	f000 fa5e 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000ca4:	22ff      	movs	r2, #255	; 0xff
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2078      	movs	r0, #120	; 0x78
 8000caa:	f000 fa59 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000cae:	22a1      	movs	r2, #161	; 0xa1
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2078      	movs	r0, #120	; 0x78
 8000cb4:	f000 fa54 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000cb8:	22a6      	movs	r2, #166	; 0xa6
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2078      	movs	r0, #120	; 0x78
 8000cbe:	f000 fa4f 	bl	8001160 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000cc2:	22a8      	movs	r2, #168	; 0xa8
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2078      	movs	r0, #120	; 0x78
 8000cc8:	f000 fa4a 	bl	8001160 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8000ccc:	223f      	movs	r2, #63	; 0x3f
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2078      	movs	r0, #120	; 0x78
 8000cd2:	f000 fa45 	bl	8001160 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000cd6:	22a4      	movs	r2, #164	; 0xa4
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2078      	movs	r0, #120	; 0x78
 8000cdc:	f000 fa40 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ce0:	22d3      	movs	r2, #211	; 0xd3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2078      	movs	r0, #120	; 0x78
 8000ce6:	f000 fa3b 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2078      	movs	r0, #120	; 0x78
 8000cf0:	f000 fa36 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000cf4:	22d5      	movs	r2, #213	; 0xd5
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2078      	movs	r0, #120	; 0x78
 8000cfa:	f000 fa31 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000cfe:	22f0      	movs	r2, #240	; 0xf0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2078      	movs	r0, #120	; 0x78
 8000d04:	f000 fa2c 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d08:	22d9      	movs	r2, #217	; 0xd9
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2078      	movs	r0, #120	; 0x78
 8000d0e:	f000 fa27 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d12:	2222      	movs	r2, #34	; 0x22
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	; 0x78
 8000d18:	f000 fa22 	bl	8001160 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000d1c:	22da      	movs	r2, #218	; 0xda
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2078      	movs	r0, #120	; 0x78
 8000d22:	f000 fa1d 	bl	8001160 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8000d26:	2212      	movs	r2, #18
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2078      	movs	r0, #120	; 0x78
 8000d2c:	f000 fa18 	bl	8001160 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000d30:	22db      	movs	r2, #219	; 0xdb
 8000d32:	2100      	movs	r1, #0
 8000d34:	2078      	movs	r0, #120	; 0x78
 8000d36:	f000 fa13 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2078      	movs	r0, #120	; 0x78
 8000d40:	f000 fa0e 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000d44:	228d      	movs	r2, #141	; 0x8d
 8000d46:	2100      	movs	r1, #0
 8000d48:	2078      	movs	r0, #120	; 0x78
 8000d4a:	f000 fa09 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000d4e:	2214      	movs	r2, #20
 8000d50:	2100      	movs	r1, #0
 8000d52:	2078      	movs	r0, #120	; 0x78
 8000d54:	f000 fa04 	bl	8001160 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d58:	22af      	movs	r2, #175	; 0xaf
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2078      	movs	r0, #120	; 0x78
 8000d5e:	f000 f9ff 	bl	8001160 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d62:	222e      	movs	r2, #46	; 0x2e
 8000d64:	2100      	movs	r1, #0
 8000d66:	2078      	movs	r0, #120	; 0x78
 8000d68:	f000 f9fa 	bl	8001160 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 f843 	bl	8000df8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000d72:	f000 f813 	bl	8000d9c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <SSD1306_Init+0x184>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <SSD1306_Init+0x184>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SSD1306_Init+0x184>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000d88:	2301      	movs	r3, #1
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000030 	.word	0x20000030
 8000d98:	200004f8 	.word	0x200004f8

08000d9c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	e01d      	b.n	8000de4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	3b50      	subs	r3, #80	; 0x50
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	2100      	movs	r1, #0
 8000db2:	2078      	movs	r0, #120	; 0x78
 8000db4:	f000 f9d4 	bl	8001160 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2078      	movs	r0, #120	; 0x78
 8000dbe:	f000 f9cf 	bl	8001160 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000dc2:	2210      	movs	r2, #16
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2078      	movs	r0, #120	; 0x78
 8000dc8:	f000 f9ca 	bl	8001160 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	01db      	lsls	r3, r3, #7
 8000dd0:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <SSD1306_UpdateScreen+0x58>)
 8000dd2:	441a      	add	r2, r3
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	2078      	movs	r0, #120	; 0x78
 8000dda:	f000 f95b 	bl	8001094 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	3301      	adds	r3, #1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b07      	cmp	r3, #7
 8000de8:	d9de      	bls.n	8000da8 <SSD1306_UpdateScreen+0xc>
	}
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200000f8 	.word	0x200000f8

08000df8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <SSD1306_Fill+0x14>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e000      	b.n	8000e0e <SSD1306_Fill+0x16>
 8000e0c:	23ff      	movs	r3, #255	; 0xff
 8000e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e12:	4619      	mov	r1, r3
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <SSD1306_Fill+0x2c>)
 8000e16:	f002 faa1 	bl	800335c <memset>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000f8 	.word	0x200000f8

08000e28 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
 8000e32:	460b      	mov	r3, r1
 8000e34:	80bb      	strh	r3, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	70fb      	strb	r3, [r7, #3]
	if (
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e3e:	d848      	bhi.n	8000ed2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	2b3f      	cmp	r3, #63	; 0x3f
 8000e44:	d845      	bhi.n	8000ed2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <SSD1306_DrawPixel+0xb4>)
 8000e48:	791b      	ldrb	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d006      	beq.n	8000e5c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf0c      	ite	eq
 8000e54:	2301      	moveq	r3, #1
 8000e56:	2300      	movne	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d11a      	bne.n	8000e98 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e62:	88fa      	ldrh	r2, [r7, #6]
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	08db      	lsrs	r3, r3, #3
 8000e68:	b298      	uxth	r0, r3
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	01db      	lsls	r3, r3, #7
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <SSD1306_DrawPixel+0xb8>)
 8000e72:	5cd3      	ldrb	r3, [r2, r3]
 8000e74:	b25a      	sxtb	r2, r3
 8000e76:	88bb      	ldrh	r3, [r7, #4]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b259      	sxtb	r1, r3
 8000e88:	88fa      	ldrh	r2, [r7, #6]
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	01db      	lsls	r3, r3, #7
 8000e8e:	4413      	add	r3, r2
 8000e90:	b2c9      	uxtb	r1, r1
 8000e92:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <SSD1306_DrawPixel+0xb8>)
 8000e94:	54d1      	strb	r1, [r2, r3]
 8000e96:	e01d      	b.n	8000ed4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e98:	88fa      	ldrh	r2, [r7, #6]
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	08db      	lsrs	r3, r3, #3
 8000e9e:	b298      	uxth	r0, r3
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	01db      	lsls	r3, r3, #7
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <SSD1306_DrawPixel+0xb8>)
 8000ea8:	5cd3      	ldrb	r3, [r2, r3]
 8000eaa:	b25a      	sxtb	r2, r3
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	b259      	sxtb	r1, r3
 8000ec2:	88fa      	ldrh	r2, [r7, #6]
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	01db      	lsls	r3, r3, #7
 8000ec8:	4413      	add	r3, r2
 8000eca:	b2c9      	uxtb	r1, r1
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <SSD1306_DrawPixel+0xb8>)
 8000ece:	54d1      	strb	r1, [r2, r3]
 8000ed0:	e000      	b.n	8000ed4 <SSD1306_DrawPixel+0xac>
		return;
 8000ed2:	bf00      	nop
	}
}
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	200004f8 	.word	0x200004f8
 8000ee0:	200000f8 	.word	0x200000f8

08000ee4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ef4:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <SSD1306_GotoXY+0x28>)
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <SSD1306_GotoXY+0x28>)
 8000efc:	88bb      	ldrh	r3, [r7, #4]
 8000efe:	8053      	strh	r3, [r2, #2]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200004f8 	.word	0x200004f8

08000f10 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f20:	4b3a      	ldr	r3, [pc, #232]	; (800100c <SSD1306_Putc+0xfc>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
	if (
 8000f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f2e:	dc07      	bgt.n	8000f40 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000f30:	4b36      	ldr	r3, [pc, #216]	; (800100c <SSD1306_Putc+0xfc>)
 8000f32:	885b      	ldrh	r3, [r3, #2]
 8000f34:	461a      	mov	r2, r3
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	785b      	ldrb	r3, [r3, #1]
 8000f3a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f3c:	2b3f      	cmp	r3, #63	; 0x3f
 8000f3e:	dd01      	ble.n	8000f44 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	e05e      	b.n	8001002 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e04b      	b.n	8000fe2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	3b20      	subs	r3, #32
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	7849      	ldrb	r1, [r1, #1]
 8000f56:	fb01 f303 	mul.w	r3, r1, r3
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	440b      	add	r3, r1
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	e030      	b.n	8000fd0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d010      	beq.n	8000fa0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <SSD1306_Putc+0xfc>)
 8000f80:	881a      	ldrh	r2, [r3, #0]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	4413      	add	r3, r2
 8000f88:	b298      	uxth	r0, r3
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <SSD1306_Putc+0xfc>)
 8000f8c:	885a      	ldrh	r2, [r3, #2]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	4413      	add	r3, r2
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	79ba      	ldrb	r2, [r7, #6]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff ff45 	bl	8000e28 <SSD1306_DrawPixel>
 8000f9e:	e014      	b.n	8000fca <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <SSD1306_Putc+0xfc>)
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	b298      	uxth	r0, r3
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <SSD1306_Putc+0xfc>)
 8000fae:	885a      	ldrh	r2, [r3, #2]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b299      	uxth	r1, r3
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2301      	moveq	r3, #1
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	f7ff ff2f 	bl	8000e28 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d3c8      	bcc.n	8000f6e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	785b      	ldrb	r3, [r3, #1]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d3ad      	bcc.n	8000f4a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <SSD1306_Putc+0xfc>)
 8000ff0:	881a      	ldrh	r2, [r3, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <SSD1306_Putc+0xfc>)
 8000ffe:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001000:	79fb      	ldrb	r3, [r7, #7]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200004f8 	.word	0x200004f8

08001010 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	4613      	mov	r3, r2
 800101c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800101e:	e012      	b.n	8001046 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	79fa      	ldrb	r2, [r7, #7]
 8001026:	68b9      	ldr	r1, [r7, #8]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff71 	bl	8000f10 <SSD1306_Putc>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d002      	beq.n	8001040 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	e008      	b.n	8001052 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1e8      	bne.n	8001020 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	781b      	ldrb	r3, [r3, #0]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff feca 	bl	8000df8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001064:	f7ff fe9a 	bl	8000d9c <SSD1306_UpdateScreen>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <ssd1306_I2C_Init+0x24>)
 8001074:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001076:	e002      	b.n	800107e <ssd1306_I2C_Init+0x12>
		p--;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f9      	bne.n	8001078 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	0003d090 	.word	0x0003d090

08001094 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b0c7      	sub	sp, #284	; 0x11c
 8001098:	af02      	add	r7, sp, #8
 800109a:	4604      	mov	r4, r0
 800109c:	4608      	mov	r0, r1
 800109e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80010a2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80010a6:	600a      	str	r2, [r1, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80010b2:	4622      	mov	r2, r4
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010ba:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80010be:	4602      	mov	r2, r0
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010ca:	460a      	mov	r2, r1
 80010cc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80010ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010da:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80010de:	7812      	ldrb	r2, [r2, #0]
 80010e0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80010e8:	e015      	b.n	8001116 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80010ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	441a      	add	r2, r3
 80010fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010fe:	3301      	adds	r3, #1
 8001100:	7811      	ldrb	r1, [r2, #0]
 8001102:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001106:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800110a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800110c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001110:	3301      	adds	r3, #1
 8001112:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001116:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800111a:	b29b      	uxth	r3, r3
 800111c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001120:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001124:	8812      	ldrh	r2, [r2, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d8df      	bhi.n	80010ea <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800112a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800112e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b299      	uxth	r1, r3
 8001136:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800113a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	200a      	movs	r0, #10
 800114a:	9000      	str	r0, [sp, #0]
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <ssd1306_I2C_WriteMulti+0xc8>)
 800114e:	f000 fd77 	bl	8001c40 <HAL_I2C_Master_Transmit>
}
 8001152:	bf00      	nop
 8001154:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	20000030 	.word	0x20000030

08001160 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af02      	add	r7, sp, #8
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
 800116a:	460b      	mov	r3, r1
 800116c:	71bb      	strb	r3, [r7, #6]
 800116e:	4613      	mov	r3, r2
 8001170:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001176:	797b      	ldrb	r3, [r7, #5]
 8001178:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	b299      	uxth	r1, r3
 800117e:	f107 020c 	add.w	r2, r7, #12
 8001182:	230a      	movs	r3, #10
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2302      	movs	r3, #2
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <ssd1306_I2C_Write+0x38>)
 800118a:	f000 fd59 	bl	8001c40 <HAL_I2C_Master_Transmit>
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000030 	.word	0x20000030

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_MspInit+0x5c>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <HAL_MspInit+0x5c>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6193      	str	r3, [r2, #24]
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_MspInit+0x5c>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_MspInit+0x5c>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_MspInit+0x5c>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_MspInit+0x5c>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_MspInit+0x60>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_MspInit+0x60>)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000

08001200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <HAL_I2C_MspInit+0x74>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d125      	bne.n	800126c <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_I2C_MspInit+0x78>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a14      	ldr	r2, [pc, #80]	; (8001278 <HAL_I2C_MspInit+0x78>)
 8001226:	f043 0308 	orr.w	r3, r3, #8
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_I2C_MspInit+0x78>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001238:	23c0      	movs	r3, #192	; 0xc0
 800123a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123c:	2312      	movs	r3, #18
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	480b      	ldr	r0, [pc, #44]	; (800127c <HAL_I2C_MspInit+0x7c>)
 8001250:	f000 fa1e 	bl	8001690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_I2C_MspInit+0x78>)
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_I2C_MspInit+0x78>)
 800125a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800125e:	61d3      	str	r3, [r2, #28]
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_I2C_MspInit+0x78>)
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	3720      	adds	r7, #32
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40005400 	.word	0x40005400
 8001278:	40021000 	.word	0x40021000
 800127c:	40010c00 	.word	0x40010c00

08001280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <HAL_SPI_MspInit+0x88>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d12f      	bne.n	8001300 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_SPI_MspInit+0x8c>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_SPI_MspInit+0x8c>)
 80012a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_SPI_MspInit+0x8c>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_SPI_MspInit+0x8c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a13      	ldr	r2, [pc, #76]	; (800130c <HAL_SPI_MspInit+0x8c>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_SPI_MspInit+0x8c>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012d0:	23a0      	movs	r3, #160	; 0xa0
 80012d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	480b      	ldr	r0, [pc, #44]	; (8001310 <HAL_SPI_MspInit+0x90>)
 80012e4:	f000 f9d4 	bl	8001690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <HAL_SPI_MspInit+0x90>)
 80012fc:	f000 f9c8 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40013000 	.word	0x40013000
 800130c:	40021000 	.word	0x40021000
 8001310:	40010800 	.word	0x40010800

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <NMI_Handler+0x4>

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135a:	f000 f875 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}

08001362 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
	...

08001370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001370:	f7ff fff7 	bl	8001362 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001376:	490c      	ldr	r1, [pc, #48]	; (80013a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001378:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800138c:	4c09      	ldr	r4, [pc, #36]	; (80013b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139a:	f001 ffbb 	bl	8003314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139e:	f7fe fedf 	bl	8000160 <main>
  bx lr
 80013a2:	4770      	bx	lr
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80013ac:	080041a4 	.word	0x080041a4
  ldr r2, =_sbss
 80013b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80013b4:	20000504 	.word	0x20000504

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x28>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x28>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f92b 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	200f      	movs	r0, #15
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fee0 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f935 	bl	8001676 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 f90b 	bl	800163e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000008 	.word	0x20000008
 8001440:	20000010 	.word	0x20000010
 8001444:	2000000c 	.word	0x2000000c

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x1c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x20>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_IncTick+0x20>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000010 	.word	0x20000010
 8001468:	20000500 	.word	0x20000500

0800146c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <HAL_GetTick+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000500 	.word	0x20000500

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff fff0 	bl	800146c <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffe0 	bl	800146c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000010 	.word	0x20000010

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff90 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff49 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff5e 	bl	8001510 <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff90 	bl	8001580 <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5f 	bl	800152c <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffb0 	bl	80015e4 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b08b      	sub	sp, #44	; 0x2c
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a2:	e161      	b.n	8001968 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016a4:	2201      	movs	r2, #1
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	429a      	cmp	r2, r3
 80016be:	f040 8150 	bne.w	8001962 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a97      	ldr	r2, [pc, #604]	; (8001924 <HAL_GPIO_Init+0x294>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d05e      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016cc:	4a95      	ldr	r2, [pc, #596]	; (8001924 <HAL_GPIO_Init+0x294>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d875      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016d2:	4a95      	ldr	r2, [pc, #596]	; (8001928 <HAL_GPIO_Init+0x298>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d058      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016d8:	4a93      	ldr	r2, [pc, #588]	; (8001928 <HAL_GPIO_Init+0x298>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d86f      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016de:	4a93      	ldr	r2, [pc, #588]	; (800192c <HAL_GPIO_Init+0x29c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d052      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016e4:	4a91      	ldr	r2, [pc, #580]	; (800192c <HAL_GPIO_Init+0x29c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d869      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016ea:	4a91      	ldr	r2, [pc, #580]	; (8001930 <HAL_GPIO_Init+0x2a0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d04c      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016f0:	4a8f      	ldr	r2, [pc, #572]	; (8001930 <HAL_GPIO_Init+0x2a0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d863      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016f6:	4a8f      	ldr	r2, [pc, #572]	; (8001934 <HAL_GPIO_Init+0x2a4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d046      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016fc:	4a8d      	ldr	r2, [pc, #564]	; (8001934 <HAL_GPIO_Init+0x2a4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d85d      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 8001702:	2b12      	cmp	r3, #18
 8001704:	d82a      	bhi.n	800175c <HAL_GPIO_Init+0xcc>
 8001706:	2b12      	cmp	r3, #18
 8001708:	d859      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <HAL_GPIO_Init+0x80>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	0800178b 	.word	0x0800178b
 8001714:	08001765 	.word	0x08001765
 8001718:	08001777 	.word	0x08001777
 800171c:	080017b9 	.word	0x080017b9
 8001720:	080017bf 	.word	0x080017bf
 8001724:	080017bf 	.word	0x080017bf
 8001728:	080017bf 	.word	0x080017bf
 800172c:	080017bf 	.word	0x080017bf
 8001730:	080017bf 	.word	0x080017bf
 8001734:	080017bf 	.word	0x080017bf
 8001738:	080017bf 	.word	0x080017bf
 800173c:	080017bf 	.word	0x080017bf
 8001740:	080017bf 	.word	0x080017bf
 8001744:	080017bf 	.word	0x080017bf
 8001748:	080017bf 	.word	0x080017bf
 800174c:	080017bf 	.word	0x080017bf
 8001750:	080017bf 	.word	0x080017bf
 8001754:	0800176d 	.word	0x0800176d
 8001758:	08001781 	.word	0x08001781
 800175c:	4a76      	ldr	r2, [pc, #472]	; (8001938 <HAL_GPIO_Init+0x2a8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001762:	e02c      	b.n	80017be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e029      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	3304      	adds	r3, #4
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e024      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	3308      	adds	r3, #8
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e01f      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	330c      	adds	r3, #12
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e01a      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001792:	2304      	movs	r3, #4
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e013      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	611a      	str	r2, [r3, #16]
          break;
 80017aa:	e009      	b.n	80017c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ac:	2308      	movs	r3, #8
 80017ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	615a      	str	r2, [r3, #20]
          break;
 80017b6:	e003      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          break;
 80017be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2bff      	cmp	r3, #255	; 0xff
 80017c4:	d801      	bhi.n	80017ca <HAL_GPIO_Init+0x13a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	e001      	b.n	80017ce <HAL_GPIO_Init+0x13e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3304      	adds	r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2bff      	cmp	r3, #255	; 0xff
 80017d4:	d802      	bhi.n	80017dc <HAL_GPIO_Init+0x14c>
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	e002      	b.n	80017e2 <HAL_GPIO_Init+0x152>
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	3b08      	subs	r3, #8
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	210f      	movs	r1, #15
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	401a      	ands	r2, r3
 80017f4:	6a39      	ldr	r1, [r7, #32]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	431a      	orrs	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80a9 	beq.w	8001962 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_GPIO_Init+0x2ac>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a49      	ldr	r2, [pc, #292]	; (800193c <HAL_GPIO_Init+0x2ac>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_GPIO_Init+0x2ac>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001828:	4a45      	ldr	r2, [pc, #276]	; (8001940 <HAL_GPIO_Init+0x2b0>)
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a3d      	ldr	r2, [pc, #244]	; (8001944 <HAL_GPIO_Init+0x2b4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d00d      	beq.n	8001870 <HAL_GPIO_Init+0x1e0>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a3c      	ldr	r2, [pc, #240]	; (8001948 <HAL_GPIO_Init+0x2b8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d007      	beq.n	800186c <HAL_GPIO_Init+0x1dc>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a3b      	ldr	r2, [pc, #236]	; (800194c <HAL_GPIO_Init+0x2bc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_GPIO_Init+0x1d8>
 8001864:	2302      	movs	r3, #2
 8001866:	e004      	b.n	8001872 <HAL_GPIO_Init+0x1e2>
 8001868:	2303      	movs	r3, #3
 800186a:	e002      	b.n	8001872 <HAL_GPIO_Init+0x1e2>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_GPIO_Init+0x1e2>
 8001870:	2300      	movs	r3, #0
 8001872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001874:	f002 0203 	and.w	r2, r2, #3
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	4093      	lsls	r3, r2
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001882:	492f      	ldr	r1, [pc, #188]	; (8001940 <HAL_GPIO_Init+0x2b0>)
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800189c:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	492b      	ldr	r1, [pc, #172]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	4927      	ldr	r1, [pc, #156]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	4921      	ldr	r1, [pc, #132]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60cb      	str	r3, [r1, #12]
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	43db      	mvns	r3, r3
 80018da:	491d      	ldr	r1, [pc, #116]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 80018dc:	4013      	ands	r3, r2
 80018de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4917      	ldr	r1, [pc, #92]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4913      	ldr	r1, [pc, #76]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 8001904:	4013      	ands	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01f      	beq.n	8001954 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	490d      	ldr	r1, [pc, #52]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
 8001920:	e01f      	b.n	8001962 <HAL_GPIO_Init+0x2d2>
 8001922:	bf00      	nop
 8001924:	10320000 	.word	0x10320000
 8001928:	10310000 	.word	0x10310000
 800192c:	10220000 	.word	0x10220000
 8001930:	10210000 	.word	0x10210000
 8001934:	10120000 	.word	0x10120000
 8001938:	10110000 	.word	0x10110000
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	40010800 	.word	0x40010800
 8001948:	40010c00 	.word	0x40010c00
 800194c:	40011000 	.word	0x40011000
 8001950:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	43db      	mvns	r3, r3
 800195c:	4909      	ldr	r1, [pc, #36]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 800195e:	4013      	ands	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f ae96 	bne.w	80016a4 <HAL_GPIO_Init+0x14>
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	372c      	adds	r7, #44	; 0x2c
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a4:	e003      	b.n	80019ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e12b      	b.n	8001c22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fc0e 	bl	8001200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a1c:	f001 f960 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8001a20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a81      	ldr	r2, [pc, #516]	; (8001c2c <HAL_I2C_Init+0x274>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d807      	bhi.n	8001a3c <HAL_I2C_Init+0x84>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4a80      	ldr	r2, [pc, #512]	; (8001c30 <HAL_I2C_Init+0x278>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	bf94      	ite	ls
 8001a34:	2301      	movls	r3, #1
 8001a36:	2300      	movhi	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	e006      	b.n	8001a4a <HAL_I2C_Init+0x92>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4a7d      	ldr	r2, [pc, #500]	; (8001c34 <HAL_I2C_Init+0x27c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bf94      	ite	ls
 8001a44:	2301      	movls	r3, #1
 8001a46:	2300      	movhi	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0e7      	b.n	8001c22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4a78      	ldr	r2, [pc, #480]	; (8001c38 <HAL_I2C_Init+0x280>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0c9b      	lsrs	r3, r3, #18
 8001a5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a6a      	ldr	r2, [pc, #424]	; (8001c2c <HAL_I2C_Init+0x274>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d802      	bhi.n	8001a8c <HAL_I2C_Init+0xd4>
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	e009      	b.n	8001aa0 <HAL_I2C_Init+0xe8>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	4a69      	ldr	r2, [pc, #420]	; (8001c3c <HAL_I2C_Init+0x284>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	099b      	lsrs	r3, r3, #6
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ab2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	495c      	ldr	r1, [pc, #368]	; (8001c2c <HAL_I2C_Init+0x274>)
 8001abc:	428b      	cmp	r3, r1
 8001abe:	d819      	bhi.n	8001af4 <HAL_I2C_Init+0x13c>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1e59      	subs	r1, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ace:	1c59      	adds	r1, r3, #1
 8001ad0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00a      	beq.n	8001af0 <HAL_I2C_Init+0x138>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1e59      	subs	r1, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aee:	e051      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e04f      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <HAL_I2C_Init+0x168>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1e58      	subs	r0, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6859      	ldr	r1, [r3, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	440b      	add	r3, r1
 8001b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	e012      	b.n	8001b46 <HAL_I2C_Init+0x18e>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1e58      	subs	r0, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	0099      	lsls	r1, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Init+0x196>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e022      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10e      	bne.n	8001b74 <HAL_I2C_Init+0x1bc>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1e58      	subs	r0, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6859      	ldr	r1, [r3, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	440b      	add	r3, r1
 8001b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b72:	e00f      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	0099      	lsls	r1, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	6809      	ldr	r1, [r1, #0]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6911      	ldr	r1, [r2, #16]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68d2      	ldr	r2, [r2, #12]
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	000186a0 	.word	0x000186a0
 8001c30:	001e847f 	.word	0x001e847f
 8001c34:	003d08ff 	.word	0x003d08ff
 8001c38:	431bde83 	.word	0x431bde83
 8001c3c:	10624dd3 	.word	0x10624dd3

08001c40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	817b      	strh	r3, [r7, #10]
 8001c50:	4613      	mov	r3, r2
 8001c52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff fc0a 	bl	800146c <HAL_GetTick>
 8001c58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	f040 80e0 	bne.w	8001e28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2319      	movs	r3, #25
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4970      	ldr	r1, [pc, #448]	; (8001e34 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fa92 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e0d3      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_I2C_Master_Transmit+0x50>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e0cc      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d007      	beq.n	8001cb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2221      	movs	r2, #33	; 0x21
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2210      	movs	r2, #16
 8001cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	893a      	ldrh	r2, [r7, #8]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4a50      	ldr	r2, [pc, #320]	; (8001e38 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cf8:	8979      	ldrh	r1, [r7, #10]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	6a3a      	ldr	r2, [r7, #32]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f9ca 	bl	8002098 <I2C_MasterRequestWrite>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e08d      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d24:	e066      	b.n	8001df4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	6a39      	ldr	r1, [r7, #32]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fb50 	bl	80023d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00d      	beq.n	8001d52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d107      	bne.n	8001d4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e06b      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_I2C_Master_Transmit+0x188>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d017      	beq.n	8001dc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	6a39      	ldr	r1, [r7, #32]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fb47 	bl	8002460 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00d      	beq.n	8001df4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d107      	bne.n	8001df0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e01a      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d194      	bne.n	8001d26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e000      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	00100002 	.word	0x00100002
 8001e38:	ffff0000 	.word	0xffff0000

08001e3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff fb0e 	bl	800146c <HAL_GetTick>
 8001e50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	f040 8111 	bne.w	8002086 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2319      	movs	r3, #25
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4988      	ldr	r1, [pc, #544]	; (8002090 <HAL_I2C_IsDeviceReady+0x254>)
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f994 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e104      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_I2C_IsDeviceReady+0x50>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e0fd      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d007      	beq.n	8001eb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2224      	movs	r2, #36	; 0x24
 8001ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4a70      	ldr	r2, [pc, #448]	; (8002094 <HAL_I2C_IsDeviceReady+0x258>)
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f952 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0c:	d103      	bne.n	8001f16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e0b6      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fa9f 	bl	800146c <HAL_GetTick>
 8001f2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f54:	bf0c      	ite	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	2300      	movne	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f5e:	e025      	b.n	8001fac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f60:	f7ff fa84 	bl	800146c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d302      	bcc.n	8001f76 <HAL_I2C_IsDeviceReady+0x13a>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d103      	bne.n	8001f7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	22a0      	movs	r2, #160	; 0xa0
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_I2C_IsDeviceReady+0x188>
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <HAL_I2C_IsDeviceReady+0x188>
 8001fbe:	7dbb      	ldrb	r3, [r7, #22]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0cd      	beq.n	8001f60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d129      	bne.n	800202e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2319      	movs	r3, #25
 8002006:	2201      	movs	r2, #1
 8002008:	4921      	ldr	r1, [pc, #132]	; (8002090 <HAL_I2C_IsDeviceReady+0x254>)
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f8c6 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e036      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e02c      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002046:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2319      	movs	r3, #25
 800204e:	2201      	movs	r2, #1
 8002050:	490f      	ldr	r1, [pc, #60]	; (8002090 <HAL_I2C_IsDeviceReady+0x254>)
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f8a2 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e012      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	3301      	adds	r3, #1
 8002066:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	f4ff af32 	bcc.w	8001ed6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	00100002 	.word	0x00100002
 8002094:	ffff0000 	.word	0xffff0000

08002098 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	460b      	mov	r3, r1
 80020a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d006      	beq.n	80020c2 <I2C_MasterRequestWrite+0x2a>
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d003      	beq.n	80020c2 <I2C_MasterRequestWrite+0x2a>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020c0:	d108      	bne.n	80020d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e00b      	b.n	80020ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	2b12      	cmp	r3, #18
 80020da:	d107      	bne.n	80020ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f84f 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002112:	d103      	bne.n	800211c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e035      	b.n	800218c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002128:	d108      	bne.n	800213c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	e01b      	b.n	8002174 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800213c:	897b      	ldrh	r3, [r7, #10]
 800213e:	11db      	asrs	r3, r3, #7
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 0306 	and.w	r3, r3, #6
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f063 030f 	orn	r3, r3, #15
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	490e      	ldr	r1, [pc, #56]	; (8002194 <I2C_MasterRequestWrite+0xfc>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f898 	bl	8002290 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e010      	b.n	800218c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800216a:	897b      	ldrh	r3, [r7, #10]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <I2C_MasterRequestWrite+0x100>)
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f888 	bl	8002290 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	00010008 	.word	0x00010008
 8002198:	00010002 	.word	0x00010002

0800219c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ac:	e048      	b.n	8002240 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d044      	beq.n	8002240 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b6:	f7ff f959 	bl	800146c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d302      	bcc.n	80021cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d139      	bne.n	8002240 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	0c1b      	lsrs	r3, r3, #16
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10d      	bne.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	43da      	mvns	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	4013      	ands	r3, r2
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	e00c      	b.n	800220c <I2C_WaitOnFlagUntilTimeout+0x70>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	43da      	mvns	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	4013      	ands	r3, r2
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	429a      	cmp	r2, r3
 8002210:	d116      	bne.n	8002240 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0220 	orr.w	r2, r3, #32
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e023      	b.n	8002288 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10d      	bne.n	8002266 <I2C_WaitOnFlagUntilTimeout+0xca>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	43da      	mvns	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4013      	ands	r3, r2
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	e00c      	b.n	8002280 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	43da      	mvns	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	4013      	ands	r3, r2
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	429a      	cmp	r2, r3
 8002284:	d093      	beq.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800229e:	e071      	b.n	8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ae:	d123      	bne.n	80022f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f043 0204 	orr.w	r2, r3, #4
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e067      	b.n	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fe:	d041      	beq.n	8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002300:	f7ff f8b4 	bl	800146c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	d302      	bcc.n	8002316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d136      	bne.n	8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d10c      	bne.n	800233a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4013      	ands	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf14      	ite	ne
 8002332:	2301      	movne	r3, #1
 8002334:	2300      	moveq	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	e00b      	b.n	8002352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	43da      	mvns	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4013      	ands	r3, r2
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f043 0220 	orr.w	r2, r3, #32
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e021      	b.n	80023c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	0c1b      	lsrs	r3, r3, #16
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d10c      	bne.n	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	43da      	mvns	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4013      	ands	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e00b      	b.n	80023c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4013      	ands	r3, r2
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bf14      	ite	ne
 80023ba:	2301      	movne	r3, #1
 80023bc:	2300      	moveq	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f47f af6d 	bne.w	80022a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023dc:	e034      	b.n	8002448 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f886 	bl	80024f0 <I2C_IsAcknowledgeFailed>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e034      	b.n	8002458 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d028      	beq.n	8002448 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f6:	f7ff f839 	bl	800146c <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	429a      	cmp	r2, r3
 8002404:	d302      	bcc.n	800240c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d11d      	bne.n	8002448 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b80      	cmp	r3, #128	; 0x80
 8002418:	d016      	beq.n	8002448 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e007      	b.n	8002458 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	2b80      	cmp	r3, #128	; 0x80
 8002454:	d1c3      	bne.n	80023de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800246c:	e034      	b.n	80024d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f83e 	bl	80024f0 <I2C_IsAcknowledgeFailed>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e034      	b.n	80024e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d028      	beq.n	80024d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002486:	f7fe fff1 	bl	800146c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	429a      	cmp	r2, r3
 8002494:	d302      	bcc.n	800249c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d11d      	bne.n	80024d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d016      	beq.n	80024d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e007      	b.n	80024e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d1c3      	bne.n	800246e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002506:	d11b      	bne.n	8002540 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002510:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f043 0204 	orr.w	r2, r3, #4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e272      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8087 	beq.w	800267a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800256c:	4b92      	ldr	r3, [pc, #584]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b04      	cmp	r3, #4
 8002576:	d00c      	beq.n	8002592 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002578:	4b8f      	ldr	r3, [pc, #572]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d112      	bne.n	80025aa <HAL_RCC_OscConfig+0x5e>
 8002584:	4b8c      	ldr	r3, [pc, #560]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002590:	d10b      	bne.n	80025aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002592:	4b89      	ldr	r3, [pc, #548]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d06c      	beq.n	8002678 <HAL_RCC_OscConfig+0x12c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d168      	bne.n	8002678 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e24c      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x76>
 80025b4:	4b80      	ldr	r3, [pc, #512]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a7f      	ldr	r2, [pc, #508]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	e02e      	b.n	8002620 <HAL_RCC_OscConfig+0xd4>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x98>
 80025ca:	4b7b      	ldr	r3, [pc, #492]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a7a      	ldr	r2, [pc, #488]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b78      	ldr	r3, [pc, #480]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a77      	ldr	r2, [pc, #476]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e01d      	b.n	8002620 <HAL_RCC_OscConfig+0xd4>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0xbc>
 80025ee:	4b72      	ldr	r3, [pc, #456]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a71      	ldr	r2, [pc, #452]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b6f      	ldr	r3, [pc, #444]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6e      	ldr	r2, [pc, #440]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0xd4>
 8002608:	4b6b      	ldr	r3, [pc, #428]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a6a      	ldr	r2, [pc, #424]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b68      	ldr	r3, [pc, #416]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a67      	ldr	r2, [pc, #412]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe ff20 	bl	800146c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe ff1c 	bl	800146c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e200      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b5d      	ldr	r3, [pc, #372]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0xe4>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe ff0c 	bl	800146c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe ff08 	bl	800146c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1ec      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x10c>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002686:	4b4c      	ldr	r3, [pc, #304]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002692:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	d11c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x18c>
 800269e:	4b46      	ldr	r3, [pc, #280]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d116      	bne.n	80026d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	4b43      	ldr	r3, [pc, #268]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x176>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e1c0      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4939      	ldr	r1, [pc, #228]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	e03a      	b.n	800274e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e0:	4b36      	ldr	r3, [pc, #216]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe fec1 	bl	800146c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ee:	f7fe febd 	bl	800146c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1a1      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4927      	ldr	r1, [pc, #156]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
 8002720:	e015      	b.n	800274e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_RCC_OscConfig+0x270>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fea0 	bl	800146c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002730:	f7fe fe9c 	bl	800146c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e180      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d03a      	beq.n	80027d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d019      	beq.n	8002796 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_RCC_OscConfig+0x274>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7fe fe80 	bl	800146c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe fe7c 	bl	800146c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e160      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_RCC_OscConfig+0x26c>)
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800278e:	2001      	movs	r0, #1
 8002790:	f000 faba 	bl	8002d08 <RCC_Delay>
 8002794:	e01c      	b.n	80027d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_RCC_OscConfig+0x274>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fe fe66 	bl	800146c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a2:	e00f      	b.n	80027c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fe fe62 	bl	800146c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d908      	bls.n	80027c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e146      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	42420000 	.word	0x42420000
 80027c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c4:	4b92      	ldr	r3, [pc, #584]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e9      	bne.n	80027a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a6 	beq.w	800292a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e2:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a87      	ldr	r2, [pc, #540]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	61d3      	str	r3, [r2, #28]
 80027fa:	4b85      	ldr	r3, [pc, #532]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	4b82      	ldr	r3, [pc, #520]	; (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d118      	bne.n	8002848 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002816:	4b7f      	ldr	r3, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7e      	ldr	r2, [pc, #504]	; (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002822:	f7fe fe23 	bl	800146c <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800282a:	f7fe fe1f 	bl	800146c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b64      	cmp	r3, #100	; 0x64
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e103      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	4b75      	ldr	r3, [pc, #468]	; (8002a14 <HAL_RCC_OscConfig+0x4c8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x312>
 8002850:	4b6f      	ldr	r3, [pc, #444]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a6e      	ldr	r2, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6213      	str	r3, [r2, #32]
 800285c:	e02d      	b.n	80028ba <HAL_RCC_OscConfig+0x36e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0x334>
 8002866:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a69      	ldr	r2, [pc, #420]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	6213      	str	r3, [r2, #32]
 8002872:	4b67      	ldr	r3, [pc, #412]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a66      	ldr	r2, [pc, #408]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	f023 0304 	bic.w	r3, r3, #4
 800287c:	6213      	str	r3, [r2, #32]
 800287e:	e01c      	b.n	80028ba <HAL_RCC_OscConfig+0x36e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b05      	cmp	r3, #5
 8002886:	d10c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x356>
 8002888:	4b61      	ldr	r3, [pc, #388]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a60      	ldr	r2, [pc, #384]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	4b5e      	ldr	r3, [pc, #376]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a5d      	ldr	r2, [pc, #372]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	e00b      	b.n	80028ba <HAL_RCC_OscConfig+0x36e>
 80028a2:	4b5b      	ldr	r3, [pc, #364]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a5a      	ldr	r2, [pc, #360]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	6213      	str	r3, [r2, #32]
 80028ae:	4b58      	ldr	r3, [pc, #352]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a57      	ldr	r2, [pc, #348]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f023 0304 	bic.w	r3, r3, #4
 80028b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d015      	beq.n	80028ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c2:	f7fe fdd3 	bl	800146c <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c8:	e00a      	b.n	80028e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7fe fdcf 	bl	800146c <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e0b1      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e0:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ee      	beq.n	80028ca <HAL_RCC_OscConfig+0x37e>
 80028ec:	e014      	b.n	8002918 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fdbd 	bl	800146c <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f6:	f7fe fdb9 	bl	800146c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	; 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e09b      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290c:	4b40      	ldr	r3, [pc, #256]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ee      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291e:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4a3b      	ldr	r2, [pc, #236]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002928:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8087 	beq.w	8002a42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b08      	cmp	r3, #8
 800293e:	d061      	beq.n	8002a04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d146      	bne.n	80029d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002948:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <HAL_RCC_OscConfig+0x4cc>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7fe fd8d 	bl	800146c <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002956:	f7fe fd89 	bl	800146c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e06d      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002968:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297c:	d108      	bne.n	8002990 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800297e:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4921      	ldr	r1, [pc, #132]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002990:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a19      	ldr	r1, [r3, #32]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	430b      	orrs	r3, r1
 80029a2:	491b      	ldr	r1, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCC_OscConfig+0x4cc>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe fd5d 	bl	800146c <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe fd59 	bl	800146c <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e03d      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x46a>
 80029d4:	e035      	b.n	8002a42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_RCC_OscConfig+0x4cc>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe fd46 	bl	800146c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe fd42 	bl	800146c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e026      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x498>
 8002a02:	e01e      	b.n	8002a42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e019      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40007000 	.word	0x40007000
 8002a18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_OscConfig+0x500>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0d0      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b6a      	ldr	r3, [pc, #424]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d910      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b67      	ldr	r3, [pc, #412]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4965      	ldr	r1, [pc, #404]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d040      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d115      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e073      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06b      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4936      	ldr	r1, [pc, #216]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b40:	f7fe fc94 	bl	800146c <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7fe fc90 	bl	800146c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e053      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d210      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0207 	bic.w	r2, r3, #7
 8002b86:	4922      	ldr	r1, [pc, #136]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 f821 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	490a      	ldr	r1, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1cc>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1d0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe fbf2 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40022000 	.word	0x40022000
 8002c14:	40021000 	.word	0x40021000
 8002c18:	08004170 	.word	0x08004170
 8002c1c:	20000008 	.word	0x20000008
 8002c20:	2000000c 	.word	0x2000000c

08002c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	2300      	movs	r3, #0
 8002c38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d002      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x30>
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x36>
 8002c52:	e027      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c56:	613b      	str	r3, [r7, #16]
      break;
 8002c58:	e027      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	0c9b      	lsrs	r3, r3, #18
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c64:	5cd3      	ldrb	r3, [r2, r3]
 8002c66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d010      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	0c5b      	lsrs	r3, r3, #17
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c7e:	5cd3      	ldrb	r3, [r2, r3]
 8002c80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c86:	fb03 f202 	mul.w	r2, r3, r2
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e004      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	613b      	str	r3, [r7, #16]
      break;
 8002ca2:	e002      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ca6:	613b      	str	r3, [r7, #16]
      break;
 8002ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002caa:	693b      	ldr	r3, [r7, #16]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	007a1200 	.word	0x007a1200
 8002cc0:	08004188 	.word	0x08004188
 8002cc4:	08004198 	.word	0x08004198
 8002cc8:	003d0900 	.word	0x003d0900

08002ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd0:	4b02      	ldr	r3, [pc, #8]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	20000008 	.word	0x20000008

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce4:	f7ff fff2 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	08004180 	.word	0x08004180

08002d08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <RCC_Delay+0x34>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <RCC_Delay+0x38>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0a5b      	lsrs	r3, r3, #9
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d24:	bf00      	nop
  }
  while (Delay --);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1e5a      	subs	r2, r3, #1
 8002d2a:	60fa      	str	r2, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f9      	bne.n	8002d24 <RCC_Delay+0x1c>
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000008 	.word	0x20000008
 8002d40:	10624dd3 	.word	0x10624dd3

08002d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e076      	b.n	8002e44 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d108      	bne.n	8002d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d66:	d009      	beq.n	8002d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61da      	str	r2, [r3, #28]
 8002d6e:	e005      	b.n	8002d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fe fa72 	bl	8001280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e00:	ea42 0103 	orr.w	r1, r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	0c1a      	lsrs	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f002 0204 	and.w	r2, r2, #4
 8002e22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e5e:	f7fe fb05 	bl	800146c <HAL_GetTick>
 8002e62:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e6a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e76:	7ffb      	ldrb	r3, [r7, #31]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d00c      	beq.n	8002e96 <HAL_SPI_TransmitReceive+0x4a>
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e82:	d106      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x46>
 8002e8c:	7ffb      	ldrb	r3, [r7, #31]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d001      	beq.n	8002e96 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
 8002e94:	e17f      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_SPI_TransmitReceive+0x5c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_SPI_TransmitReceive+0x5c>
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e174      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x6e>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e16d      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34a>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d003      	beq.n	8002ed6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2205      	movs	r2, #5
 8002ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	887a      	ldrh	r2, [r7, #2]
 8002ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	887a      	ldrh	r2, [r7, #2]
 8002efe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b40      	cmp	r3, #64	; 0x40
 8002f18:	d007      	beq.n	8002f2a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f32:	d17e      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_SPI_TransmitReceive+0xf6>
 8002f3c:	8afb      	ldrh	r3, [r7, #22]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d16c      	bne.n	800301c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	881a      	ldrh	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	1c9a      	adds	r2, r3, #2
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f66:	e059      	b.n	800301c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d11b      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x162>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d016      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x162>
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d113      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	1c9a      	adds	r2, r3, #2
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d119      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x1a4>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d014      	beq.n	8002ff0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	b292      	uxth	r2, r2
 8002fd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	1c9a      	adds	r2, r3, #2
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fec:	2301      	movs	r3, #1
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ff0:	f7fe fa3c 	bl	800146c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d80d      	bhi.n	800301c <HAL_SPI_TransmitReceive+0x1d0>
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d009      	beq.n	800301c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e0bc      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1a0      	bne.n	8002f68 <HAL_SPI_TransmitReceive+0x11c>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d19b      	bne.n	8002f68 <HAL_SPI_TransmitReceive+0x11c>
 8003030:	e082      	b.n	8003138 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x1f4>
 800303a:	8afb      	ldrh	r3, [r7, #22]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d171      	bne.n	8003124 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	7812      	ldrb	r2, [r2, #0]
 800304c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003066:	e05d      	b.n	8003124 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d11c      	bne.n	80030b0 <HAL_SPI_TransmitReceive+0x264>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <HAL_SPI_TransmitReceive+0x264>
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	2b01      	cmp	r3, #1
 8003084:	d114      	bne.n	80030b0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d119      	bne.n	80030f2 <HAL_SPI_TransmitReceive+0x2a6>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d014      	beq.n	80030f2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030ee:	2301      	movs	r3, #1
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030f2:	f7fe f9bb 	bl	800146c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fe:	429a      	cmp	r2, r3
 8003100:	d803      	bhi.n	800310a <HAL_SPI_TransmitReceive+0x2be>
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d102      	bne.n	8003110 <HAL_SPI_TransmitReceive+0x2c4>
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	2b00      	cmp	r3, #0
 800310e:	d109      	bne.n	8003124 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e038      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d19c      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x21c>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d197      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003138:	6a3a      	ldr	r2, [r7, #32]
 800313a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f8b7 	bl	80032b0 <SPI_EndRxTxTransaction>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e01d      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003194:	2300      	movs	r3, #0
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3728      	adds	r7, #40	; 0x28
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031b0:	f7fe f95c 	bl	800146c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	4413      	add	r3, r2
 80031be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031c0:	f7fe f954 	bl	800146c <HAL_GetTick>
 80031c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031c6:	4b39      	ldr	r3, [pc, #228]	; (80032ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	015b      	lsls	r3, r3, #5
 80031cc:	0d1b      	lsrs	r3, r3, #20
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031d6:	e054      	b.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d050      	beq.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031e0:	f7fe f944 	bl	800146c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d902      	bls.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d13d      	bne.n	8003272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800320e:	d111      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003218:	d004      	beq.n	8003224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003222:	d107      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323c:	d10f      	bne.n	800325e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800325c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e017      	b.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3b01      	subs	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4013      	ands	r3, r2
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	429a      	cmp	r2, r3
 800329e:	d19b      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000008 	.word	0x20000008

080032b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2201      	movs	r2, #1
 80032c4:	2102      	movs	r1, #2
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7ff ff6a 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f043 0220 	orr.w	r2, r3, #32
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e013      	b.n	800330a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	2180      	movs	r1, #128	; 0x80
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff ff57 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e000      	b.n	800330a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	2600      	movs	r6, #0
 8003318:	4d0c      	ldr	r5, [pc, #48]	; (800334c <__libc_init_array+0x38>)
 800331a:	4c0d      	ldr	r4, [pc, #52]	; (8003350 <__libc_init_array+0x3c>)
 800331c:	1b64      	subs	r4, r4, r5
 800331e:	10a4      	asrs	r4, r4, #2
 8003320:	42a6      	cmp	r6, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	f000 f822 	bl	800336c <_init>
 8003328:	2600      	movs	r6, #0
 800332a:	4d0a      	ldr	r5, [pc, #40]	; (8003354 <__libc_init_array+0x40>)
 800332c:	4c0a      	ldr	r4, [pc, #40]	; (8003358 <__libc_init_array+0x44>)
 800332e:	1b64      	subs	r4, r4, r5
 8003330:	10a4      	asrs	r4, r4, #2
 8003332:	42a6      	cmp	r6, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	f855 3b04 	ldr.w	r3, [r5], #4
 800333c:	4798      	blx	r3
 800333e:	3601      	adds	r6, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	f855 3b04 	ldr.w	r3, [r5], #4
 8003346:	4798      	blx	r3
 8003348:	3601      	adds	r6, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	0800419c 	.word	0x0800419c
 8003350:	0800419c 	.word	0x0800419c
 8003354:	0800419c 	.word	0x0800419c
 8003358:	080041a0 	.word	0x080041a0

0800335c <memset>:
 800335c:	4603      	mov	r3, r0
 800335e:	4402      	add	r2, r0
 8003360:	4293      	cmp	r3, r2
 8003362:	d100      	bne.n	8003366 <memset+0xa>
 8003364:	4770      	bx	lr
 8003366:	f803 1b01 	strb.w	r1, [r3], #1
 800336a:	e7f9      	b.n	8003360 <memset+0x4>

0800336c <_init>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	bf00      	nop
 8003370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003372:	bc08      	pop	{r3}
 8003374:	469e      	mov	lr, r3
 8003376:	4770      	bx	lr

08003378 <_fini>:
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	bf00      	nop
 800337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337e:	bc08      	pop	{r3}
 8003380:	469e      	mov	lr, r3
 8003382:	4770      	bx	lr
