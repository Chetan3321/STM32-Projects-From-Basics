
STM32_Interfacing_RFID_RC522.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001e10  08001e10  00011e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e34  08001e34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e34  08001e34  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e34  08001e34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e34  08001e34  00011e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08001e48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001e48  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059af  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001447  00000000  00000000  000259e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  00026e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  00027490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164ca  00000000  00000000  00027a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006fad  00000000  00000000  0003df12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ea9d  00000000  00000000  00044ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c395c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000183c  00000000  00000000  000c39ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001df8 	.word	0x08001df8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001df8 	.word	0x08001df8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc62 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f880 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8fa 	bl	8000350 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f8c2 	bl	80002e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000160:	f000 fa30 	bl	80005c4 <MFRC522_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = MFRC522_Request(PICC_REQIDL, str);
 8000164:	4938      	ldr	r1, [pc, #224]	; (8000248 <main+0xfc>)
 8000166:	2026      	movs	r0, #38	; 0x26
 8000168:	f000 fb23 	bl	80007b2 <MFRC522_Request>
 800016c:	4603      	mov	r3, r0
 800016e:	461a      	mov	r2, r3
 8000170:	4b36      	ldr	r3, [pc, #216]	; (800024c <main+0x100>)
 8000172:	701a      	strb	r2, [r3, #0]
	  status = MFRC522_Anticoll(str);
 8000174:	4834      	ldr	r0, [pc, #208]	; (8000248 <main+0xfc>)
 8000176:	f000 fb41 	bl	80007fc <MFRC522_Anticoll>
 800017a:	4603      	mov	r3, r0
 800017c:	461a      	mov	r2, r3
 800017e:	4b33      	ldr	r3, [pc, #204]	; (800024c <main+0x100>)
 8000180:	701a      	strb	r2, [r3, #0]
	  memcpy(sNum, str, 5);
 8000182:	4b33      	ldr	r3, [pc, #204]	; (8000250 <main+0x104>)
 8000184:	4a30      	ldr	r2, [pc, #192]	; (8000248 <main+0xfc>)
 8000186:	e892 0003 	ldmia.w	r2, {r0, r1}
 800018a:	6018      	str	r0, [r3, #0]
 800018c:	3304      	adds	r3, #4
 800018e:	7019      	strb	r1, [r3, #0]
	  HAL_Delay(100);
 8000190:	2064      	movs	r0, #100	; 0x64
 8000192:	f000 fca3 	bl	8000adc <HAL_Delay>

	  if((sNum[0]==131) && (sNum[1]==49) && (sNum[2]==132) && (sNum[3]==228) && (sNum[4]==210) )
 8000196:	4b2e      	ldr	r3, [pc, #184]	; (8000250 <main+0x104>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	2b83      	cmp	r3, #131	; 0x83
 800019c:	d124      	bne.n	80001e8 <main+0x9c>
 800019e:	4b2c      	ldr	r3, [pc, #176]	; (8000250 <main+0x104>)
 80001a0:	785b      	ldrb	r3, [r3, #1]
 80001a2:	2b31      	cmp	r3, #49	; 0x31
 80001a4:	d120      	bne.n	80001e8 <main+0x9c>
 80001a6:	4b2a      	ldr	r3, [pc, #168]	; (8000250 <main+0x104>)
 80001a8:	789b      	ldrb	r3, [r3, #2]
 80001aa:	2b84      	cmp	r3, #132	; 0x84
 80001ac:	d11c      	bne.n	80001e8 <main+0x9c>
 80001ae:	4b28      	ldr	r3, [pc, #160]	; (8000250 <main+0x104>)
 80001b0:	78db      	ldrb	r3, [r3, #3]
 80001b2:	2be4      	cmp	r3, #228	; 0xe4
 80001b4:	d118      	bne.n	80001e8 <main+0x9c>
 80001b6:	4b26      	ldr	r3, [pc, #152]	; (8000250 <main+0x104>)
 80001b8:	791b      	ldrb	r3, [r3, #4]
 80001ba:	2bd2      	cmp	r3, #210	; 0xd2
 80001bc:	d114      	bne.n	80001e8 <main+0x9c>
	  {
	    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c4:	4823      	ldr	r0, [pc, #140]	; (8000254 <main+0x108>)
 80001c6:	f000 ff0d 	bl	8000fe4 <HAL_GPIO_WritePin>
	    HAL_Delay(2000);
 80001ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001ce:	f000 fc85 	bl	8000adc <HAL_Delay>
	    memset(sNum, 0, sizeof(sNum));
 80001d2:	2205      	movs	r2, #5
 80001d4:	2100      	movs	r1, #0
 80001d6:	481e      	ldr	r0, [pc, #120]	; (8000250 <main+0x104>)
 80001d8:	f001 fe06 	bl	8001de8 <memset>
	    memset(str, 0, sizeof(str));
 80001dc:	2210      	movs	r2, #16
 80001de:	2100      	movs	r1, #0
 80001e0:	4819      	ldr	r0, [pc, #100]	; (8000248 <main+0xfc>)
 80001e2:	f001 fe01 	bl	8001de8 <memset>
 80001e6:	e02e      	b.n	8000246 <main+0xfa>
	  }
	  else if((sNum[0]==147) && (sNum[1]==32) && (sNum[2]==104) && (sNum[3]==163) && (sNum[4]==124) )
 80001e8:	4b19      	ldr	r3, [pc, #100]	; (8000250 <main+0x104>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	2b93      	cmp	r3, #147	; 0x93
 80001ee:	d124      	bne.n	800023a <main+0xee>
 80001f0:	4b17      	ldr	r3, [pc, #92]	; (8000250 <main+0x104>)
 80001f2:	785b      	ldrb	r3, [r3, #1]
 80001f4:	2b20      	cmp	r3, #32
 80001f6:	d120      	bne.n	800023a <main+0xee>
 80001f8:	4b15      	ldr	r3, [pc, #84]	; (8000250 <main+0x104>)
 80001fa:	789b      	ldrb	r3, [r3, #2]
 80001fc:	2b68      	cmp	r3, #104	; 0x68
 80001fe:	d11c      	bne.n	800023a <main+0xee>
 8000200:	4b13      	ldr	r3, [pc, #76]	; (8000250 <main+0x104>)
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2ba3      	cmp	r3, #163	; 0xa3
 8000206:	d118      	bne.n	800023a <main+0xee>
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <main+0x104>)
 800020a:	791b      	ldrb	r3, [r3, #4]
 800020c:	2b7c      	cmp	r3, #124	; 0x7c
 800020e:	d114      	bne.n	800023a <main+0xee>
	  {
	    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 8000210:	2200      	movs	r2, #0
 8000212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000216:	480f      	ldr	r0, [pc, #60]	; (8000254 <main+0x108>)
 8000218:	f000 fee4 	bl	8000fe4 <HAL_GPIO_WritePin>
	    HAL_Delay(2000);
 800021c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000220:	f000 fc5c 	bl	8000adc <HAL_Delay>
	    memset(sNum, 0, sizeof(sNum));
 8000224:	2205      	movs	r2, #5
 8000226:	2100      	movs	r1, #0
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <main+0x104>)
 800022a:	f001 fddd 	bl	8001de8 <memset>
	    memset(str, 0, sizeof(str));
 800022e:	2210      	movs	r2, #16
 8000230:	2100      	movs	r1, #0
 8000232:	4805      	ldr	r0, [pc, #20]	; (8000248 <main+0xfc>)
 8000234:	f001 fdd8 	bl	8001de8 <memset>
 8000238:	e005      	b.n	8000246 <main+0xfa>
	  }
	  else
	  {
	    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <main+0x108>)
 8000242:	f000 fecf 	bl	8000fe4 <HAL_GPIO_WritePin>
	  status = MFRC522_Request(PICC_REQIDL, str);
 8000246:	e78d      	b.n	8000164 <main+0x18>
 8000248:	20000084 	.word	0x20000084
 800024c:	20000080 	.word	0x20000080
 8000250:	20000094 	.word	0x20000094
 8000254:	40011000 	.word	0x40011000

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fdbe 	bl	8001de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027a:	2301      	movs	r3, #1
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028c:	2302      	movs	r3, #2
 800028e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000296:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 feb7 	bl	8001014 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002ac:	f000 f8d2 	bl	8000454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	2302      	movs	r3, #2
 80002b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2102      	movs	r1, #2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 f924 	bl	8001518 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002d6:	f000 f8bd 	bl	8000454 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3740      	adds	r7, #64	; 0x40
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002e8:	4b17      	ldr	r3, [pc, #92]	; (8000348 <MX_SPI1_Init+0x64>)
 80002ea:	4a18      	ldr	r2, [pc, #96]	; (800034c <MX_SPI1_Init+0x68>)
 80002ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ee:	4b16      	ldr	r3, [pc, #88]	; (8000348 <MX_SPI1_Init+0x64>)
 80002f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002f6:	4b14      	ldr	r3, [pc, #80]	; (8000348 <MX_SPI1_Init+0x64>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <MX_SPI1_Init+0x64>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_SPI1_Init+0x64>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_SPI1_Init+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <MX_SPI1_Init+0x64>)
 8000310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000314:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <MX_SPI1_Init+0x64>)
 8000318:	2210      	movs	r2, #16
 800031a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <MX_SPI1_Init+0x64>)
 800031e:	2200      	movs	r2, #0
 8000320:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <MX_SPI1_Init+0x64>)
 8000324:	2200      	movs	r2, #0
 8000326:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <MX_SPI1_Init+0x64>)
 800032a:	2200      	movs	r2, #0
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <MX_SPI1_Init+0x64>)
 8000330:	220a      	movs	r2, #10
 8000332:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <MX_SPI1_Init+0x64>)
 8000336:	f001 fa4b 	bl	80017d0 <HAL_SPI_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000340:	f000 f888 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000028 	.word	0x20000028
 800034c:	40013000 	.word	0x40013000

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000364:	4b37      	ldr	r3, [pc, #220]	; (8000444 <MX_GPIO_Init+0xf4>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a36      	ldr	r2, [pc, #216]	; (8000444 <MX_GPIO_Init+0xf4>)
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b34      	ldr	r3, [pc, #208]	; (8000444 <MX_GPIO_Init+0xf4>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0310 	and.w	r3, r3, #16
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037c:	4b31      	ldr	r3, [pc, #196]	; (8000444 <MX_GPIO_Init+0xf4>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a30      	ldr	r2, [pc, #192]	; (8000444 <MX_GPIO_Init+0xf4>)
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b2e      	ldr	r3, [pc, #184]	; (8000444 <MX_GPIO_Init+0xf4>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	60bb      	str	r3, [r7, #8]
 8000392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <MX_GPIO_Init+0xf4>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a2a      	ldr	r2, [pc, #168]	; (8000444 <MX_GPIO_Init+0xf4>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b28      	ldr	r3, [pc, #160]	; (8000444 <MX_GPIO_Init+0xf4>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ac:	4b25      	ldr	r3, [pc, #148]	; (8000444 <MX_GPIO_Init+0xf4>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a24      	ldr	r2, [pc, #144]	; (8000444 <MX_GPIO_Init+0xf4>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b22      	ldr	r3, [pc, #136]	; (8000444 <MX_GPIO_Init+0xf4>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0308 	and.w	r3, r3, #8
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ca:	481f      	ldr	r0, [pc, #124]	; (8000448 <MX_GPIO_Init+0xf8>)
 80003cc:	f000 fe0a 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2110      	movs	r1, #16
 80003d4:	481d      	ldr	r0, [pc, #116]	; (800044c <MX_GPIO_Init+0xfc>)
 80003d6:	f000 fe05 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2101      	movs	r1, #1
 80003de:	481c      	ldr	r0, [pc, #112]	; (8000450 <MX_GPIO_Init+0x100>)
 80003e0:	f000 fe00 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	2302      	movs	r3, #2
 80003f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	4812      	ldr	r0, [pc, #72]	; (8000448 <MX_GPIO_Init+0xf8>)
 80003fe:	f000 fc75 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000402:	2310      	movs	r3, #16
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	480c      	ldr	r0, [pc, #48]	; (800044c <MX_GPIO_Init+0xfc>)
 800041a:	f000 fc67 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800041e:	2301      	movs	r3, #1
 8000420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	2301      	movs	r3, #1
 8000424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2302      	movs	r3, #2
 800042c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	4619      	mov	r1, r3
 8000434:	4806      	ldr	r0, [pc, #24]	; (8000450 <MX_GPIO_Init+0x100>)
 8000436:	f000 fc59 	bl	8000cec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800043a:	bf00      	nop
 800043c:	3720      	adds	r7, #32
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000
 8000448:	40011000 	.word	0x40011000
 800044c:	40010800 	.word	0x40010800
 8000450:	40010c00 	.word	0x40010c00

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>
	...

08000460 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af02      	add	r7, sp, #8
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800046a:	f107 020f 	add.w	r2, r7, #15
 800046e:	1df9      	adds	r1, r7, #7
 8000470:	2364      	movs	r3, #100	; 0x64
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2301      	movs	r3, #1
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <RC522_SPI_Transfer+0x28>)
 8000478:	f001 fa2e 	bl	80018d8 <HAL_SPI_TransmitReceive>

	return rx_data;
 800047c:	7bfb      	ldrb	r3, [r7, #15]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000028 	.word	0x20000028

0800048c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	460a      	mov	r2, r1
 8000496:	71fb      	strb	r3, [r7, #7]
 8000498:	4613      	mov	r3, r2
 800049a:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2110      	movs	r1, #16
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <Write_MFRC522+0x48>)
 80004a2:	f000 fd9f 	bl	8000fe4 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff ffd4 	bl	8000460 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80004b8:	79bb      	ldrb	r3, [r7, #6]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ffd0 	bl	8000460 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80004c0:	2201      	movs	r2, #1
 80004c2:	2110      	movs	r1, #16
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <Write_MFRC522+0x48>)
 80004c6:	f000 fd8d 	bl	8000fe4 <HAL_GPIO_WritePin>
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40010800 	.word	0x40010800

080004d8 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2110      	movs	r1, #16
 80004e6:	480f      	ldr	r0, [pc, #60]	; (8000524 <Read_MFRC522+0x4c>)
 80004e8:	f000 fd7c 	bl	8000fe4 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80004f6:	b25b      	sxtb	r3, r3
 80004f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffad 	bl	8000460 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff ffaa 	bl	8000460 <RC522_SPI_Transfer>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2110      	movs	r1, #16
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <Read_MFRC522+0x4c>)
 8000516:	f000 fd65 	bl	8000fe4 <HAL_GPIO_WritePin>

	return val;
 800051a:	7bfb      	ldrb	r3, [r7, #15]

}
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40010800 	.word	0x40010800

08000528 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff ffcc 	bl	80004d8 <Read_MFRC522>
 8000540:	4603      	mov	r3, r0
 8000542:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000544:	7bfa      	ldrb	r2, [r7, #15]
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	4313      	orrs	r3, r2
 800054a:	b2da      	uxtb	r2, r3
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	4611      	mov	r1, r2
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ff9b 	bl	800048c <Write_MFRC522>
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b084      	sub	sp, #16
 8000562:	af00      	add	r7, sp, #0
 8000564:	4603      	mov	r3, r0
 8000566:	460a      	mov	r2, r1
 8000568:	71fb      	strb	r3, [r7, #7]
 800056a:	4613      	mov	r3, r2
 800056c:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffb1 	bl	80004d8 <Read_MFRC522>
 8000576:	4603      	mov	r3, r0
 8000578:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800057a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800057e:	43db      	mvns	r3, r3
 8000580:	b25a      	sxtb	r2, r3
 8000582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000586:	4013      	ands	r3, r2
 8000588:	b25b      	sxtb	r3, r3
 800058a:	b2da      	uxtb	r2, r3
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	4611      	mov	r1, r2
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff7b 	bl	800048c <Write_MFRC522>
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80005a2:	2014      	movs	r0, #20
 80005a4:	f7ff ff98 	bl	80004d8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80005a8:	2103      	movs	r1, #3
 80005aa:	2014      	movs	r0, #20
 80005ac:	f7ff ffbc 	bl	8000528 <SetBitMask>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80005b8:	210f      	movs	r1, #15
 80005ba:	2001      	movs	r0, #1
 80005bc:	f7ff ff66 	bl	800048c <Write_MFRC522>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <MFRC522_Init+0x54>)
 80005ce:	f000 fd09 	bl	8000fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2101      	movs	r1, #1
 80005d6:	4811      	ldr	r0, [pc, #68]	; (800061c <MFRC522_Init+0x58>)
 80005d8:	f000 fd04 	bl	8000fe4 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80005dc:	f7ff ffea 	bl	80005b4 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80005e0:	218d      	movs	r1, #141	; 0x8d
 80005e2:	202a      	movs	r0, #42	; 0x2a
 80005e4:	f7ff ff52 	bl	800048c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80005e8:	213e      	movs	r1, #62	; 0x3e
 80005ea:	202b      	movs	r0, #43	; 0x2b
 80005ec:	f7ff ff4e 	bl	800048c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80005f0:	211e      	movs	r1, #30
 80005f2:	202d      	movs	r0, #45	; 0x2d
 80005f4:	f7ff ff4a 	bl	800048c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	202c      	movs	r0, #44	; 0x2c
 80005fc:	f7ff ff46 	bl	800048c <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	2015      	movs	r0, #21
 8000604:	f7ff ff42 	bl	800048c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000608:	213d      	movs	r1, #61	; 0x3d
 800060a:	2011      	movs	r0, #17
 800060c:	f7ff ff3e 	bl	800048c <Write_MFRC522>

	AntennaOn();
 8000610:	f7ff ffc5 	bl	800059e <AntennaOn>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40010800 	.word	0x40010800
 800061c:	40010c00 	.word	0x40010c00

08000620 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b089      	sub	sp, #36	; 0x24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4603      	mov	r3, r0
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	4613      	mov	r3, r2
 8000630:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000632:	2302      	movs	r3, #2
 8000634:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000636:	2300      	movs	r3, #0
 8000638:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 800063a:	2300      	movs	r3, #0
 800063c:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	2b0c      	cmp	r3, #12
 8000642:	d006      	beq.n	8000652 <MFRC522_ToCard+0x32>
 8000644:	2b0e      	cmp	r3, #14
 8000646:	d109      	bne.n	800065c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000648:	2312      	movs	r3, #18
 800064a:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 800064c:	2310      	movs	r3, #16
 800064e:	777b      	strb	r3, [r7, #29]
			break;
 8000650:	e005      	b.n	800065e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000652:	2377      	movs	r3, #119	; 0x77
 8000654:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000656:	2330      	movs	r3, #48	; 0x30
 8000658:	777b      	strb	r3, [r7, #29]
			break;
 800065a:	e000      	b.n	800065e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 800065c:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 800065e:	7fbb      	ldrb	r3, [r7, #30]
 8000660:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4619      	mov	r1, r3
 8000668:	2002      	movs	r0, #2
 800066a:	f7ff ff0f 	bl	800048c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800066e:	2180      	movs	r1, #128	; 0x80
 8000670:	2004      	movs	r0, #4
 8000672:	f7ff ff74 	bl	800055e <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	200a      	movs	r0, #10
 800067a:	f7ff ff55 	bl	8000528 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800067e:	2100      	movs	r1, #0
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff ff03 	bl	800048c <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
 800068a:	e00a      	b.n	80006a2 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	2009      	movs	r0, #9
 8000698:	f7ff fef8 	bl	800048c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	3301      	adds	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	69ba      	ldr	r2, [r7, #24]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d3f0      	bcc.n	800068c <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	4619      	mov	r1, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff feec 	bl	800048c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b0c      	cmp	r3, #12
 80006b8:	d103      	bne.n	80006c2 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	200d      	movs	r0, #13
 80006be:	f7ff ff33 	bl	8000528 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80006c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c6:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80006c8:	2004      	movs	r0, #4
 80006ca:	f7ff ff05 	bl	80004d8 <Read_MFRC522>
 80006ce:	4603      	mov	r3, r0
 80006d0:	773b      	strb	r3, [r7, #28]
        i--;
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00a      	beq.n	80006f4 <MFRC522_ToCard+0xd4>
 80006de:	7f3b      	ldrb	r3, [r7, #28]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d105      	bne.n	80006f4 <MFRC522_ToCard+0xd4>
 80006e8:	7f3a      	ldrb	r2, [r7, #28]
 80006ea:	7f7b      	ldrb	r3, [r7, #29]
 80006ec:	4013      	ands	r3, r2
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0e9      	beq.n	80006c8 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	200d      	movs	r0, #13
 80006f8:	f7ff ff31 	bl	800055e <ClearBitMask>

    if (i != 0)
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d052      	beq.n	80007a8 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000702:	2006      	movs	r0, #6
 8000704:	f7ff fee8 	bl	80004d8 <Read_MFRC522>
 8000708:	4603      	mov	r3, r0
 800070a:	f003 031b 	and.w	r3, r3, #27
 800070e:	2b00      	cmp	r3, #0
 8000710:	d148      	bne.n	80007a4 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000716:	7f3a      	ldrb	r2, [r7, #28]
 8000718:	7fbb      	ldrb	r3, [r7, #30]
 800071a:	4013      	ands	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8000726:	2301      	movs	r3, #1
 8000728:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	2b0c      	cmp	r3, #12
 800072e:	d13b      	bne.n	80007a8 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000730:	200a      	movs	r0, #10
 8000732:	f7ff fed1 	bl	80004d8 <Read_MFRC522>
 8000736:	4603      	mov	r3, r0
 8000738:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800073a:	200c      	movs	r0, #12
 800073c:	f7ff fecc 	bl	80004d8 <Read_MFRC522>
 8000740:	4603      	mov	r3, r0
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000748:	7dfb      	ldrb	r3, [r7, #23]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d008      	beq.n	8000760 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 800074e:	7f3b      	ldrb	r3, [r7, #28]
 8000750:	3b01      	subs	r3, #1
 8000752:	00da      	lsls	r2, r3, #3
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	4413      	add	r3, r2
 8000758:	461a      	mov	r2, r3
 800075a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	e004      	b.n	800076a <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8000760:	7f3b      	ldrb	r3, [r7, #28]
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	461a      	mov	r2, r3
 8000766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000768:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800076a:	7f3b      	ldrb	r3, [r7, #28]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d101      	bne.n	8000774 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000774:	7f3b      	ldrb	r3, [r7, #28]
 8000776:	2b10      	cmp	r3, #16
 8000778:	d901      	bls.n	800077e <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 800077a:	2310      	movs	r3, #16
 800077c:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	e00a      	b.n	800079a <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	18d4      	adds	r4, r2, r3
 800078a:	2009      	movs	r0, #9
 800078c:	f7ff fea4 	bl	80004d8 <Read_MFRC522>
 8000790:	4603      	mov	r3, r0
 8000792:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	3301      	adds	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	7f3b      	ldrb	r3, [r7, #28]
 800079c:	69ba      	ldr	r2, [r7, #24]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d3f0      	bcc.n	8000784 <MFRC522_ToCard+0x164>
 80007a2:	e001      	b.n	80007a8 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80007a4:	2302      	movs	r3, #2
 80007a6:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80007a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3724      	adds	r7, #36	; 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd90      	pop	{r4, r7, pc}

080007b2 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af02      	add	r7, sp, #8
 80007b8:	4603      	mov	r3, r0
 80007ba:	6039      	str	r1, [r7, #0]
 80007bc:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80007be:	2107      	movs	r1, #7
 80007c0:	200d      	movs	r0, #13
 80007c2:	f7ff fe63 	bl	800048c <Write_MFRC522>

	TagType[0] = reqMode;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2201      	movs	r2, #1
 80007d6:	6839      	ldr	r1, [r7, #0]
 80007d8:	200c      	movs	r0, #12
 80007da:	f7ff ff21 	bl	8000620 <MFRC522_ToCard>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <MFRC522_Request+0x3c>
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	2b10      	cmp	r3, #16
 80007ec:	d001      	beq.n	80007f2 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80007ee:	2302      	movs	r3, #2
 80007f0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af02      	add	r7, sp, #8
 8000802:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000804:	2300      	movs	r3, #0
 8000806:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000808:	2100      	movs	r1, #0
 800080a:	200d      	movs	r0, #13
 800080c:	f7ff fe3e 	bl	800048c <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2293      	movs	r2, #147	; 0x93
 8000814:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3301      	adds	r3, #1
 800081a:	2220      	movs	r2, #32
 800081c:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2202      	movs	r2, #2
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	200c      	movs	r0, #12
 800082c:	f7ff fef8 	bl	8000620 <MFRC522_ToCard>
 8000830:	4603      	mov	r3, r0
 8000832:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d118      	bne.n	800086c <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 800083a:	2300      	movs	r3, #0
 800083c:	73bb      	strb	r3, [r7, #14]
 800083e:	e009      	b.n	8000854 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	781a      	ldrb	r2, [r3, #0]
 8000848:	7b7b      	ldrb	r3, [r7, #13]
 800084a:	4053      	eors	r3, r2
 800084c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	3301      	adds	r3, #1
 8000852:	73bb      	strb	r3, [r7, #14]
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d9f2      	bls.n	8000840 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	7b7a      	ldrb	r2, [r7, #13]
 8000864:	429a      	cmp	r2, r3
 8000866:	d001      	beq.n	800086c <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000868:	2302      	movs	r3, #2
 800086a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_MspInit+0x5c>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <HAL_MspInit+0x5c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_MspInit+0x5c>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x5c>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_MspInit+0x5c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	61d3      	str	r3, [r2, #28]
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_MspInit+0x5c>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_MspInit+0x60>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <HAL_MspInit+0x60>)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010000 	.word	0x40010000

080008dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <HAL_SPI_MspInit+0x88>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d12f      	bne.n	800095c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_SPI_MspInit+0x8c>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_SPI_MspInit+0x8c>)
 8000902:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_SPI_MspInit+0x8c>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_SPI_MspInit+0x8c>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_SPI_MspInit+0x8c>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_SPI_MspInit+0x8c>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800092c:	23a0      	movs	r3, #160	; 0xa0
 800092e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4619      	mov	r1, r3
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <HAL_SPI_MspInit+0x90>)
 8000940:	f000 f9d4 	bl	8000cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000944:	2340      	movs	r3, #64	; 0x40
 8000946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4619      	mov	r1, r3
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_SPI_MspInit+0x90>)
 8000958:	f000 f9c8 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40013000 	.word	0x40013000
 8000968:	40021000 	.word	0x40021000
 800096c:	40010800 	.word	0x40010800

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b6:	f000 f875 	bl	8000aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}

080009be <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
	...

080009cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009cc:	f7ff fff7 	bl	80009be <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009d2:	490c      	ldr	r1, [pc, #48]	; (8000a04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009e8:	4c09      	ldr	r4, [pc, #36]	; (8000a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f6:	f001 f9d3 	bl	8001da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fa:	f7ff fba7 	bl	800014c <main>
  bx lr
 80009fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a08:	08001e3c 	.word	0x08001e3c
  ldr r2, =_sbss
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a10:	200000a0 	.word	0x200000a0

08000a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_2_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_Init+0x28>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_Init+0x28>)
 8000a22:	f043 0310 	orr.w	r3, r3, #16
 8000a26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f92b 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f000 f808 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff ff20 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40022000 	.word	0x40022000

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x54>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_InitTick+0x58>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f935 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00e      	b.n	8000a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d80a      	bhi.n	8000a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f000 f90b 	bl	8000c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <HAL_InitTick+0x5c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x1c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a03      	ldr	r2, [pc, #12]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	2000009c 	.word	0x2000009c

08000ac8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <HAL_GetTick+0x10>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	2000009c 	.word	0x2000009c

08000adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff fff0 	bl	8000ac8 <HAL_GetTick>
 8000ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af4:	d005      	beq.n	8000b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_Delay+0x44>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b02:	bf00      	nop
 8000b04:	f7ff ffe0 	bl	8000ac8 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d8f7      	bhi.n	8000b04 <HAL_Delay+0x28>
  {
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	; 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f7ff ff90 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff49 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff5e 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff90 	bl	8000bdc <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5f 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffb0 	bl	8000c40 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b08b      	sub	sp, #44	; 0x2c
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	e161      	b.n	8000fc4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d00:	2201      	movs	r2, #1
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	f040 8150 	bne.w	8000fbe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	4a97      	ldr	r2, [pc, #604]	; (8000f80 <HAL_GPIO_Init+0x294>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d05e      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
 8000d28:	4a95      	ldr	r2, [pc, #596]	; (8000f80 <HAL_GPIO_Init+0x294>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d875      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d2e:	4a95      	ldr	r2, [pc, #596]	; (8000f84 <HAL_GPIO_Init+0x298>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d058      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
 8000d34:	4a93      	ldr	r2, [pc, #588]	; (8000f84 <HAL_GPIO_Init+0x298>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d86f      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d3a:	4a93      	ldr	r2, [pc, #588]	; (8000f88 <HAL_GPIO_Init+0x29c>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d052      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
 8000d40:	4a91      	ldr	r2, [pc, #580]	; (8000f88 <HAL_GPIO_Init+0x29c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d869      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d46:	4a91      	ldr	r2, [pc, #580]	; (8000f8c <HAL_GPIO_Init+0x2a0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d04c      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
 8000d4c:	4a8f      	ldr	r2, [pc, #572]	; (8000f8c <HAL_GPIO_Init+0x2a0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d863      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d52:	4a8f      	ldr	r2, [pc, #572]	; (8000f90 <HAL_GPIO_Init+0x2a4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d046      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
 8000d58:	4a8d      	ldr	r2, [pc, #564]	; (8000f90 <HAL_GPIO_Init+0x2a4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d85d      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d5e:	2b12      	cmp	r3, #18
 8000d60:	d82a      	bhi.n	8000db8 <HAL_GPIO_Init+0xcc>
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d859      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d66:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <HAL_GPIO_Init+0x80>)
 8000d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6c:	08000de7 	.word	0x08000de7
 8000d70:	08000dc1 	.word	0x08000dc1
 8000d74:	08000dd3 	.word	0x08000dd3
 8000d78:	08000e15 	.word	0x08000e15
 8000d7c:	08000e1b 	.word	0x08000e1b
 8000d80:	08000e1b 	.word	0x08000e1b
 8000d84:	08000e1b 	.word	0x08000e1b
 8000d88:	08000e1b 	.word	0x08000e1b
 8000d8c:	08000e1b 	.word	0x08000e1b
 8000d90:	08000e1b 	.word	0x08000e1b
 8000d94:	08000e1b 	.word	0x08000e1b
 8000d98:	08000e1b 	.word	0x08000e1b
 8000d9c:	08000e1b 	.word	0x08000e1b
 8000da0:	08000e1b 	.word	0x08000e1b
 8000da4:	08000e1b 	.word	0x08000e1b
 8000da8:	08000e1b 	.word	0x08000e1b
 8000dac:	08000e1b 	.word	0x08000e1b
 8000db0:	08000dc9 	.word	0x08000dc9
 8000db4:	08000ddd 	.word	0x08000ddd
 8000db8:	4a76      	ldr	r2, [pc, #472]	; (8000f94 <HAL_GPIO_Init+0x2a8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d013      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dbe:	e02c      	b.n	8000e1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e029      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	623b      	str	r3, [r7, #32]
          break;
 8000dd0:	e024      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	3308      	adds	r3, #8
 8000dd8:	623b      	str	r3, [r7, #32]
          break;
 8000dda:	e01f      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	330c      	adds	r3, #12
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	e01a      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dee:	2304      	movs	r3, #4
 8000df0:	623b      	str	r3, [r7, #32]
          break;
 8000df2:	e013      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d105      	bne.n	8000e08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	611a      	str	r2, [r3, #16]
          break;
 8000e06:	e009      	b.n	8000e1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	615a      	str	r2, [r3, #20]
          break;
 8000e12:	e003      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
          break;
 8000e18:	e000      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          break;
 8000e1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	2bff      	cmp	r3, #255	; 0xff
 8000e20:	d801      	bhi.n	8000e26 <HAL_GPIO_Init+0x13a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	e001      	b.n	8000e2a <HAL_GPIO_Init+0x13e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	2bff      	cmp	r3, #255	; 0xff
 8000e30:	d802      	bhi.n	8000e38 <HAL_GPIO_Init+0x14c>
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	e002      	b.n	8000e3e <HAL_GPIO_Init+0x152>
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	3b08      	subs	r3, #8
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	210f      	movs	r1, #15
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	401a      	ands	r2, r3
 8000e50:	6a39      	ldr	r1, [r7, #32]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 80a9 	beq.w	8000fbe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6c:	4b4a      	ldr	r3, [pc, #296]	; (8000f98 <HAL_GPIO_Init+0x2ac>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <HAL_GPIO_Init+0x2ac>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <HAL_GPIO_Init+0x2ac>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e84:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a3d      	ldr	r2, [pc, #244]	; (8000fa0 <HAL_GPIO_Init+0x2b4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d00d      	beq.n	8000ecc <HAL_GPIO_Init+0x1e0>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a3c      	ldr	r2, [pc, #240]	; (8000fa4 <HAL_GPIO_Init+0x2b8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d007      	beq.n	8000ec8 <HAL_GPIO_Init+0x1dc>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a3b      	ldr	r2, [pc, #236]	; (8000fa8 <HAL_GPIO_Init+0x2bc>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d101      	bne.n	8000ec4 <HAL_GPIO_Init+0x1d8>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x1e2>
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x1e2>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x1e2>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ede:	492f      	ldr	r1, [pc, #188]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	492b      	ldr	r1, [pc, #172]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	608b      	str	r3, [r1, #8]
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4927      	ldr	r1, [pc, #156]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	4921      	ldr	r1, [pc, #132]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	60cb      	str	r3, [r1, #12]
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	491d      	ldr	r1, [pc, #116]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	4917      	ldr	r1, [pc, #92]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	604b      	str	r3, [r1, #4]
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4913      	ldr	r1, [pc, #76]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d01f      	beq.n	8000fb0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	490d      	ldr	r1, [pc, #52]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
 8000f7c:	e01f      	b.n	8000fbe <HAL_GPIO_Init+0x2d2>
 8000f7e:	bf00      	nop
 8000f80:	10320000 	.word	0x10320000
 8000f84:	10310000 	.word	0x10310000
 8000f88:	10220000 	.word	0x10220000
 8000f8c:	10210000 	.word	0x10210000
 8000f90:	10120000 	.word	0x10120000
 8000f94:	10110000 	.word	0x10110000
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_GPIO_Init+0x2f4>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	4909      	ldr	r1, [pc, #36]	; (8000fe0 <HAL_GPIO_Init+0x2f4>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	fa22 f303 	lsr.w	r3, r2, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f47f ae96 	bne.w	8000d00 <HAL_GPIO_Init+0x14>
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	372c      	adds	r7, #44	; 0x2c
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	40010400 	.word	0x40010400

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	611a      	str	r2, [r3, #16]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e272      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8087 	beq.w	8001142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001034:	4b92      	ldr	r3, [pc, #584]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b04      	cmp	r3, #4
 800103e:	d00c      	beq.n	800105a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001040:	4b8f      	ldr	r3, [pc, #572]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b08      	cmp	r3, #8
 800104a:	d112      	bne.n	8001072 <HAL_RCC_OscConfig+0x5e>
 800104c:	4b8c      	ldr	r3, [pc, #560]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d10b      	bne.n	8001072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105a:	4b89      	ldr	r3, [pc, #548]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d06c      	beq.n	8001140 <HAL_RCC_OscConfig+0x12c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d168      	bne.n	8001140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e24c      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107a:	d106      	bne.n	800108a <HAL_RCC_OscConfig+0x76>
 800107c:	4b80      	ldr	r3, [pc, #512]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a7f      	ldr	r2, [pc, #508]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e02e      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0x98>
 8001092:	4b7b      	ldr	r3, [pc, #492]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a7a      	ldr	r2, [pc, #488]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b78      	ldr	r3, [pc, #480]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a77      	ldr	r2, [pc, #476]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01d      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0xbc>
 80010b6:	4b72      	ldr	r3, [pc, #456]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a71      	ldr	r2, [pc, #452]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b6f      	ldr	r3, [pc, #444]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 80010d0:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a6a      	ldr	r2, [pc, #424]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a67      	ldr	r2, [pc, #412]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fcea 	bl	8000ac8 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fce6 	bl	8000ac8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e200      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0xe4>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fcd6 	bl	8000ac8 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fcd2 	bl	8000ac8 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1ec      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x10c>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d063      	beq.n	8001216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800114e:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800115a:	4b49      	ldr	r3, [pc, #292]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b08      	cmp	r3, #8
 8001164:	d11c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x18c>
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d116      	bne.n	80011a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	4b43      	ldr	r3, [pc, #268]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x176>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e1c0      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4939      	ldr	r1, [pc, #228]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	e03a      	b.n	8001216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fc8b 	bl	8000ac8 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc87 	bl	8000ac8 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e1a1      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4927      	ldr	r1, [pc, #156]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc6a 	bl	8000ac8 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc66 	bl	8000ac8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e180      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d03a      	beq.n	8001298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d019      	beq.n	800125e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_RCC_OscConfig+0x274>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fc4a 	bl	8000ac8 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc46 	bl	8000ac8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e160      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 fa9c 	bl	8001794 <RCC_Delay>
 800125c:	e01c      	b.n	8001298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_RCC_OscConfig+0x274>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001264:	f7ff fc30 	bl	8000ac8 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126a:	e00f      	b.n	800128c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fc2c 	bl	8000ac8 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d908      	bls.n	800128c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e146      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	42420000 	.word	0x42420000
 8001288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128c:	4b92      	ldr	r3, [pc, #584]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e9      	bne.n	800126c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a6 	beq.w	80013f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012aa:	4b8b      	ldr	r3, [pc, #556]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b88      	ldr	r3, [pc, #544]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a87      	ldr	r2, [pc, #540]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b85      	ldr	r3, [pc, #532]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ce:	2301      	movs	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d2:	4b82      	ldr	r3, [pc, #520]	; (80014dc <HAL_RCC_OscConfig+0x4c8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d118      	bne.n	8001310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012de:	4b7f      	ldr	r3, [pc, #508]	; (80014dc <HAL_RCC_OscConfig+0x4c8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a7e      	ldr	r2, [pc, #504]	; (80014dc <HAL_RCC_OscConfig+0x4c8>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fbed 	bl	8000ac8 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f2:	f7ff fbe9 	bl	8000ac8 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b64      	cmp	r3, #100	; 0x64
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e103      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	4b75      	ldr	r3, [pc, #468]	; (80014dc <HAL_RCC_OscConfig+0x4c8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x312>
 8001318:	4b6f      	ldr	r3, [pc, #444]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4a6e      	ldr	r2, [pc, #440]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6213      	str	r3, [r2, #32]
 8001324:	e02d      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x334>
 800132e:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a69      	ldr	r2, [pc, #420]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	4b67      	ldr	r3, [pc, #412]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a66      	ldr	r2, [pc, #408]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	f023 0304 	bic.w	r3, r3, #4
 8001344:	6213      	str	r3, [r2, #32]
 8001346:	e01c      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b05      	cmp	r3, #5
 800134e:	d10c      	bne.n	800136a <HAL_RCC_OscConfig+0x356>
 8001350:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a60      	ldr	r2, [pc, #384]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a5d      	ldr	r2, [pc, #372]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	e00b      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 800136a:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a5a      	ldr	r2, [pc, #360]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	4b58      	ldr	r3, [pc, #352]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a57      	ldr	r2, [pc, #348]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d015      	beq.n	80013b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fb9d 	bl	8000ac8 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fb99 	bl	8000ac8 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e0b1      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a8:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0ee      	beq.n	8001392 <HAL_RCC_OscConfig+0x37e>
 80013b4:	e014      	b.n	80013e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fb87 	bl	8000ac8 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fb83 	bl	8000ac8 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e09b      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d4:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ee      	bne.n	80013be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d105      	bne.n	80013f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e6:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a3b      	ldr	r2, [pc, #236]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8087 	beq.w	800150a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b08      	cmp	r3, #8
 8001406:	d061      	beq.n	80014cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d146      	bne.n	800149e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001410:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <HAL_RCC_OscConfig+0x4cc>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fb57 	bl	8000ac8 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff fb53 	bl	8000ac8 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e06d      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d108      	bne.n	8001458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	4921      	ldr	r1, [pc, #132]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a19      	ldr	r1, [r3, #32]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	430b      	orrs	r3, r1
 800146a:	491b      	ldr	r1, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x4cc>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb27 	bl	8000ac8 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fb23 	bl	8000ac8 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e03d      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x46a>
 800149c:	e035      	b.n	800150a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_RCC_OscConfig+0x4cc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb10 	bl	8000ac8 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fb0c 	bl	8000ac8 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e026      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x498>
 80014ca:	e01e      	b.n	800150a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e019      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40007000 	.word	0x40007000
 80014e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x500>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0d0      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800152c:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d910      	bls.n	800155c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b67      	ldr	r3, [pc, #412]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 0207 	bic.w	r2, r3, #7
 8001542:	4965      	ldr	r1, [pc, #404]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0b8      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001574:	4b59      	ldr	r3, [pc, #356]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	4a58      	ldr	r2, [pc, #352]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800157e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800158c:	4b53      	ldr	r3, [pc, #332]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a52      	ldr	r2, [pc, #328]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001596:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	494d      	ldr	r1, [pc, #308]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d040      	beq.n	8001638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d115      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e07f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d6:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e073      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e06b      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f6:	4b39      	ldr	r3, [pc, #228]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f023 0203 	bic.w	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4936      	ldr	r1, [pc, #216]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001608:	f7ff fa5e 	bl	8000ac8 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	e00a      	b.n	8001626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001610:	f7ff fa5a 	bl	8000ac8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f241 3288 	movw	r2, #5000	; 0x1388
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e053      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 020c 	and.w	r2, r3, #12
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	429a      	cmp	r2, r3
 8001636:	d1eb      	bne.n	8001610 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d210      	bcs.n	8001668 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 0207 	bic.w	r2, r3, #7
 800164e:	4922      	ldr	r1, [pc, #136]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e032      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4916      	ldr	r1, [pc, #88]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	490e      	ldr	r1, [pc, #56]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016a6:	f000 f821 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	490a      	ldr	r1, [pc, #40]	; (80016e0 <HAL_RCC_ClockConfig+0x1c8>)
 80016b8:	5ccb      	ldrb	r3, [r1, r3]
 80016ba:	fa22 f303 	lsr.w	r3, r2, r3
 80016be:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1cc>)
 80016c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1d0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff f9bc 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40022000 	.word	0x40022000
 80016dc:	40021000 	.word	0x40021000
 80016e0:	08001e10 	.word	0x08001e10
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_RCC_GetSysClockFreq+0x94>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b04      	cmp	r3, #4
 8001714:	d002      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0x30>
 8001716:	2b08      	cmp	r3, #8
 8001718:	d003      	beq.n	8001722 <HAL_RCC_GetSysClockFreq+0x36>
 800171a:	e027      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_RCC_GetSysClockFreq+0x98>)
 800171e:	613b      	str	r3, [r7, #16]
      break;
 8001720:	e027      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	0c9b      	lsrs	r3, r3, #18
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	4a17      	ldr	r2, [pc, #92]	; (8001788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d010      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_RCC_GetSysClockFreq+0x94>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	0c5b      	lsrs	r3, r3, #17
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_RCC_GetSysClockFreq+0x98>)
 800174e:	fb03 f202 	mul.w	r2, r3, r2
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e004      	b.n	8001766 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	613b      	str	r3, [r7, #16]
      break;
 800176a:	e002      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_RCC_GetSysClockFreq+0x98>)
 800176e:	613b      	str	r3, [r7, #16]
      break;
 8001770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001772:	693b      	ldr	r3, [r7, #16]
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	007a1200 	.word	0x007a1200
 8001788:	08001e20 	.word	0x08001e20
 800178c:	08001e30 	.word	0x08001e30
 8001790:	003d0900 	.word	0x003d0900

08001794 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <RCC_Delay+0x34>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <RCC_Delay+0x38>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	0a5b      	lsrs	r3, r3, #9
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017b0:	bf00      	nop
  }
  while (Delay --);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1e5a      	subs	r2, r3, #1
 80017b6:	60fa      	str	r2, [r7, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f9      	bne.n	80017b0 <RCC_Delay+0x1c>
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	20000000 	.word	0x20000000
 80017cc:	10624dd3 	.word	0x10624dd3

080017d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e076      	b.n	80018d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d108      	bne.n	80017fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017f2:	d009      	beq.n	8001808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
 80017fa:	e005      	b.n	8001808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff f85a 	bl	80008dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800183e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188c:	ea42 0103 	orr.w	r1, r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	0c1a      	lsrs	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f002 0204 	and.w	r2, r2, #4
 80018ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	69da      	ldr	r2, [r3, #28]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80018e6:	2301      	movs	r3, #1
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018ea:	f7ff f8ed 	bl	8000ac8 <HAL_GetTick>
 80018ee:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018f6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001902:	7ffb      	ldrb	r3, [r7, #31]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d00c      	beq.n	8001922 <HAL_SPI_TransmitReceive+0x4a>
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800190e:	d106      	bne.n	800191e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <HAL_SPI_TransmitReceive+0x46>
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	2b04      	cmp	r3, #4
 800191c:	d001      	beq.n	8001922 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800191e:	2302      	movs	r3, #2
 8001920:	e17f      	b.n	8001c22 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_SPI_TransmitReceive+0x5c>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_SPI_TransmitReceive+0x5c>
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e174      	b.n	8001c22 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_SPI_TransmitReceive+0x6e>
 8001942:	2302      	movs	r3, #2
 8001944:	e16d      	b.n	8001c22 <HAL_SPI_TransmitReceive+0x34a>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b04      	cmp	r3, #4
 8001958:	d003      	beq.n	8001962 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2205      	movs	r2, #5
 800195e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	887a      	ldrh	r2, [r7, #2]
 8001972:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	887a      	ldrh	r2, [r7, #2]
 800198a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a2:	2b40      	cmp	r3, #64	; 0x40
 80019a4:	d007      	beq.n	80019b6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019be:	d17e      	bne.n	8001abe <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <HAL_SPI_TransmitReceive+0xf6>
 80019c8:	8afb      	ldrh	r3, [r7, #22]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d16c      	bne.n	8001aa8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	881a      	ldrh	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	1c9a      	adds	r2, r3, #2
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3b01      	subs	r3, #1
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019f2:	e059      	b.n	8001aa8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d11b      	bne.n	8001a3a <HAL_SPI_TransmitReceive+0x162>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d016      	beq.n	8001a3a <HAL_SPI_TransmitReceive+0x162>
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d113      	bne.n	8001a3a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	881a      	ldrh	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	1c9a      	adds	r2, r3, #2
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d119      	bne.n	8001a7c <HAL_SPI_TransmitReceive+0x1a4>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d014      	beq.n	8001a7c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5c:	b292      	uxth	r2, r2
 8001a5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	1c9a      	adds	r2, r3, #2
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001a7c:	f7ff f824 	bl	8000ac8 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d80d      	bhi.n	8001aa8 <HAL_SPI_TransmitReceive+0x1d0>
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a92:	d009      	beq.n	8001aa8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0bc      	b.n	8001c22 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1a0      	bne.n	80019f4 <HAL_SPI_TransmitReceive+0x11c>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d19b      	bne.n	80019f4 <HAL_SPI_TransmitReceive+0x11c>
 8001abc:	e082      	b.n	8001bc4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_SPI_TransmitReceive+0x1f4>
 8001ac6:	8afb      	ldrh	r3, [r7, #22]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d171      	bne.n	8001bb0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001af2:	e05d      	b.n	8001bb0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d11c      	bne.n	8001b3c <HAL_SPI_TransmitReceive+0x264>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d017      	beq.n	8001b3c <HAL_SPI_TransmitReceive+0x264>
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d114      	bne.n	8001b3c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	330c      	adds	r3, #12
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d119      	bne.n	8001b7e <HAL_SPI_TransmitReceive+0x2a6>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d014      	beq.n	8001b7e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001b7e:	f7fe ffa3 	bl	8000ac8 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d803      	bhi.n	8001b96 <HAL_SPI_TransmitReceive+0x2be>
 8001b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d102      	bne.n	8001b9c <HAL_SPI_TransmitReceive+0x2c4>
 8001b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e038      	b.n	8001c22 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d19c      	bne.n	8001af4 <HAL_SPI_TransmitReceive+0x21c>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d197      	bne.n	8001af4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bc4:	6a3a      	ldr	r2, [r7, #32]
 8001bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f8b7 	bl	8001d3c <SPI_EndRxTxTransaction>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e01d      	b.n	8001c22 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10a      	bne.n	8001c04 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8001c20:	2300      	movs	r3, #0
  }
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3728      	adds	r7, #40	; 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c3c:	f7fe ff44 	bl	8000ac8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c4c:	f7fe ff3c 	bl	8000ac8 <HAL_GetTick>
 8001c50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	0d1b      	lsrs	r3, r3, #20
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c62:	e054      	b.n	8001d0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6a:	d050      	beq.n	8001d0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c6c:	f7fe ff2c 	bl	8000ac8 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d902      	bls.n	8001c82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d13d      	bne.n	8001cfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001c90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c9a:	d111      	bne.n	8001cc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca4:	d004      	beq.n	8001cb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	d107      	bne.n	8001cc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc8:	d10f      	bne.n	8001cea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ce8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e017      	b.n	8001d2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d19b      	bne.n	8001c64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000

08001d3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2102      	movs	r1, #2
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f7ff ff6a 	bl	8001c2c <SPI_WaitFlagStateUntilTimeout>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f043 0220 	orr.w	r2, r3, #32
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e013      	b.n	8001d96 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2200      	movs	r2, #0
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff ff57 	bl	8001c2c <SPI_WaitFlagStateUntilTimeout>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f043 0220 	orr.w	r2, r3, #32
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e000      	b.n	8001d96 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <__libc_init_array>:
 8001da0:	b570      	push	{r4, r5, r6, lr}
 8001da2:	2600      	movs	r6, #0
 8001da4:	4d0c      	ldr	r5, [pc, #48]	; (8001dd8 <__libc_init_array+0x38>)
 8001da6:	4c0d      	ldr	r4, [pc, #52]	; (8001ddc <__libc_init_array+0x3c>)
 8001da8:	1b64      	subs	r4, r4, r5
 8001daa:	10a4      	asrs	r4, r4, #2
 8001dac:	42a6      	cmp	r6, r4
 8001dae:	d109      	bne.n	8001dc4 <__libc_init_array+0x24>
 8001db0:	f000 f822 	bl	8001df8 <_init>
 8001db4:	2600      	movs	r6, #0
 8001db6:	4d0a      	ldr	r5, [pc, #40]	; (8001de0 <__libc_init_array+0x40>)
 8001db8:	4c0a      	ldr	r4, [pc, #40]	; (8001de4 <__libc_init_array+0x44>)
 8001dba:	1b64      	subs	r4, r4, r5
 8001dbc:	10a4      	asrs	r4, r4, #2
 8001dbe:	42a6      	cmp	r6, r4
 8001dc0:	d105      	bne.n	8001dce <__libc_init_array+0x2e>
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}
 8001dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dc8:	4798      	blx	r3
 8001dca:	3601      	adds	r6, #1
 8001dcc:	e7ee      	b.n	8001dac <__libc_init_array+0xc>
 8001dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dd2:	4798      	blx	r3
 8001dd4:	3601      	adds	r6, #1
 8001dd6:	e7f2      	b.n	8001dbe <__libc_init_array+0x1e>
 8001dd8:	08001e34 	.word	0x08001e34
 8001ddc:	08001e34 	.word	0x08001e34
 8001de0:	08001e34 	.word	0x08001e34
 8001de4:	08001e38 	.word	0x08001e38

08001de8 <memset>:
 8001de8:	4603      	mov	r3, r0
 8001dea:	4402      	add	r2, r0
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d100      	bne.n	8001df2 <memset+0xa>
 8001df0:	4770      	bx	lr
 8001df2:	f803 1b01 	strb.w	r1, [r3], #1
 8001df6:	e7f9      	b.n	8001dec <memset+0x4>

08001df8 <_init>:
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	bf00      	nop
 8001dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfe:	bc08      	pop	{r3}
 8001e00:	469e      	mov	lr, r3
 8001e02:	4770      	bx	lr

08001e04 <_fini>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	bf00      	nop
 8001e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0a:	bc08      	pop	{r3}
 8001e0c:	469e      	mov	lr, r3
 8001e0e:	4770      	bx	lr
