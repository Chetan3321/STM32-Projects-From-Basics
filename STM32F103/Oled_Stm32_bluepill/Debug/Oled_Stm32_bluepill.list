
Oled_Stm32_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000306c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dcc  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f44  08003f44  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003f44  08003f44  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f44  08003f44  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000014  08003f60  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08003f60  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bea  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad9  00000000  00000000  00029c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017463  00000000  00000000  0002cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c43e  00000000  00000000  00043f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008282e  00000000  00000000  00050351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002970  00000000  00000000  000d2bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003160 	.word	0x08003160

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003160 	.word	0x08003160

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 f82e 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f91a 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9c2 	bl	80004e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f95c 	bl	8000418 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000160:	f000 f988 	bl	8000474 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	MFRC522_Init();
 8000164:	f000 faf6 	bl	8000754 <MFRC522_Init>

	SSD1306_Init (); // initialise the display
 8000168:	f000 fc4e 	bl	8000a08 <SSD1306_Init>
	SSD1306_GotoXY (10,10); // goto 10, 10
 800016c:	210a      	movs	r1, #10
 800016e:	200a      	movs	r0, #10
 8000170:	f000 fdb2 	bl	8000cd8 <SSD1306_GotoXY>
	SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 8000174:	2201      	movs	r2, #1
 8000176:	4978      	ldr	r1, [pc, #480]	; (8000358 <main+0x20c>)
 8000178:	4878      	ldr	r0, [pc, #480]	; (800035c <main+0x210>)
 800017a:	f000 fe43 	bl	8000e04 <SSD1306_Puts>
	SSD1306_GotoXY (10, 28);
 800017e:	211c      	movs	r1, #28
 8000180:	200a      	movs	r0, #10
 8000182:	f000 fda9 	bl	8000cd8 <SSD1306_GotoXY>
	SSD1306_Puts ("Locker", &Font_11x18, 1);
 8000186:	2201      	movs	r2, #1
 8000188:	4973      	ldr	r1, [pc, #460]	; (8000358 <main+0x20c>)
 800018a:	4875      	ldr	r0, [pc, #468]	; (8000360 <main+0x214>)
 800018c:	f000 fe3a 	bl	8000e04 <SSD1306_Puts>
	SSD1306_GotoXY (10, 45);
 8000190:	212d      	movs	r1, #45	; 0x2d
 8000192:	200a      	movs	r0, #10
 8000194:	f000 fda0 	bl	8000cd8 <SSD1306_GotoXY>
	SSD1306_Puts ("Allotment", &Font_11x18, 1);
 8000198:	2201      	movs	r2, #1
 800019a:	496f      	ldr	r1, [pc, #444]	; (8000358 <main+0x20c>)
 800019c:	4871      	ldr	r0, [pc, #452]	; (8000364 <main+0x218>)
 800019e:	f000 fe31 	bl	8000e04 <SSD1306_Puts>
    SSD1306_UpdateScreen(); // update screen
 80001a2:	f000 fcf5 	bl	8000b90 <SSD1306_UpdateScreen>
    HAL_Delay(2000);
 80001a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001aa:	f001 f863 	bl	8001274 <HAL_Delay>

    SSD1306_Clear();
 80001ae:	f000 fe4e 	bl	8000e4e <SSD1306_Clear>
    SSD1306_UpdateScreen(); // update screen
 80001b2:	f000 fced 	bl	8000b90 <SSD1306_UpdateScreen>

Label1:
    SSD1306_GotoXY (10, 10);
 80001b6:	210a      	movs	r1, #10
 80001b8:	200a      	movs	r0, #10
 80001ba:	f000 fd8d 	bl	8000cd8 <SSD1306_GotoXY>
	SSD1306_Puts ("Scan", &Font_11x18, 1);
 80001be:	2201      	movs	r2, #1
 80001c0:	4965      	ldr	r1, [pc, #404]	; (8000358 <main+0x20c>)
 80001c2:	4869      	ldr	r0, [pc, #420]	; (8000368 <main+0x21c>)
 80001c4:	f000 fe1e 	bl	8000e04 <SSD1306_Puts>
	SSD1306_GotoXY (10, 28);
 80001c8:	211c      	movs	r1, #28
 80001ca:	200a      	movs	r0, #10
 80001cc:	f000 fd84 	bl	8000cd8 <SSD1306_GotoXY>
	SSD1306_Puts ("Your", &Font_11x18, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	4961      	ldr	r1, [pc, #388]	; (8000358 <main+0x20c>)
 80001d4:	4865      	ldr	r0, [pc, #404]	; (800036c <main+0x220>)
 80001d6:	f000 fe15 	bl	8000e04 <SSD1306_Puts>
	SSD1306_GotoXY (10, 45);
 80001da:	212d      	movs	r1, #45	; 0x2d
 80001dc:	200a      	movs	r0, #10
 80001de:	f000 fd7b 	bl	8000cd8 <SSD1306_GotoXY>
	SSD1306_Puts ("Card", &Font_11x18, 1);
 80001e2:	2201      	movs	r2, #1
 80001e4:	495c      	ldr	r1, [pc, #368]	; (8000358 <main+0x20c>)
 80001e6:	4862      	ldr	r0, [pc, #392]	; (8000370 <main+0x224>)
 80001e8:	f000 fe0c 	bl	8000e04 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 80001ec:	f000 fcd0 	bl	8000b90 <SSD1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  status = MFRC522_Request(PICC_REQIDL, str);
 80001f0:	4960      	ldr	r1, [pc, #384]	; (8000374 <main+0x228>)
 80001f2:	2026      	movs	r0, #38	; 0x26
 80001f4:	f000 fba6 	bl	8000944 <MFRC522_Request>
 80001f8:	4603      	mov	r3, r0
 80001fa:	461a      	mov	r2, r3
 80001fc:	4b5e      	ldr	r3, [pc, #376]	; (8000378 <main+0x22c>)
 80001fe:	701a      	strb	r2, [r3, #0]
	  status = MFRC522_Anticoll(str);
 8000200:	485c      	ldr	r0, [pc, #368]	; (8000374 <main+0x228>)
 8000202:	f000 fbc4 	bl	800098e <MFRC522_Anticoll>
 8000206:	4603      	mov	r3, r0
 8000208:	461a      	mov	r2, r3
 800020a:	4b5b      	ldr	r3, [pc, #364]	; (8000378 <main+0x22c>)
 800020c:	701a      	strb	r2, [r3, #0]
	  memcpy(sNum, str, 5);
 800020e:	4b5b      	ldr	r3, [pc, #364]	; (800037c <main+0x230>)
 8000210:	4a58      	ldr	r2, [pc, #352]	; (8000374 <main+0x228>)
 8000212:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000216:	6018      	str	r0, [r3, #0]
 8000218:	3304      	adds	r3, #4
 800021a:	7019      	strb	r1, [r3, #0]
	  HAL_Delay(100);
 800021c:	2064      	movs	r0, #100	; 0x64
 800021e:	f001 f829 	bl	8001274 <HAL_Delay>

	  if((sNum[0]==131) && (sNum[1]==49) && (sNum[2]==132) && (sNum[3]==228) && (sNum[4]==210) )
 8000222:	4b56      	ldr	r3, [pc, #344]	; (800037c <main+0x230>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b83      	cmp	r3, #131	; 0x83
 8000228:	d145      	bne.n	80002b6 <main+0x16a>
 800022a:	4b54      	ldr	r3, [pc, #336]	; (800037c <main+0x230>)
 800022c:	785b      	ldrb	r3, [r3, #1]
 800022e:	2b31      	cmp	r3, #49	; 0x31
 8000230:	d141      	bne.n	80002b6 <main+0x16a>
 8000232:	4b52      	ldr	r3, [pc, #328]	; (800037c <main+0x230>)
 8000234:	789b      	ldrb	r3, [r3, #2]
 8000236:	2b84      	cmp	r3, #132	; 0x84
 8000238:	d13d      	bne.n	80002b6 <main+0x16a>
 800023a:	4b50      	ldr	r3, [pc, #320]	; (800037c <main+0x230>)
 800023c:	78db      	ldrb	r3, [r3, #3]
 800023e:	2be4      	cmp	r3, #228	; 0xe4
 8000240:	d139      	bne.n	80002b6 <main+0x16a>
 8000242:	4b4e      	ldr	r3, [pc, #312]	; (800037c <main+0x230>)
 8000244:	791b      	ldrb	r3, [r3, #4]
 8000246:	2bd2      	cmp	r3, #210	; 0xd2
 8000248:	d135      	bne.n	80002b6 <main+0x16a>
	  {
		  SSD1306_GotoXY (10, 10);
 800024a:	210a      	movs	r1, #10
 800024c:	200a      	movs	r0, #10
 800024e:	f000 fd43 	bl	8000cd8 <SSD1306_GotoXY>
		  SSD1306_Puts ("     ", &Font_11x18, 1);
 8000252:	2201      	movs	r2, #1
 8000254:	4940      	ldr	r1, [pc, #256]	; (8000358 <main+0x20c>)
 8000256:	484a      	ldr	r0, [pc, #296]	; (8000380 <main+0x234>)
 8000258:	f000 fdd4 	bl	8000e04 <SSD1306_Puts>
		  SSD1306_GotoXY (10, 28);
 800025c:	211c      	movs	r1, #28
 800025e:	200a      	movs	r0, #10
 8000260:	f000 fd3a 	bl	8000cd8 <SSD1306_GotoXY>
		  SSD1306_Puts ("Locker", &Font_11x18, 1);
 8000264:	2201      	movs	r2, #1
 8000266:	493c      	ldr	r1, [pc, #240]	; (8000358 <main+0x20c>)
 8000268:	483d      	ldr	r0, [pc, #244]	; (8000360 <main+0x214>)
 800026a:	f000 fdcb 	bl	8000e04 <SSD1306_Puts>
		  SSD1306_GotoXY (10, 45);
 800026e:	212d      	movs	r1, #45	; 0x2d
 8000270:	200a      	movs	r0, #10
 8000272:	f000 fd31 	bl	8000cd8 <SSD1306_GotoXY>
		  SSD1306_Puts ("Alloted", &Font_11x18, 1);
 8000276:	2201      	movs	r2, #1
 8000278:	4937      	ldr	r1, [pc, #220]	; (8000358 <main+0x20c>)
 800027a:	4842      	ldr	r0, [pc, #264]	; (8000384 <main+0x238>)
 800027c:	f000 fdc2 	bl	8000e04 <SSD1306_Puts>
		  SSD1306_UpdateScreen(); // update screen
 8000280:	f000 fc86 	bl	8000b90 <SSD1306_UpdateScreen>

		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028a:	483f      	ldr	r0, [pc, #252]	; (8000388 <main+0x23c>)
 800028c:	f001 fa76 	bl	800177c <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 8000290:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000294:	f000 ffee 	bl	8001274 <HAL_Delay>
		  memset(sNum, 0, sizeof(sNum));
 8000298:	2205      	movs	r2, #5
 800029a:	2100      	movs	r1, #0
 800029c:	4837      	ldr	r0, [pc, #220]	; (800037c <main+0x230>)
 800029e:	f002 ff57 	bl	8003150 <memset>
		  memset(str, 0, sizeof(str));
 80002a2:	2210      	movs	r2, #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	4833      	ldr	r0, [pc, #204]	; (8000374 <main+0x228>)
 80002a8:	f002 ff52 	bl	8003150 <memset>

		  SSD1306_Clear();
 80002ac:	f000 fdcf 	bl	8000e4e <SSD1306_Clear>
		  SSD1306_UpdateScreen(); // update screen
 80002b0:	f000 fc6e 	bl	8000b90 <SSD1306_UpdateScreen>

		  goto Label1;
 80002b4:	e77f      	b.n	80001b6 <main+0x6a>

	  }
	  else if((sNum[0]==147) && (sNum[1]==32) && (sNum[2]==104) && (sNum[3]==163) && (sNum[4]==124) )
 80002b6:	4b31      	ldr	r3, [pc, #196]	; (800037c <main+0x230>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b93      	cmp	r3, #147	; 0x93
 80002bc:	d145      	bne.n	800034a <main+0x1fe>
 80002be:	4b2f      	ldr	r3, [pc, #188]	; (800037c <main+0x230>)
 80002c0:	785b      	ldrb	r3, [r3, #1]
 80002c2:	2b20      	cmp	r3, #32
 80002c4:	d141      	bne.n	800034a <main+0x1fe>
 80002c6:	4b2d      	ldr	r3, [pc, #180]	; (800037c <main+0x230>)
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	2b68      	cmp	r3, #104	; 0x68
 80002cc:	d13d      	bne.n	800034a <main+0x1fe>
 80002ce:	4b2b      	ldr	r3, [pc, #172]	; (800037c <main+0x230>)
 80002d0:	78db      	ldrb	r3, [r3, #3]
 80002d2:	2ba3      	cmp	r3, #163	; 0xa3
 80002d4:	d139      	bne.n	800034a <main+0x1fe>
 80002d6:	4b29      	ldr	r3, [pc, #164]	; (800037c <main+0x230>)
 80002d8:	791b      	ldrb	r3, [r3, #4]
 80002da:	2b7c      	cmp	r3, #124	; 0x7c
 80002dc:	d135      	bne.n	800034a <main+0x1fe>
	  {
		  SSD1306_GotoXY (10, 10);
 80002de:	210a      	movs	r1, #10
 80002e0:	200a      	movs	r0, #10
 80002e2:	f000 fcf9 	bl	8000cd8 <SSD1306_GotoXY>
		  SSD1306_Puts ("     ", &Font_11x18, 1);
 80002e6:	2201      	movs	r2, #1
 80002e8:	491b      	ldr	r1, [pc, #108]	; (8000358 <main+0x20c>)
 80002ea:	4825      	ldr	r0, [pc, #148]	; (8000380 <main+0x234>)
 80002ec:	f000 fd8a 	bl	8000e04 <SSD1306_Puts>
		  SSD1306_GotoXY (10, 28);
 80002f0:	211c      	movs	r1, #28
 80002f2:	200a      	movs	r0, #10
 80002f4:	f000 fcf0 	bl	8000cd8 <SSD1306_GotoXY>
		  SSD1306_Puts ("Locker", &Font_11x18, 1);
 80002f8:	2201      	movs	r2, #1
 80002fa:	4917      	ldr	r1, [pc, #92]	; (8000358 <main+0x20c>)
 80002fc:	4818      	ldr	r0, [pc, #96]	; (8000360 <main+0x214>)
 80002fe:	f000 fd81 	bl	8000e04 <SSD1306_Puts>
		  SSD1306_GotoXY (10, 45);
 8000302:	212d      	movs	r1, #45	; 0x2d
 8000304:	200a      	movs	r0, #10
 8000306:	f000 fce7 	bl	8000cd8 <SSD1306_GotoXY>
		  SSD1306_Puts ("Alloted", &Font_11x18, 1);
 800030a:	2201      	movs	r2, #1
 800030c:	4912      	ldr	r1, [pc, #72]	; (8000358 <main+0x20c>)
 800030e:	481d      	ldr	r0, [pc, #116]	; (8000384 <main+0x238>)
 8000310:	f000 fd78 	bl	8000e04 <SSD1306_Puts>
		  SSD1306_UpdateScreen(); // update screen
 8000314:	f000 fc3c 	bl	8000b90 <SSD1306_UpdateScreen>

		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031e:	481a      	ldr	r0, [pc, #104]	; (8000388 <main+0x23c>)
 8000320:	f001 fa2c 	bl	800177c <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 8000324:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000328:	f000 ffa4 	bl	8001274 <HAL_Delay>
		  memset(sNum, 0, sizeof(sNum));
 800032c:	2205      	movs	r2, #5
 800032e:	2100      	movs	r1, #0
 8000330:	4812      	ldr	r0, [pc, #72]	; (800037c <main+0x230>)
 8000332:	f002 ff0d 	bl	8003150 <memset>
		  memset(str, 0, sizeof(str));
 8000336:	2210      	movs	r2, #16
 8000338:	2100      	movs	r1, #0
 800033a:	480e      	ldr	r0, [pc, #56]	; (8000374 <main+0x228>)
 800033c:	f002 ff08 	bl	8003150 <memset>

		  SSD1306_Clear();
 8000340:	f000 fd85 	bl	8000e4e <SSD1306_Clear>
		  SSD1306_UpdateScreen(); // update screen
 8000344:	f000 fc24 	bl	8000b90 <SSD1306_UpdateScreen>

		  goto Label1;
 8000348:	e735      	b.n	80001b6 <main+0x6a>
	  }
	  else
	  {
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 800034a:	2201      	movs	r2, #1
 800034c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <main+0x23c>)
 8000352:	f001 fa13 	bl	800177c <HAL_GPIO_WritePin>
	  status = MFRC522_Request(PICC_REQIDL, str);
 8000356:	e74b      	b.n	80001f0 <main+0xa4>
 8000358:	20000000 	.word	0x20000000
 800035c:	08003178 	.word	0x08003178
 8000360:	08003180 	.word	0x08003180
 8000364:	08003188 	.word	0x08003188
 8000368:	08003194 	.word	0x08003194
 800036c:	0800319c 	.word	0x0800319c
 8000370:	080031a4 	.word	0x080031a4
 8000374:	200000e0 	.word	0x200000e0
 8000378:	200000dc 	.word	0x200000dc
 800037c:	200000f0 	.word	0x200000f0
 8000380:	080031ac 	.word	0x080031ac
 8000384:	080031b4 	.word	0x080031b4
 8000388:	40011000 	.word	0x40011000

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b090      	sub	sp, #64	; 0x40
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fed8 	bl	8003150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ae:	2301      	movs	r3, #1
 80003b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003bc:	2301      	movs	r3, #1
 80003be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c0:	2302      	movs	r3, #2
 80003c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d0:	f107 0318 	add.w	r3, r7, #24
 80003d4:	4618      	mov	r0, r3
 80003d6:	f001 ffb3 	bl	8002340 <HAL_RCC_OscConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003e0:	f000 f900 	bl	80005e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e4:	230f      	movs	r3, #15
 80003e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e8:	2302      	movs	r3, #2
 80003ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2102      	movs	r1, #2
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 fa20 	bl	8002844 <HAL_RCC_ClockConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800040a:	f000 f8eb 	bl	80005e4 <Error_Handler>
  }
}
 800040e:	bf00      	nop
 8000410:	3740      	adds	r7, #64	; 0x40
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_I2C1_Init+0x50>)
 800041e:	4a13      	ldr	r2, [pc, #76]	; (800046c <MX_I2C1_Init+0x54>)
 8000420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_I2C1_Init+0x50>)
 8000424:	4a12      	ldr	r2, [pc, #72]	; (8000470 <MX_I2C1_Init+0x58>)
 8000426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_I2C1_Init+0x50>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_I2C1_Init+0x50>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_I2C1_Init+0x50>)
 8000436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800043a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <MX_I2C1_Init+0x50>)
 800043e:	2200      	movs	r2, #0
 8000440:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_I2C1_Init+0x50>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <MX_I2C1_Init+0x50>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_I2C1_Init+0x50>)
 8000450:	2200      	movs	r2, #0
 8000452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_I2C1_Init+0x50>)
 8000456:	f001 f9a9 	bl	80017ac <HAL_I2C_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000460:	f000 f8c0 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000030 	.word	0x20000030
 800046c:	40005400 	.word	0x40005400
 8000470:	00061a80 	.word	0x00061a80

08000474 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000478:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_SPI1_Init+0x64>)
 800047a:	4a18      	ldr	r2, [pc, #96]	; (80004dc <MX_SPI1_Init+0x68>)
 800047c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800047e:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <MX_SPI1_Init+0x64>)
 8000480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000484:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_SPI1_Init+0x64>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_SPI1_Init+0x64>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_SPI1_Init+0x64>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_SPI1_Init+0x64>)
 800049a:	2200      	movs	r2, #0
 800049c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004a8:	2210      	movs	r2, #16
 80004aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004c0:	220a      	movs	r2, #10
 80004c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <MX_SPI1_Init+0x64>)
 80004c6:	f002 fb37 	bl	8002b38 <HAL_SPI_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004d0:	f000 f888 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000084 	.word	0x20000084
 80004dc:	40013000 	.word	0x40013000

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f4:	4b37      	ldr	r3, [pc, #220]	; (80005d4 <MX_GPIO_Init+0xf4>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a36      	ldr	r2, [pc, #216]	; (80005d4 <MX_GPIO_Init+0xf4>)
 80004fa:	f043 0310 	orr.w	r3, r3, #16
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <MX_GPIO_Init+0xf4>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0310 	and.w	r3, r3, #16
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800050c:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <MX_GPIO_Init+0xf4>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a30      	ldr	r2, [pc, #192]	; (80005d4 <MX_GPIO_Init+0xf4>)
 8000512:	f043 0320 	orr.w	r3, r3, #32
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <MX_GPIO_Init+0xf4>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0320 	and.w	r3, r3, #32
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <MX_GPIO_Init+0xf4>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a2a      	ldr	r2, [pc, #168]	; (80005d4 <MX_GPIO_Init+0xf4>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <MX_GPIO_Init+0xf4>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <MX_GPIO_Init+0xf4>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a24      	ldr	r2, [pc, #144]	; (80005d4 <MX_GPIO_Init+0xf4>)
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <MX_GPIO_Init+0xf4>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055a:	481f      	ldr	r0, [pc, #124]	; (80005d8 <MX_GPIO_Init+0xf8>)
 800055c:	f001 f90e 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2110      	movs	r1, #16
 8000564:	481d      	ldr	r0, [pc, #116]	; (80005dc <MX_GPIO_Init+0xfc>)
 8000566:	f001 f909 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2101      	movs	r1, #1
 800056e:	481c      	ldr	r0, [pc, #112]	; (80005e0 <MX_GPIO_Init+0x100>)
 8000570:	f001 f904 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2302      	movs	r3, #2
 8000584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	4619      	mov	r1, r3
 800058c:	4812      	ldr	r0, [pc, #72]	; (80005d8 <MX_GPIO_Init+0xf8>)
 800058e:	f000 ff79 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000592:	2310      	movs	r3, #16
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2302      	movs	r3, #2
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <MX_GPIO_Init+0xfc>)
 80005aa:	f000 ff6b 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005ae:	2301      	movs	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4619      	mov	r1, r3
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <MX_GPIO_Init+0x100>)
 80005c6:	f000 ff5d 	bl	8001484 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ca:	bf00      	nop
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40011000 	.word	0x40011000
 80005dc:	40010800 	.word	0x40010800
 80005e0:	40010c00 	.word	0x40010c00

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
}
 80005ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ec:	e7fe      	b.n	80005ec <Error_Handler+0x8>
	...

080005f0 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80005fa:	f107 020f 	add.w	r2, r7, #15
 80005fe:	1df9      	adds	r1, r7, #7
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <RC522_SPI_Transfer+0x28>)
 8000608:	f002 fb1a 	bl	8002c40 <HAL_SPI_TransmitReceive>

	return rx_data;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000084 	.word	0x20000084

0800061c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2110      	movs	r1, #16
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <Write_MFRC522+0x48>)
 8000632:	f001 f8a3 	bl	800177c <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ffd4 	bl	80005f0 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffd0 	bl	80005f0 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <Write_MFRC522+0x48>)
 8000656:	f001 f891 	bl	800177c <HAL_GPIO_WritePin>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40010800 	.word	0x40010800

08000668 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2110      	movs	r1, #16
 8000676:	480f      	ldr	r0, [pc, #60]	; (80006b4 <Read_MFRC522+0x4c>)
 8000678:	f001 f880 	bl	800177c <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	b25b      	sxtb	r3, r3
 8000682:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000686:	b25b      	sxtb	r3, r3
 8000688:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800068c:	b25b      	sxtb	r3, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ffad 	bl	80005f0 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ffaa 	bl	80005f0 <RC522_SPI_Transfer>
 800069c:	4603      	mov	r3, r0
 800069e:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2110      	movs	r1, #16
 80006a4:	4803      	ldr	r0, [pc, #12]	; (80006b4 <Read_MFRC522+0x4c>)
 80006a6:	f001 f869 	bl	800177c <HAL_GPIO_WritePin>

	return val;
 80006aa:	7bfb      	ldrb	r3, [r7, #15]

}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40010800 	.word	0x40010800

080006b8 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	460a      	mov	r2, r1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffcc 	bl	8000668 <Read_MFRC522>
 80006d0:	4603      	mov	r3, r0
 80006d2:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80006d4:	7bfa      	ldrb	r2, [r7, #15]
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	4313      	orrs	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff9b 	bl	800061c <Write_MFRC522>
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b084      	sub	sp, #16
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	460a      	mov	r2, r1
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	4613      	mov	r3, r2
 80006fc:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ffb1 	bl	8000668 <Read_MFRC522>
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800070a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800070e:	43db      	mvns	r3, r3
 8000710:	b25a      	sxtb	r2, r3
 8000712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000716:	4013      	ands	r3, r2
 8000718:	b25b      	sxtb	r3, r3
 800071a:	b2da      	uxtb	r2, r3
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4611      	mov	r1, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff7b 	bl	800061c <Write_MFRC522>
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000732:	2014      	movs	r0, #20
 8000734:	f7ff ff98 	bl	8000668 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000738:	2103      	movs	r1, #3
 800073a:	2014      	movs	r0, #20
 800073c:	f7ff ffbc 	bl	80006b8 <SetBitMask>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000748:	210f      	movs	r1, #15
 800074a:	2001      	movs	r0, #1
 800074c:	f7ff ff66 	bl	800061c <Write_MFRC522>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2110      	movs	r1, #16
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MFRC522_Init+0x54>)
 800075e:	f001 f80d 	bl	800177c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2101      	movs	r1, #1
 8000766:	4811      	ldr	r0, [pc, #68]	; (80007ac <MFRC522_Init+0x58>)
 8000768:	f001 f808 	bl	800177c <HAL_GPIO_WritePin>
	MFRC522_Reset();
 800076c:	f7ff ffea 	bl	8000744 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000770:	218d      	movs	r1, #141	; 0x8d
 8000772:	202a      	movs	r0, #42	; 0x2a
 8000774:	f7ff ff52 	bl	800061c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000778:	213e      	movs	r1, #62	; 0x3e
 800077a:	202b      	movs	r0, #43	; 0x2b
 800077c:	f7ff ff4e 	bl	800061c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000780:	211e      	movs	r1, #30
 8000782:	202d      	movs	r0, #45	; 0x2d
 8000784:	f7ff ff4a 	bl	800061c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000788:	2100      	movs	r1, #0
 800078a:	202c      	movs	r0, #44	; 0x2c
 800078c:	f7ff ff46 	bl	800061c <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	2015      	movs	r0, #21
 8000794:	f7ff ff42 	bl	800061c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000798:	213d      	movs	r1, #61	; 0x3d
 800079a:	2011      	movs	r0, #17
 800079c:	f7ff ff3e 	bl	800061c <Write_MFRC522>

	AntennaOn();
 80007a0:	f7ff ffc5 	bl	800072e <AntennaOn>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40010800 	.word	0x40010800
 80007ac:	40010c00 	.word	0x40010c00

080007b0 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint8_t *backLen)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4603      	mov	r3, r0
 80007bc:	73fb      	strb	r3, [r7, #15]
 80007be:	4613      	mov	r3, r2
 80007c0:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 80007c2:	2302      	movs	r3, #2
 80007c4:	75fb      	strb	r3, [r7, #23]
    uchar irqEn = 0x00;
 80007c6:	2300      	movs	r3, #0
 80007c8:	75bb      	strb	r3, [r7, #22]
    uchar waitIRq = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	757b      	strb	r3, [r7, #21]
    uchar lastBits;
    uchar n;
    uint8_t i;

    switch (command)
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	2b0c      	cmp	r3, #12
 80007d2:	d006      	beq.n	80007e2 <MFRC522_ToCard+0x32>
 80007d4:	2b0e      	cmp	r3, #14
 80007d6:	d109      	bne.n	80007ec <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 80007d8:	2312      	movs	r3, #18
 80007da:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80007dc:	2310      	movs	r3, #16
 80007de:	757b      	strb	r3, [r7, #21]
			break;
 80007e0:	e005      	b.n	80007ee <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 80007e2:	2377      	movs	r3, #119	; 0x77
 80007e4:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80007e6:	2330      	movs	r3, #48	; 0x30
 80007e8:	757b      	strb	r3, [r7, #21]
			break;
 80007ea:	e000      	b.n	80007ee <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80007ec:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80007ee:	7dbb      	ldrb	r3, [r7, #22]
 80007f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4619      	mov	r1, r3
 80007f8:	2002      	movs	r0, #2
 80007fa:	f7ff ff0f 	bl	800061c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	2004      	movs	r0, #4
 8000802:	f7ff ff74 	bl	80006ee <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	200a      	movs	r0, #10
 800080a:	f7ff ff55 	bl	80006b8 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800080e:	2100      	movs	r1, #0
 8000810:	2001      	movs	r0, #1
 8000812:	f7ff ff03 	bl	800061c <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000816:	2300      	movs	r3, #0
 8000818:	74fb      	strb	r3, [r7, #19]
 800081a:	e00a      	b.n	8000832 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 800081c:	7cfb      	ldrb	r3, [r7, #19]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	2009      	movs	r0, #9
 8000828:	f7ff fef8 	bl	800061c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 800082c:	7cfb      	ldrb	r3, [r7, #19]
 800082e:	3301      	adds	r3, #1
 8000830:	74fb      	strb	r3, [r7, #19]
 8000832:	7cfa      	ldrb	r2, [r7, #19]
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	429a      	cmp	r2, r3
 8000838:	d3f0      	bcc.n	800081c <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	4619      	mov	r1, r3
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff feec 	bl	800061c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	2b0c      	cmp	r3, #12
 8000848:	d103      	bne.n	8000852 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 800084a:	2180      	movs	r1, #128	; 0x80
 800084c:	200d      	movs	r0, #13
 800084e:	f7ff ff33 	bl	80006b8 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000852:	23d0      	movs	r3, #208	; 0xd0
 8000854:	74fb      	strb	r3, [r7, #19]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000856:	2004      	movs	r0, #4
 8000858:	f7ff ff06 	bl	8000668 <Read_MFRC522>
 800085c:	4603      	mov	r3, r0
 800085e:	753b      	strb	r3, [r7, #20]
        i--;
 8000860:	7cfb      	ldrb	r3, [r7, #19]
 8000862:	3b01      	subs	r3, #1
 8000864:	74fb      	strb	r3, [r7, #19]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000866:	7cfb      	ldrb	r3, [r7, #19]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00a      	beq.n	8000882 <MFRC522_ToCard+0xd2>
 800086c:	7d3b      	ldrb	r3, [r7, #20]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d105      	bne.n	8000882 <MFRC522_ToCard+0xd2>
 8000876:	7d3a      	ldrb	r2, [r7, #20]
 8000878:	7d7b      	ldrb	r3, [r7, #21]
 800087a:	4013      	ands	r3, r2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0e9      	beq.n	8000856 <MFRC522_ToCard+0xa6>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	200d      	movs	r0, #13
 8000886:	f7ff ff32 	bl	80006ee <ClearBitMask>

    if (i != 0)
 800088a:	7cfb      	ldrb	r3, [r7, #19]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d054      	beq.n	800093a <MFRC522_ToCard+0x18a>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000890:	2006      	movs	r0, #6
 8000892:	f7ff fee9 	bl	8000668 <Read_MFRC522>
 8000896:	4603      	mov	r3, r0
 8000898:	f003 031b 	and.w	r3, r3, #27
 800089c:	2b00      	cmp	r3, #0
 800089e:	d14a      	bne.n	8000936 <MFRC522_ToCard+0x186>
        {
            status = MI_OK;
 80008a0:	2300      	movs	r3, #0
 80008a2:	75fb      	strb	r3, [r7, #23]
            if (n & irqEn & 0x01)
 80008a4:	7d3a      	ldrb	r2, [r7, #20]
 80008a6:	7dbb      	ldrb	r3, [r7, #22]
 80008a8:	4013      	ands	r3, r2
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MFRC522_ToCard+0x108>
            {
				status = MI_NOTAGERR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	75fb      	strb	r3, [r7, #23]
			}

            if (command == PCD_TRANSCEIVE)
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	2b0c      	cmp	r3, #12
 80008bc:	d13d      	bne.n	800093a <MFRC522_ToCard+0x18a>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 80008be:	200a      	movs	r0, #10
 80008c0:	f7ff fed2 	bl	8000668 <Read_MFRC522>
 80008c4:	4603      	mov	r3, r0
 80008c6:	753b      	strb	r3, [r7, #20]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80008c8:	200c      	movs	r0, #12
 80008ca:	f7ff fecd 	bl	8000668 <Read_MFRC522>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f003 0307 	and.w	r3, r3, #7
 80008d4:	74bb      	strb	r3, [r7, #18]
                if (lastBits)
 80008d6:	7cbb      	ldrb	r3, [r7, #18]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00a      	beq.n	80008f2 <MFRC522_ToCard+0x142>
                {
					*backLen = (n-1)*8 + lastBits;
 80008dc:	7d3b      	ldrb	r3, [r7, #20]
 80008de:	3b01      	subs	r3, #1
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	7cbb      	ldrb	r3, [r7, #18]
 80008e8:	4413      	add	r3, r2
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e004      	b.n	80008fc <MFRC522_ToCard+0x14c>
				}
                else
                {
					*backLen = n*8;
 80008f2:	7d3b      	ldrb	r3, [r7, #20]
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fa:	701a      	strb	r2, [r3, #0]
				}

                if (n == 0)
 80008fc:	7d3b      	ldrb	r3, [r7, #20]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <MFRC522_ToCard+0x156>
                {
					n = 1;
 8000902:	2301      	movs	r3, #1
 8000904:	753b      	strb	r3, [r7, #20]
				}
                if (n > MAX_LEN)
 8000906:	7d3b      	ldrb	r3, [r7, #20]
 8000908:	2b10      	cmp	r3, #16
 800090a:	d901      	bls.n	8000910 <MFRC522_ToCard+0x160>
                {
					n = MAX_LEN;
 800090c:	2310      	movs	r3, #16
 800090e:	753b      	strb	r3, [r7, #20]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000910:	2300      	movs	r3, #0
 8000912:	74fb      	strb	r3, [r7, #19]
 8000914:	e00a      	b.n	800092c <MFRC522_ToCard+0x17c>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000916:	7cfb      	ldrb	r3, [r7, #19]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	18d4      	adds	r4, r2, r3
 800091c:	2009      	movs	r0, #9
 800091e:	f7ff fea3 	bl	8000668 <Read_MFRC522>
 8000922:	4603      	mov	r3, r0
 8000924:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000926:	7cfb      	ldrb	r3, [r7, #19]
 8000928:	3301      	adds	r3, #1
 800092a:	74fb      	strb	r3, [r7, #19]
 800092c:	7cfa      	ldrb	r2, [r7, #19]
 800092e:	7d3b      	ldrb	r3, [r7, #20]
 8000930:	429a      	cmp	r2, r3
 8000932:	d3f0      	bcc.n	8000916 <MFRC522_ToCard+0x166>
 8000934:	e001      	b.n	800093a <MFRC522_ToCard+0x18a>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000936:	2302      	movs	r3, #2
 8000938:	75fb      	strb	r3, [r7, #23]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 800093a:	7dfb      	ldrb	r3, [r7, #23]
}
 800093c:	4618      	mov	r0, r3
 800093e:	371c      	adds	r7, #28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd90      	pop	{r4, r7, pc}

08000944 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af02      	add	r7, sp, #8
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint8_t backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000950:	2107      	movs	r1, #7
 8000952:	200d      	movs	r0, #13
 8000954:	f7ff fe62 	bl	800061c <Write_MFRC522>

	TagType[0] = reqMode;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800095e:	f107 030e 	add.w	r3, r7, #14
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	2201      	movs	r2, #1
 8000968:	6839      	ldr	r1, [r7, #0]
 800096a:	200c      	movs	r0, #12
 800096c:	f7ff ff20 	bl	80007b0 <MFRC522_ToCard>
 8000970:	4603      	mov	r3, r0
 8000972:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d102      	bne.n	8000980 <MFRC522_Request+0x3c>
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	2b10      	cmp	r3, #16
 800097e:	d001      	beq.n	8000984 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000980:	2302      	movs	r3, #2
 8000982:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af02      	add	r7, sp, #8
 8000994:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000996:	2300      	movs	r3, #0
 8000998:	737b      	strb	r3, [r7, #13]
    uint8_t unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800099a:	2100      	movs	r1, #0
 800099c:	200d      	movs	r0, #13
 800099e:	f7ff fe3d 	bl	800061c <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2293      	movs	r2, #147	; 0x93
 80009a6:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3301      	adds	r3, #1
 80009ac:	2220      	movs	r2, #32
 80009ae:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2202      	movs	r2, #2
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	200c      	movs	r0, #12
 80009be:	f7ff fef7 	bl	80007b0 <MFRC522_ToCard>
 80009c2:	4603      	mov	r3, r0
 80009c4:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d118      	bne.n	80009fe <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	73bb      	strb	r3, [r7, #14]
 80009d0:	e009      	b.n	80009e6 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	7b7b      	ldrb	r3, [r7, #13]
 80009dc:	4053      	eors	r3, r2
 80009de:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	3301      	adds	r3, #1
 80009e4:	73bb      	strb	r3, [r7, #14]
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d9f2      	bls.n	80009d2 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	7b7a      	ldrb	r2, [r7, #13]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d001      	beq.n	80009fe <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 80009fa:	2302      	movs	r3, #2
 80009fc:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000a0e:	f000 fa27 	bl	8000e60 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000a12:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a16:	2201      	movs	r2, #1
 8000a18:	2178      	movs	r1, #120	; 0x78
 8000a1a:	485b      	ldr	r0, [pc, #364]	; (8000b88 <SSD1306_Init+0x180>)
 8000a1c:	f001 f908 	bl	8001c30 <HAL_I2C_IsDeviceReady>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e0a9      	b.n	8000b7e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000a2a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000a2e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a30:	e002      	b.n	8000a38 <SSD1306_Init+0x30>
		p--;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1f9      	bne.n	8000a32 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a3e:	22ae      	movs	r2, #174	; 0xae
 8000a40:	2100      	movs	r1, #0
 8000a42:	2078      	movs	r0, #120	; 0x78
 8000a44:	f000 fa86 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000a48:	2220      	movs	r2, #32
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2078      	movs	r0, #120	; 0x78
 8000a4e:	f000 fa81 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a52:	2210      	movs	r2, #16
 8000a54:	2100      	movs	r1, #0
 8000a56:	2078      	movs	r0, #120	; 0x78
 8000a58:	f000 fa7c 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a5c:	22b0      	movs	r2, #176	; 0xb0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2078      	movs	r0, #120	; 0x78
 8000a62:	f000 fa77 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a66:	22c8      	movs	r2, #200	; 0xc8
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2078      	movs	r0, #120	; 0x78
 8000a6c:	f000 fa72 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2078      	movs	r0, #120	; 0x78
 8000a76:	f000 fa6d 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a7a:	2210      	movs	r2, #16
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2078      	movs	r0, #120	; 0x78
 8000a80:	f000 fa68 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a84:	2240      	movs	r2, #64	; 0x40
 8000a86:	2100      	movs	r1, #0
 8000a88:	2078      	movs	r0, #120	; 0x78
 8000a8a:	f000 fa63 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a8e:	2281      	movs	r2, #129	; 0x81
 8000a90:	2100      	movs	r1, #0
 8000a92:	2078      	movs	r0, #120	; 0x78
 8000a94:	f000 fa5e 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2078      	movs	r0, #120	; 0x78
 8000a9e:	f000 fa59 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000aa2:	22a1      	movs	r2, #161	; 0xa1
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2078      	movs	r0, #120	; 0x78
 8000aa8:	f000 fa54 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000aac:	22a6      	movs	r2, #166	; 0xa6
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2078      	movs	r0, #120	; 0x78
 8000ab2:	f000 fa4f 	bl	8000f54 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000ab6:	22a8      	movs	r2, #168	; 0xa8
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2078      	movs	r0, #120	; 0x78
 8000abc:	f000 fa4a 	bl	8000f54 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8000ac0:	223f      	movs	r2, #63	; 0x3f
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2078      	movs	r0, #120	; 0x78
 8000ac6:	f000 fa45 	bl	8000f54 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000aca:	22a4      	movs	r2, #164	; 0xa4
 8000acc:	2100      	movs	r1, #0
 8000ace:	2078      	movs	r0, #120	; 0x78
 8000ad0:	f000 fa40 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ad4:	22d3      	movs	r2, #211	; 0xd3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2078      	movs	r0, #120	; 0x78
 8000ada:	f000 fa3b 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2078      	movs	r0, #120	; 0x78
 8000ae4:	f000 fa36 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ae8:	22d5      	movs	r2, #213	; 0xd5
 8000aea:	2100      	movs	r1, #0
 8000aec:	2078      	movs	r0, #120	; 0x78
 8000aee:	f000 fa31 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000af2:	22f0      	movs	r2, #240	; 0xf0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2078      	movs	r0, #120	; 0x78
 8000af8:	f000 fa2c 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000afc:	22d9      	movs	r2, #217	; 0xd9
 8000afe:	2100      	movs	r1, #0
 8000b00:	2078      	movs	r0, #120	; 0x78
 8000b02:	f000 fa27 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000b06:	2222      	movs	r2, #34	; 0x22
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2078      	movs	r0, #120	; 0x78
 8000b0c:	f000 fa22 	bl	8000f54 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000b10:	22da      	movs	r2, #218	; 0xda
 8000b12:	2100      	movs	r1, #0
 8000b14:	2078      	movs	r0, #120	; 0x78
 8000b16:	f000 fa1d 	bl	8000f54 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8000b1a:	2212      	movs	r2, #18
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2078      	movs	r0, #120	; 0x78
 8000b20:	f000 fa18 	bl	8000f54 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000b24:	22db      	movs	r2, #219	; 0xdb
 8000b26:	2100      	movs	r1, #0
 8000b28:	2078      	movs	r0, #120	; 0x78
 8000b2a:	f000 fa13 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000b2e:	2220      	movs	r2, #32
 8000b30:	2100      	movs	r1, #0
 8000b32:	2078      	movs	r0, #120	; 0x78
 8000b34:	f000 fa0e 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b38:	228d      	movs	r2, #141	; 0x8d
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2078      	movs	r0, #120	; 0x78
 8000b3e:	f000 fa09 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b42:	2214      	movs	r2, #20
 8000b44:	2100      	movs	r1, #0
 8000b46:	2078      	movs	r0, #120	; 0x78
 8000b48:	f000 fa04 	bl	8000f54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b4c:	22af      	movs	r2, #175	; 0xaf
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2078      	movs	r0, #120	; 0x78
 8000b52:	f000 f9ff 	bl	8000f54 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b56:	222e      	movs	r2, #46	; 0x2e
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2078      	movs	r0, #120	; 0x78
 8000b5c:	f000 f9fa 	bl	8000f54 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 f843 	bl	8000bec <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000b66:	f000 f813 	bl	8000b90 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <SSD1306_Init+0x184>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SSD1306_Init+0x184>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SSD1306_Init+0x184>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000b7c:	2301      	movs	r3, #1
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000030 	.word	0x20000030
 8000b8c:	200004f8 	.word	0x200004f8

08000b90 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	e01d      	b.n	8000bd8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	3b50      	subs	r3, #80	; 0x50
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2078      	movs	r0, #120	; 0x78
 8000ba8:	f000 f9d4 	bl	8000f54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2078      	movs	r0, #120	; 0x78
 8000bb2:	f000 f9cf 	bl	8000f54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000bb6:	2210      	movs	r2, #16
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2078      	movs	r0, #120	; 0x78
 8000bbc:	f000 f9ca 	bl	8000f54 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	01db      	lsls	r3, r3, #7
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <SSD1306_UpdateScreen+0x58>)
 8000bc6:	441a      	add	r2, r3
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	2140      	movs	r1, #64	; 0x40
 8000bcc:	2078      	movs	r0, #120	; 0x78
 8000bce:	f000 f95b 	bl	8000e88 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b07      	cmp	r3, #7
 8000bdc:	d9de      	bls.n	8000b9c <SSD1306_UpdateScreen+0xc>
	}
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000f8 	.word	0x200000f8

08000bec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d101      	bne.n	8000c00 <SSD1306_Fill+0x14>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e000      	b.n	8000c02 <SSD1306_Fill+0x16>
 8000c00:	23ff      	movs	r3, #255	; 0xff
 8000c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c06:	4619      	mov	r1, r3
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <SSD1306_Fill+0x2c>)
 8000c0a:	f002 faa1 	bl	8003150 <memset>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200000f8 	.word	0x200000f8

08000c1c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	460b      	mov	r3, r1
 8000c28:	80bb      	strh	r3, [r7, #4]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	70fb      	strb	r3, [r7, #3]
	if (
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	2b7f      	cmp	r3, #127	; 0x7f
 8000c32:	d848      	bhi.n	8000cc6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	2b3f      	cmp	r3, #63	; 0x3f
 8000c38:	d845      	bhi.n	8000cc6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000c3a:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <SSD1306_DrawPixel+0xb4>)
 8000c3c:	791b      	ldrb	r3, [r3, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d006      	beq.n	8000c50 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bf0c      	ite	eq
 8000c48:	2301      	moveq	r3, #1
 8000c4a:	2300      	movne	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d11a      	bne.n	8000c8c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c56:	88fa      	ldrh	r2, [r7, #6]
 8000c58:	88bb      	ldrh	r3, [r7, #4]
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	b298      	uxth	r0, r3
 8000c5e:	4603      	mov	r3, r0
 8000c60:	01db      	lsls	r3, r3, #7
 8000c62:	4413      	add	r3, r2
 8000c64:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <SSD1306_DrawPixel+0xb8>)
 8000c66:	5cd3      	ldrb	r3, [r2, r3]
 8000c68:	b25a      	sxtb	r2, r3
 8000c6a:	88bb      	ldrh	r3, [r7, #4]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	2101      	movs	r1, #1
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b259      	sxtb	r1, r3
 8000c7c:	88fa      	ldrh	r2, [r7, #6]
 8000c7e:	4603      	mov	r3, r0
 8000c80:	01db      	lsls	r3, r3, #7
 8000c82:	4413      	add	r3, r2
 8000c84:	b2c9      	uxtb	r1, r1
 8000c86:	4a13      	ldr	r2, [pc, #76]	; (8000cd4 <SSD1306_DrawPixel+0xb8>)
 8000c88:	54d1      	strb	r1, [r2, r3]
 8000c8a:	e01d      	b.n	8000cc8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c8c:	88fa      	ldrh	r2, [r7, #6]
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	08db      	lsrs	r3, r3, #3
 8000c92:	b298      	uxth	r0, r3
 8000c94:	4603      	mov	r3, r0
 8000c96:	01db      	lsls	r3, r3, #7
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <SSD1306_DrawPixel+0xb8>)
 8000c9c:	5cd3      	ldrb	r3, [r2, r3]
 8000c9e:	b25a      	sxtb	r2, r3
 8000ca0:	88bb      	ldrh	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	b259      	sxtb	r1, r3
 8000cb6:	88fa      	ldrh	r2, [r7, #6]
 8000cb8:	4603      	mov	r3, r0
 8000cba:	01db      	lsls	r3, r3, #7
 8000cbc:	4413      	add	r3, r2
 8000cbe:	b2c9      	uxtb	r1, r1
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <SSD1306_DrawPixel+0xb8>)
 8000cc2:	54d1      	strb	r1, [r2, r3]
 8000cc4:	e000      	b.n	8000cc8 <SSD1306_DrawPixel+0xac>
		return;
 8000cc6:	bf00      	nop
	}
}
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	200004f8 	.word	0x200004f8
 8000cd4:	200000f8 	.word	0x200000f8

08000cd8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	80fb      	strh	r3, [r7, #6]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ce8:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <SSD1306_GotoXY+0x28>)
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <SSD1306_GotoXY+0x28>)
 8000cf0:	88bb      	ldrh	r3, [r7, #4]
 8000cf2:	8053      	strh	r3, [r2, #2]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200004f8 	.word	0x200004f8

08000d04 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d14:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <SSD1306_Putc+0xfc>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
	if (
 8000d20:	2b7f      	cmp	r3, #127	; 0x7f
 8000d22:	dc07      	bgt.n	8000d34 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000d24:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <SSD1306_Putc+0xfc>)
 8000d26:	885b      	ldrh	r3, [r3, #2]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d30:	2b3f      	cmp	r3, #63	; 0x3f
 8000d32:	dd01      	ble.n	8000d38 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	e05e      	b.n	8000df6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e04b      	b.n	8000dd6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	3b20      	subs	r3, #32
 8000d46:	6839      	ldr	r1, [r7, #0]
 8000d48:	7849      	ldrb	r1, [r1, #1]
 8000d4a:	fb01 f303 	mul.w	r3, r1, r3
 8000d4e:	4619      	mov	r1, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	440b      	add	r3, r1
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	e030      	b.n	8000dc4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d010      	beq.n	8000d94 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000d72:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <SSD1306_Putc+0xfc>)
 8000d74:	881a      	ldrh	r2, [r3, #0]
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b298      	uxth	r0, r3
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <SSD1306_Putc+0xfc>)
 8000d80:	885a      	ldrh	r2, [r3, #2]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	4413      	add	r3, r2
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	79ba      	ldrb	r2, [r7, #6]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f7ff ff45 	bl	8000c1c <SSD1306_DrawPixel>
 8000d92:	e014      	b.n	8000dbe <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <SSD1306_Putc+0xfc>)
 8000d96:	881a      	ldrh	r2, [r3, #0]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b298      	uxth	r0, r3
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <SSD1306_Putc+0xfc>)
 8000da2:	885a      	ldrh	r2, [r3, #2]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	b299      	uxth	r1, r3
 8000dac:	79bb      	ldrb	r3, [r7, #6]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf0c      	ite	eq
 8000db2:	2301      	moveq	r3, #1
 8000db4:	2300      	movne	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	f7ff ff2f 	bl	8000c1c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d3c8      	bcc.n	8000d62 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	785b      	ldrb	r3, [r3, #1]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d3ad      	bcc.n	8000d3e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <SSD1306_Putc+0xfc>)
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4413      	add	r3, r2
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <SSD1306_Putc+0xfc>)
 8000df2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200004f8 	.word	0x200004f8

08000e04 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000e12:	e012      	b.n	8000e3a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	79fa      	ldrb	r2, [r7, #7]
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff71 	bl	8000d04 <SSD1306_Putc>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d002      	beq.n	8000e34 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	e008      	b.n	8000e46 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3301      	adds	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1e8      	bne.n	8000e14 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	781b      	ldrb	r3, [r3, #0]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff feca 	bl	8000bec <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000e58:	f7ff fe9a 	bl	8000b90 <SSD1306_UpdateScreen>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <ssd1306_I2C_Init+0x24>)
 8000e68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e6a:	e002      	b.n	8000e72 <ssd1306_I2C_Init+0x12>
		p--;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1f9      	bne.n	8000e6c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	0003d090 	.word	0x0003d090

08000e88 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b0c7      	sub	sp, #284	; 0x11c
 8000e8c:	af02      	add	r7, sp, #8
 8000e8e:	4604      	mov	r4, r0
 8000e90:	4608      	mov	r0, r1
 8000e92:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000e96:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000e9a:	600a      	str	r2, [r1, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ea2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ea6:	4622      	mov	r2, r4
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eae:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ebe:	460a      	mov	r2, r1
 8000ec0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000ec2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000eca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ece:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000edc:	e015      	b.n	8000f0a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000ede:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ee2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ee6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	441a      	add	r2, r3
 8000eee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	7811      	ldrb	r1, [r2, #0]
 8000ef6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000efa:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000efe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f00:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f04:	3301      	adds	r3, #1
 8000f06:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f0a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f14:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000f18:	8812      	ldrh	r2, [r2, #0]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d8df      	bhi.n	8000ede <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8000f1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f22:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	9000      	str	r0, [sp, #0]
 8000f40:	4803      	ldr	r0, [pc, #12]	; (8000f50 <ssd1306_I2C_WriteMulti+0xc8>)
 8000f42:	f000 fd77 	bl	8001a34 <HAL_I2C_Master_Transmit>
}
 8000f46:	bf00      	nop
 8000f48:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd90      	pop	{r4, r7, pc}
 8000f50:	20000030 	.word	0x20000030

08000f54 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	71bb      	strb	r3, [r7, #6]
 8000f62:	4613      	mov	r3, r2
 8000f64:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	b299      	uxth	r1, r3
 8000f72:	f107 020c 	add.w	r2, r7, #12
 8000f76:	230a      	movs	r3, #10
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <ssd1306_I2C_Write+0x38>)
 8000f7e:	f000 fd59 	bl	8001a34 <HAL_I2C_Master_Transmit>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000030 	.word	0x20000030

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_MspInit+0x5c>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_MspInit+0x5c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_MspInit+0x5c>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_MspInit+0x5c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_MspInit+0x5c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_MspInit+0x5c>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_MspInit+0x60>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_MspInit+0x60>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <HAL_I2C_MspInit+0x74>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d125      	bne.n	8001060 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_I2C_MspInit+0x78>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_I2C_MspInit+0x78>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_I2C_MspInit+0x78>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800102c:	23c0      	movs	r3, #192	; 0xc0
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001030:	2312      	movs	r3, #18
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4619      	mov	r1, r3
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <HAL_I2C_MspInit+0x7c>)
 8001044:	f000 fa1e 	bl	8001484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_I2C_MspInit+0x78>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_I2C_MspInit+0x78>)
 800104e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001052:	61d3      	str	r3, [r2, #28]
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_I2C_MspInit+0x78>)
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40005400 	.word	0x40005400
 800106c:	40021000 	.word	0x40021000
 8001070:	40010c00 	.word	0x40010c00

08001074 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_SPI_MspInit+0x88>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d12f      	bne.n	80010f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_SPI_MspInit+0x8c>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_SPI_MspInit+0x8c>)
 800109a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_SPI_MspInit+0x8c>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_SPI_MspInit+0x8c>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <HAL_SPI_MspInit+0x8c>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_SPI_MspInit+0x8c>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010c4:	23a0      	movs	r3, #160	; 0xa0
 80010c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4619      	mov	r1, r3
 80010d6:	480b      	ldr	r0, [pc, #44]	; (8001104 <HAL_SPI_MspInit+0x90>)
 80010d8:	f000 f9d4 	bl	8001484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010dc:	2340      	movs	r3, #64	; 0x40
 80010de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_SPI_MspInit+0x90>)
 80010f0:	f000 f9c8 	bl	8001484 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40013000 	.word	0x40013000
 8001100:	40021000 	.word	0x40021000
 8001104:	40010800 	.word	0x40010800

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114e:	f000 f875 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}

08001156 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001164:	f7ff fff7 	bl	8001156 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800116a:	490c      	ldr	r1, [pc, #48]	; (800119c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800116c:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001180:	4c09      	ldr	r4, [pc, #36]	; (80011a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f001 ffbb 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001192:	f7fe ffdb 	bl	800014c <main>
  bx lr
 8001196:	4770      	bx	lr
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80011a0:	08003f4c 	.word	0x08003f4c
  ldr r2, =_sbss
 80011a4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80011a8:	20000504 	.word	0x20000504

080011ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC1_2_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_Init+0x28>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_Init+0x28>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f92b 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	200f      	movs	r0, #15
 80011c8:	f000 f808 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fee0 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40022000 	.word	0x40022000

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_InitTick+0x58>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f935 	bl	800146a <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e00e      	b.n	8001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d80a      	bhi.n	8001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 f90b 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_InitTick+0x5c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000008 	.word	0x20000008
 8001234:	20000010 	.word	0x20000010
 8001238:	2000000c 	.word	0x2000000c

0800123c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_IncTick+0x1c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_IncTick+0x20>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a03      	ldr	r2, [pc, #12]	; (800125c <HAL_IncTick+0x20>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	20000010 	.word	0x20000010
 800125c:	20000500 	.word	0x20000500

08001260 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <HAL_GetTick+0x10>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	20000500 	.word	0x20000500

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff fff0 	bl	8001260 <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffe0 	bl	8001260 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000010 	.word	0x20000010

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff90 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff49 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff5e 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff90 	bl	8001374 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5f 	bl	8001320 <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffb0 	bl	80013d8 <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b08b      	sub	sp, #44	; 0x2c
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e161      	b.n	800175c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001498:	2201      	movs	r2, #1
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8150 	bne.w	8001756 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a97      	ldr	r2, [pc, #604]	; (8001718 <HAL_GPIO_Init+0x294>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d05e      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014c0:	4a95      	ldr	r2, [pc, #596]	; (8001718 <HAL_GPIO_Init+0x294>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d875      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014c6:	4a95      	ldr	r2, [pc, #596]	; (800171c <HAL_GPIO_Init+0x298>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d058      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014cc:	4a93      	ldr	r2, [pc, #588]	; (800171c <HAL_GPIO_Init+0x298>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d86f      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014d2:	4a93      	ldr	r2, [pc, #588]	; (8001720 <HAL_GPIO_Init+0x29c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d052      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014d8:	4a91      	ldr	r2, [pc, #580]	; (8001720 <HAL_GPIO_Init+0x29c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d869      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014de:	4a91      	ldr	r2, [pc, #580]	; (8001724 <HAL_GPIO_Init+0x2a0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d04c      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014e4:	4a8f      	ldr	r2, [pc, #572]	; (8001724 <HAL_GPIO_Init+0x2a0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d863      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014ea:	4a8f      	ldr	r2, [pc, #572]	; (8001728 <HAL_GPIO_Init+0x2a4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d046      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014f0:	4a8d      	ldr	r2, [pc, #564]	; (8001728 <HAL_GPIO_Init+0x2a4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d85d      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014f6:	2b12      	cmp	r3, #18
 80014f8:	d82a      	bhi.n	8001550 <HAL_GPIO_Init+0xcc>
 80014fa:	2b12      	cmp	r3, #18
 80014fc:	d859      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014fe:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <HAL_GPIO_Init+0x80>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	0800157f 	.word	0x0800157f
 8001508:	08001559 	.word	0x08001559
 800150c:	0800156b 	.word	0x0800156b
 8001510:	080015ad 	.word	0x080015ad
 8001514:	080015b3 	.word	0x080015b3
 8001518:	080015b3 	.word	0x080015b3
 800151c:	080015b3 	.word	0x080015b3
 8001520:	080015b3 	.word	0x080015b3
 8001524:	080015b3 	.word	0x080015b3
 8001528:	080015b3 	.word	0x080015b3
 800152c:	080015b3 	.word	0x080015b3
 8001530:	080015b3 	.word	0x080015b3
 8001534:	080015b3 	.word	0x080015b3
 8001538:	080015b3 	.word	0x080015b3
 800153c:	080015b3 	.word	0x080015b3
 8001540:	080015b3 	.word	0x080015b3
 8001544:	080015b3 	.word	0x080015b3
 8001548:	08001561 	.word	0x08001561
 800154c:	08001575 	.word	0x08001575
 8001550:	4a76      	ldr	r2, [pc, #472]	; (800172c <HAL_GPIO_Init+0x2a8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001556:	e02c      	b.n	80015b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e029      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	3304      	adds	r3, #4
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e024      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	3308      	adds	r3, #8
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e01f      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	330c      	adds	r3, #12
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e01a      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001586:	2304      	movs	r3, #4
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e013      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001594:	2308      	movs	r3, #8
 8001596:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	611a      	str	r2, [r3, #16]
          break;
 800159e:	e009      	b.n	80015b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a0:	2308      	movs	r3, #8
 80015a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	615a      	str	r2, [r3, #20]
          break;
 80015aa:	e003      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          break;
 80015b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2bff      	cmp	r3, #255	; 0xff
 80015b8:	d801      	bhi.n	80015be <HAL_GPIO_Init+0x13a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_Init+0x13e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3304      	adds	r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2bff      	cmp	r3, #255	; 0xff
 80015c8:	d802      	bhi.n	80015d0 <HAL_GPIO_Init+0x14c>
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0x152>
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	3b08      	subs	r3, #8
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	210f      	movs	r1, #15
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	6a39      	ldr	r1, [r7, #32]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	431a      	orrs	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80a9 	beq.w	8001756 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <HAL_GPIO_Init+0x2ac>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a49      	ldr	r2, [pc, #292]	; (8001730 <HAL_GPIO_Init+0x2ac>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_GPIO_Init+0x2ac>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800161c:	4a45      	ldr	r2, [pc, #276]	; (8001734 <HAL_GPIO_Init+0x2b0>)
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3d      	ldr	r2, [pc, #244]	; (8001738 <HAL_GPIO_Init+0x2b4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00d      	beq.n	8001664 <HAL_GPIO_Init+0x1e0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3c      	ldr	r2, [pc, #240]	; (800173c <HAL_GPIO_Init+0x2b8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d007      	beq.n	8001660 <HAL_GPIO_Init+0x1dc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a3b      	ldr	r2, [pc, #236]	; (8001740 <HAL_GPIO_Init+0x2bc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d101      	bne.n	800165c <HAL_GPIO_Init+0x1d8>
 8001658:	2302      	movs	r3, #2
 800165a:	e004      	b.n	8001666 <HAL_GPIO_Init+0x1e2>
 800165c:	2303      	movs	r3, #3
 800165e:	e002      	b.n	8001666 <HAL_GPIO_Init+0x1e2>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_GPIO_Init+0x1e2>
 8001664:	2300      	movs	r3, #0
 8001666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001668:	f002 0203 	and.w	r2, r2, #3
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	4093      	lsls	r3, r2
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001676:	492f      	ldr	r1, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x2b0>)
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001690:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	492b      	ldr	r1, [pc, #172]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4927      	ldr	r1, [pc, #156]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	4921      	ldr	r1, [pc, #132]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	60cb      	str	r3, [r1, #12]
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	491d      	ldr	r1, [pc, #116]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4917      	ldr	r1, [pc, #92]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	4913      	ldr	r1, [pc, #76]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01f      	beq.n	8001748 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	490d      	ldr	r1, [pc, #52]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
 8001714:	e01f      	b.n	8001756 <HAL_GPIO_Init+0x2d2>
 8001716:	bf00      	nop
 8001718:	10320000 	.word	0x10320000
 800171c:	10310000 	.word	0x10310000
 8001720:	10220000 	.word	0x10220000
 8001724:	10210000 	.word	0x10210000
 8001728:	10120000 	.word	0x10120000
 800172c:	10110000 	.word	0x10110000
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000
 8001738:	40010800 	.word	0x40010800
 800173c:	40010c00 	.word	0x40010c00
 8001740:	40011000 	.word	0x40011000
 8001744:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_GPIO_Init+0x2f4>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	43db      	mvns	r3, r3
 8001750:	4909      	ldr	r1, [pc, #36]	; (8001778 <HAL_GPIO_Init+0x2f4>)
 8001752:	4013      	ands	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	3301      	adds	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	f47f ae96 	bne.w	8001498 <HAL_GPIO_Init+0x14>
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	372c      	adds	r7, #44	; 0x2c
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40010400 	.word	0x40010400

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	611a      	str	r2, [r3, #16]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e12b      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fc0e 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2224      	movs	r2, #36	; 0x24
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800180e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001810:	f001 f960 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a81      	ldr	r2, [pc, #516]	; (8001a20 <HAL_I2C_Init+0x274>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d807      	bhi.n	8001830 <HAL_I2C_Init+0x84>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a80      	ldr	r2, [pc, #512]	; (8001a24 <HAL_I2C_Init+0x278>)
 8001824:	4293      	cmp	r3, r2
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	e006      	b.n	800183e <HAL_I2C_Init+0x92>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a7d      	ldr	r2, [pc, #500]	; (8001a28 <HAL_I2C_Init+0x27c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	bf94      	ite	ls
 8001838:	2301      	movls	r3, #1
 800183a:	2300      	movhi	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0e7      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a78      	ldr	r2, [pc, #480]	; (8001a2c <HAL_I2C_Init+0x280>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0c9b      	lsrs	r3, r3, #18
 8001850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a6a      	ldr	r2, [pc, #424]	; (8001a20 <HAL_I2C_Init+0x274>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d802      	bhi.n	8001880 <HAL_I2C_Init+0xd4>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	e009      	b.n	8001894 <HAL_I2C_Init+0xe8>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	4a69      	ldr	r2, [pc, #420]	; (8001a30 <HAL_I2C_Init+0x284>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	3301      	adds	r3, #1
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	495c      	ldr	r1, [pc, #368]	; (8001a20 <HAL_I2C_Init+0x274>)
 80018b0:	428b      	cmp	r3, r1
 80018b2:	d819      	bhi.n	80018e8 <HAL_I2C_Init+0x13c>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e59      	subs	r1, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018c8:	400b      	ands	r3, r1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <HAL_I2C_Init+0x138>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1e59      	subs	r1, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e2:	e051      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e4:	2304      	movs	r3, #4
 80018e6:	e04f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d111      	bne.n	8001914 <HAL_I2C_Init+0x168>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	440b      	add	r3, r1
 80018fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001902:	3301      	adds	r3, #1
 8001904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e012      	b.n	800193a <HAL_I2C_Init+0x18e>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1e58      	subs	r0, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	0099      	lsls	r1, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	fbb0 f3f3 	udiv	r3, r0, r3
 800192a:	3301      	adds	r3, #1
 800192c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_Init+0x196>
 800193e:	2301      	movs	r3, #1
 8001940:	e022      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10e      	bne.n	8001968 <HAL_I2C_Init+0x1bc>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1e58      	subs	r0, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6859      	ldr	r1, [r3, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	fbb0 f3f3 	udiv	r3, r0, r3
 800195c:	3301      	adds	r3, #1
 800195e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001966:	e00f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e58      	subs	r0, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	0099      	lsls	r1, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	fbb0 f3f3 	udiv	r3, r0, r3
 800197e:	3301      	adds	r3, #1
 8001980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	6809      	ldr	r1, [r1, #0]
 800198c:	4313      	orrs	r3, r2
 800198e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6911      	ldr	r1, [r2, #16]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68d2      	ldr	r2, [r2, #12]
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	000186a0 	.word	0x000186a0
 8001a24:	001e847f 	.word	0x001e847f
 8001a28:	003d08ff 	.word	0x003d08ff
 8001a2c:	431bde83 	.word	0x431bde83
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	460b      	mov	r3, r1
 8001a42:	817b      	strh	r3, [r7, #10]
 8001a44:	4613      	mov	r3, r2
 8001a46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff fc0a 	bl	8001260 <HAL_GetTick>
 8001a4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	f040 80e0 	bne.w	8001c1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2319      	movs	r3, #25
 8001a62:	2201      	movs	r2, #1
 8001a64:	4970      	ldr	r1, [pc, #448]	; (8001c28 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 fa92 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
 8001a74:	e0d3      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_I2C_Master_Transmit+0x50>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0cc      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d007      	beq.n	8001aaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2221      	movs	r2, #33	; 0x21
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	893a      	ldrh	r2, [r7, #8]
 8001ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a50      	ldr	r2, [pc, #320]	; (8001c2c <HAL_I2C_Master_Transmit+0x1f8>)
 8001aea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001aec:	8979      	ldrh	r1, [r7, #10]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	6a3a      	ldr	r2, [r7, #32]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f9ca 	bl	8001e8c <I2C_MasterRequestWrite>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e08d      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b18:	e066      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	6a39      	ldr	r1, [r7, #32]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fb50 	bl	80021c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00d      	beq.n	8001b46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d107      	bne.n	8001b42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e06b      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	781a      	ldrb	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d11b      	bne.n	8001bbc <HAL_I2C_Master_Transmit+0x188>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d017      	beq.n	8001bbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	6a39      	ldr	r1, [r7, #32]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fb47 	bl	8002254 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00d      	beq.n	8001be8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d107      	bne.n	8001be4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e01a      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d194      	bne.n	8001b1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e000      	b.n	8001c1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c1c:	2302      	movs	r3, #2
  }
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	00100002 	.word	0x00100002
 8001c2c:	ffff0000 	.word	0xffff0000

08001c30 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff fb0e 	bl	8001260 <HAL_GetTick>
 8001c44:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	f040 8111 	bne.w	8001e7a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2319      	movs	r3, #25
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4988      	ldr	r1, [pc, #544]	; (8001e84 <HAL_I2C_IsDeviceReady+0x254>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f994 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e104      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_I2C_IsDeviceReady+0x50>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e0fd      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d007      	beq.n	8001ca6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2224      	movs	r2, #36	; 0x24
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4a70      	ldr	r2, [pc, #448]	; (8001e88 <HAL_I2C_IsDeviceReady+0x258>)
 8001cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f952 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00d      	beq.n	8001d0e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d00:	d103      	bne.n	8001d0a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0b6      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d1c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fa9f 	bl	8001260 <HAL_GetTick>
 8001d22:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	bf0c      	ite	eq
 8001d32:	2301      	moveq	r3, #1
 8001d34:	2300      	movne	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d48:	bf0c      	ite	eq
 8001d4a:	2301      	moveq	r3, #1
 8001d4c:	2300      	movne	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d52:	e025      	b.n	8001da0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d54:	f7ff fa84 	bl	8001260 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d302      	bcc.n	8001d6a <HAL_I2C_IsDeviceReady+0x13a>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	22a0      	movs	r2, #160	; 0xa0
 8001d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2ba0      	cmp	r3, #160	; 0xa0
 8001daa:	d005      	beq.n	8001db8 <HAL_I2C_IsDeviceReady+0x188>
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <HAL_I2C_IsDeviceReady+0x188>
 8001db2:	7dbb      	ldrb	r3, [r7, #22]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0cd      	beq.n	8001d54 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d129      	bne.n	8001e22 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2319      	movs	r3, #25
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4921      	ldr	r1, [pc, #132]	; (8001e84 <HAL_I2C_IsDeviceReady+0x254>)
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f8c6 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e036      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e02c      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e30:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e3a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2319      	movs	r3, #25
 8001e42:	2201      	movs	r2, #1
 8001e44:	490f      	ldr	r1, [pc, #60]	; (8001e84 <HAL_I2C_IsDeviceReady+0x254>)
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f8a2 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e012      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f4ff af32 	bcc.w	8001cca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e7a:	2302      	movs	r3, #2
  }
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	00100002 	.word	0x00100002
 8001e88:	ffff0000 	.word	0xffff0000

08001e8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d006      	beq.n	8001eb6 <I2C_MasterRequestWrite+0x2a>
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d003      	beq.n	8001eb6 <I2C_MasterRequestWrite+0x2a>
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001eb4:	d108      	bne.n	8001ec8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e00b      	b.n	8001ee0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	2b12      	cmp	r3, #18
 8001ece:	d107      	bne.n	8001ee0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ede:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f84f 	bl	8001f90 <I2C_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f06:	d103      	bne.n	8001f10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e035      	b.n	8001f80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f1c:	d108      	bne.n	8001f30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f1e:	897b      	ldrh	r3, [r7, #10]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f2c:	611a      	str	r2, [r3, #16]
 8001f2e:	e01b      	b.n	8001f68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f30:	897b      	ldrh	r3, [r7, #10]
 8001f32:	11db      	asrs	r3, r3, #7
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f003 0306 	and.w	r3, r3, #6
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f063 030f 	orn	r3, r3, #15
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <I2C_MasterRequestWrite+0xfc>)
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f898 	bl	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e010      	b.n	8001f80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f5e:	897b      	ldrh	r3, [r7, #10]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4907      	ldr	r1, [pc, #28]	; (8001f8c <I2C_MasterRequestWrite+0x100>)
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f888 	bl	8002084 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	00010008 	.word	0x00010008
 8001f8c:	00010002 	.word	0x00010002

08001f90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fa0:	e048      	b.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d044      	beq.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001faa:	f7ff f959 	bl	8001260 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d139      	bne.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	0c1b      	lsrs	r3, r3, #16
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10d      	bne.n	8001fe6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf0c      	ite	eq
 8001fdc:	2301      	moveq	r3, #1
 8001fde:	2300      	movne	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	e00c      	b.n	8002000 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	43da      	mvns	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	429a      	cmp	r2, r3
 8002004:	d116      	bne.n	8002034 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e023      	b.n	800207c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	0c1b      	lsrs	r3, r3, #16
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10d      	bne.n	800205a <I2C_WaitOnFlagUntilTimeout+0xca>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	43da      	mvns	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4013      	ands	r3, r2
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	e00c      	b.n	8002074 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	43da      	mvns	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4013      	ands	r3, r2
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	429a      	cmp	r2, r3
 8002078:	d093      	beq.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002092:	e071      	b.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a2:	d123      	bne.n	80020ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0204 	orr.w	r2, r3, #4
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e067      	b.n	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d041      	beq.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f4:	f7ff f8b4 	bl	8001260 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	d302      	bcc.n	800210a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d136      	bne.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d10c      	bne.n	800212e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4013      	ands	r3, r2
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	e00b      	b.n	8002146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	43da      	mvns	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4013      	ands	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d016      	beq.n	8002178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e021      	b.n	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0c1b      	lsrs	r3, r3, #16
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10c      	bne.n	800219c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	43da      	mvns	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4013      	ands	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf14      	ite	ne
 8002194:	2301      	movne	r3, #1
 8002196:	2300      	moveq	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e00b      	b.n	80021b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4013      	ands	r3, r2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf14      	ite	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	2300      	moveq	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f47f af6d 	bne.w	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021d0:	e034      	b.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f886 	bl	80022e4 <I2C_IsAcknowledgeFailed>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e034      	b.n	800224c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d028      	beq.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ea:	f7ff f839 	bl	8001260 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d11d      	bne.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220a:	2b80      	cmp	r3, #128	; 0x80
 800220c:	d016      	beq.n	800223c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e007      	b.n	800224c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	2b80      	cmp	r3, #128	; 0x80
 8002248:	d1c3      	bne.n	80021d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002260:	e034      	b.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f83e 	bl	80022e4 <I2C_IsAcknowledgeFailed>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e034      	b.n	80022dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d028      	beq.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227a:	f7fe fff1 	bl	8001260 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	429a      	cmp	r2, r3
 8002288:	d302      	bcc.n	8002290 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d11d      	bne.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b04      	cmp	r3, #4
 800229c:	d016      	beq.n	80022cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f043 0220 	orr.w	r2, r3, #32
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e007      	b.n	80022dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d1c3      	bne.n	8002262 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fa:	d11b      	bne.n	8002334 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002304:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f043 0204 	orr.w	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e272      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8087 	beq.w	800246e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002360:	4b92      	ldr	r3, [pc, #584]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b04      	cmp	r3, #4
 800236a:	d00c      	beq.n	8002386 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800236c:	4b8f      	ldr	r3, [pc, #572]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d112      	bne.n	800239e <HAL_RCC_OscConfig+0x5e>
 8002378:	4b8c      	ldr	r3, [pc, #560]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002384:	d10b      	bne.n	800239e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002386:	4b89      	ldr	r3, [pc, #548]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d06c      	beq.n	800246c <HAL_RCC_OscConfig+0x12c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d168      	bne.n	800246c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e24c      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x76>
 80023a8:	4b80      	ldr	r3, [pc, #512]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a7f      	ldr	r2, [pc, #508]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	e02e      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x98>
 80023be:	4b7b      	ldr	r3, [pc, #492]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7a      	ldr	r2, [pc, #488]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b78      	ldr	r3, [pc, #480]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a77      	ldr	r2, [pc, #476]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e01d      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0xbc>
 80023e2:	4b72      	ldr	r3, [pc, #456]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a71      	ldr	r2, [pc, #452]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b6f      	ldr	r3, [pc, #444]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6e      	ldr	r2, [pc, #440]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023fc:	4b6b      	ldr	r3, [pc, #428]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6a      	ldr	r2, [pc, #424]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b68      	ldr	r3, [pc, #416]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a67      	ldr	r2, [pc, #412]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 800240e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002412:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7fe ff20 	bl	8001260 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7fe ff1c 	bl	8001260 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e200      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xe4>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe ff0c 	bl	8001260 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe ff08 	bl	8001260 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1ec      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x10c>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d063      	beq.n	8002542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800247a:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002486:	4b49      	ldr	r3, [pc, #292]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b08      	cmp	r3, #8
 8002490:	d11c      	bne.n	80024cc <HAL_RCC_OscConfig+0x18c>
 8002492:	4b46      	ldr	r3, [pc, #280]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d116      	bne.n	80024cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	4b43      	ldr	r3, [pc, #268]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x176>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1c0      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4939      	ldr	r1, [pc, #228]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	e03a      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <HAL_RCC_OscConfig+0x270>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fec1 	bl	8001260 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7fe febd 	bl	8001260 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1a1      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4927      	ldr	r1, [pc, #156]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_RCC_OscConfig+0x270>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fea0 	bl	8001260 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002524:	f7fe fe9c 	bl	8001260 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e180      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d03a      	beq.n	80025c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d019      	beq.n	800258a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_RCC_OscConfig+0x274>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7fe fe80 	bl	8001260 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002564:	f7fe fe7c 	bl	8001260 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e160      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002582:	2001      	movs	r0, #1
 8002584:	f000 faba 	bl	8002afc <RCC_Delay>
 8002588:	e01c      	b.n	80025c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_RCC_OscConfig+0x274>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002590:	f7fe fe66 	bl	8001260 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002596:	e00f      	b.n	80025b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7fe fe62 	bl	8001260 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d908      	bls.n	80025b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e146      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	42420000 	.word	0x42420000
 80025b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	4b92      	ldr	r3, [pc, #584]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e9      	bne.n	8002598 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80a6 	beq.w	800271e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d6:	4b8b      	ldr	r3, [pc, #556]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10d      	bne.n	80025fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	4b88      	ldr	r3, [pc, #544]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a87      	ldr	r2, [pc, #540]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	61d3      	str	r3, [r2, #28]
 80025ee:	4b85      	ldr	r3, [pc, #532]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b82      	ldr	r3, [pc, #520]	; (8002808 <HAL_RCC_OscConfig+0x4c8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b7f      	ldr	r3, [pc, #508]	; (8002808 <HAL_RCC_OscConfig+0x4c8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7e      	ldr	r2, [pc, #504]	; (8002808 <HAL_RCC_OscConfig+0x4c8>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002616:	f7fe fe23 	bl	8001260 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe fe1f 	bl	8001260 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	; 0x64
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e103      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b75      	ldr	r3, [pc, #468]	; (8002808 <HAL_RCC_OscConfig+0x4c8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x312>
 8002644:	4b6f      	ldr	r3, [pc, #444]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a6e      	ldr	r2, [pc, #440]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	e02d      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x334>
 800265a:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a69      	ldr	r2, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a66      	ldr	r2, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	e01c      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b05      	cmp	r3, #5
 800267a:	d10c      	bne.n	8002696 <HAL_RCC_OscConfig+0x356>
 800267c:	4b61      	ldr	r3, [pc, #388]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a60      	ldr	r2, [pc, #384]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	6213      	str	r3, [r2, #32]
 8002688:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4a5d      	ldr	r2, [pc, #372]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6213      	str	r3, [r2, #32]
 8002694:	e00b      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002696:	4b5b      	ldr	r3, [pc, #364]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4a5a      	ldr	r2, [pc, #360]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	6213      	str	r3, [r2, #32]
 80026a2:	4b58      	ldr	r3, [pc, #352]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4a57      	ldr	r2, [pc, #348]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d015      	beq.n	80026e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fdd3 	bl	8001260 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fdcf 	bl	8001260 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0b1      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ee      	beq.n	80026be <HAL_RCC_OscConfig+0x37e>
 80026e0:	e014      	b.n	800270c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fdbd 	bl	8001260 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7fe fdb9 	bl	8001260 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e09b      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002700:	4b40      	ldr	r3, [pc, #256]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ee      	bne.n	80026ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d105      	bne.n	800271e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4b3c      	ldr	r3, [pc, #240]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8087 	beq.w	8002836 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002728:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d061      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d146      	bne.n	80027ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273c:	4b33      	ldr	r3, [pc, #204]	; (800280c <HAL_RCC_OscConfig+0x4cc>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7fe fd8d 	bl	8001260 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274a:	f7fe fd89 	bl	8001260 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e06d      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275c:	4b29      	ldr	r3, [pc, #164]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002770:	d108      	bne.n	8002784 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002772:	4b24      	ldr	r3, [pc, #144]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	4921      	ldr	r1, [pc, #132]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a19      	ldr	r1, [r3, #32]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	430b      	orrs	r3, r1
 8002796:	491b      	ldr	r1, [pc, #108]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <HAL_RCC_OscConfig+0x4cc>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fe fd5d 	bl	8001260 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe fd59 	bl	8001260 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e03d      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x46a>
 80027c8:	e035      	b.n	8002836 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_RCC_OscConfig+0x4cc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fd46 	bl	8001260 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe fd42 	bl	8001260 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e026      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x498>
 80027f6:	e01e      	b.n	8002836 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e019      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_OscConfig+0x500>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0d0      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d910      	bls.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4965      	ldr	r1, [pc, #404]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b63      	ldr	r3, [pc, #396]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0b8      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a0:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b8:	4b53      	ldr	r3, [pc, #332]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a52      	ldr	r2, [pc, #328]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b50      	ldr	r3, [pc, #320]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	494d      	ldr	r1, [pc, #308]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d040      	beq.n	8002964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e07f      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e073      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06b      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4936      	ldr	r1, [pc, #216]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002934:	f7fe fc94 	bl	8001260 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fe fc90 	bl	8001260 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e053      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 020c 	and.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d1eb      	bne.n	800293c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d210      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	4922      	ldr	r1, [pc, #136]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e032      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4916      	ldr	r1, [pc, #88]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	490e      	ldr	r1, [pc, #56]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029d2:	f000 f821 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	490a      	ldr	r1, [pc, #40]	; (8002a0c <HAL_RCC_ClockConfig+0x1c8>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0x1cc>)
 80029ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_ClockConfig+0x1d0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fbf2 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40022000 	.word	0x40022000
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	08003f18 	.word	0x08003f18
 8002a10:	20000008 	.word	0x20000008
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_RCC_GetSysClockFreq+0x94>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d002      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x30>
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_GetSysClockFreq+0x36>
 8002a46:	e027      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a4a:	613b      	str	r3, [r7, #16]
      break;
 8002a4c:	e027      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0c9b      	lsrs	r3, r3, #18
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a58:	5cd3      	ldrb	r3, [r2, r3]
 8002a5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d010      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_RCC_GetSysClockFreq+0x94>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	0c5b      	lsrs	r3, r3, #17
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a7a:	fb03 f202 	mul.w	r2, r3, r2
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e004      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	613b      	str	r3, [r7, #16]
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9a:	613b      	str	r3, [r7, #16]
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	693b      	ldr	r3, [r7, #16]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	007a1200 	.word	0x007a1200
 8002ab4:	08003f30 	.word	0x08003f30
 8002ab8:	08003f40 	.word	0x08003f40
 8002abc:	003d0900 	.word	0x003d0900

08002ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac4:	4b02      	ldr	r3, [pc, #8]	; (8002ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	20000008 	.word	0x20000008

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad8:	f7ff fff2 	bl	8002ac0 <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08003f28 	.word	0x08003f28

08002afc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <RCC_Delay+0x34>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <RCC_Delay+0x38>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0a5b      	lsrs	r3, r3, #9
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b18:	bf00      	nop
  }
  while (Delay --);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1e5a      	subs	r2, r3, #1
 8002b1e:	60fa      	str	r2, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f9      	bne.n	8002b18 <RCC_Delay+0x1c>
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	20000008 	.word	0x20000008
 8002b34:	10624dd3 	.word	0x10624dd3

08002b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e076      	b.n	8002c38 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d108      	bne.n	8002b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b5a:	d009      	beq.n	8002b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	61da      	str	r2, [r3, #28]
 8002b62:	e005      	b.n	8002b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe fa72 	bl	8001074 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	ea42 0103 	orr.w	r1, r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	0c1a      	lsrs	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f002 0204 	and.w	r2, r2, #4
 8002c16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c52:	f7fe fb05 	bl	8001260 <HAL_GetTick>
 8002c56:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c5e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c6a:	7ffb      	ldrb	r3, [r7, #31]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d00c      	beq.n	8002c8a <HAL_SPI_TransmitReceive+0x4a>
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c76:	d106      	bne.n	8002c86 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_SPI_TransmitReceive+0x46>
 8002c80:	7ffb      	ldrb	r3, [r7, #31]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d001      	beq.n	8002c8a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002c86:	2302      	movs	r3, #2
 8002c88:	e17f      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_SPI_TransmitReceive+0x5c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_SPI_TransmitReceive+0x5c>
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e174      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_SPI_TransmitReceive+0x6e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e16d      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x34a>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d003      	beq.n	8002cca <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	887a      	ldrh	r2, [r7, #2]
 8002cda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	887a      	ldrh	r2, [r7, #2]
 8002cf2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d007      	beq.n	8002d1e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d26:	d17e      	bne.n	8002e26 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <HAL_SPI_TransmitReceive+0xf6>
 8002d30:	8afb      	ldrh	r3, [r7, #22]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d16c      	bne.n	8002e10 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	881a      	ldrh	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	1c9a      	adds	r2, r3, #2
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d5a:	e059      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d11b      	bne.n	8002da2 <HAL_SPI_TransmitReceive+0x162>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d016      	beq.n	8002da2 <HAL_SPI_TransmitReceive+0x162>
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d113      	bne.n	8002da2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	881a      	ldrh	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	1c9a      	adds	r2, r3, #2
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d119      	bne.n	8002de4 <HAL_SPI_TransmitReceive+0x1a4>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d014      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	1c9a      	adds	r2, r3, #2
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002de0:	2301      	movs	r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002de4:	f7fe fa3c 	bl	8001260 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d80d      	bhi.n	8002e10 <HAL_SPI_TransmitReceive+0x1d0>
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfa:	d009      	beq.n	8002e10 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0bc      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1a0      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x11c>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d19b      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x11c>
 8002e24:	e082      	b.n	8002f2c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_TransmitReceive+0x1f4>
 8002e2e:	8afb      	ldrh	r3, [r7, #22]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d171      	bne.n	8002f18 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	7812      	ldrb	r2, [r2, #0]
 8002e40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e5a:	e05d      	b.n	8002f18 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d11c      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x264>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d017      	beq.n	8002ea4 <HAL_SPI_TransmitReceive+0x264>
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d114      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	7812      	ldrb	r2, [r2, #0]
 8002e86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d119      	bne.n	8002ee6 <HAL_SPI_TransmitReceive+0x2a6>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d014      	beq.n	8002ee6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ee6:	f7fe f9bb 	bl	8001260 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d803      	bhi.n	8002efe <HAL_SPI_TransmitReceive+0x2be>
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d102      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x2c4>
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e038      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d19c      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x21c>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d197      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f8b7 	bl	80030a4 <SPI_EndRxTxTransaction>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e01d      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002f88:	2300      	movs	r3, #0
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3728      	adds	r7, #40	; 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fa4:	f7fe f95c 	bl	8001260 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fb4:	f7fe f954 	bl	8001260 <HAL_GetTick>
 8002fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fba:	4b39      	ldr	r3, [pc, #228]	; (80030a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	015b      	lsls	r3, r3, #5
 8002fc0:	0d1b      	lsrs	r3, r3, #20
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fca:	e054      	b.n	8003076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d050      	beq.n	8003076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fd4:	f7fe f944 	bl	8001260 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d902      	bls.n	8002fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d13d      	bne.n	8003066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003002:	d111      	bne.n	8003028 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300c:	d004      	beq.n	8003018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003016:	d107      	bne.n	8003028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003030:	d10f      	bne.n	8003052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e017      	b.n	8003096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3b01      	subs	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4013      	ands	r3, r2
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	429a      	cmp	r2, r3
 8003092:	d19b      	bne.n	8002fcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000008 	.word	0x20000008

080030a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2201      	movs	r2, #1
 80030b8:	2102      	movs	r1, #2
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7ff ff6a 	bl	8002f94 <SPI_WaitFlagStateUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e013      	b.n	80030fe <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff ff57 	bl	8002f94 <SPI_WaitFlagStateUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e000      	b.n	80030fe <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	2600      	movs	r6, #0
 800310c:	4d0c      	ldr	r5, [pc, #48]	; (8003140 <__libc_init_array+0x38>)
 800310e:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <__libc_init_array+0x3c>)
 8003110:	1b64      	subs	r4, r4, r5
 8003112:	10a4      	asrs	r4, r4, #2
 8003114:	42a6      	cmp	r6, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	f000 f822 	bl	8003160 <_init>
 800311c:	2600      	movs	r6, #0
 800311e:	4d0a      	ldr	r5, [pc, #40]	; (8003148 <__libc_init_array+0x40>)
 8003120:	4c0a      	ldr	r4, [pc, #40]	; (800314c <__libc_init_array+0x44>)
 8003122:	1b64      	subs	r4, r4, r5
 8003124:	10a4      	asrs	r4, r4, #2
 8003126:	42a6      	cmp	r6, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003130:	4798      	blx	r3
 8003132:	3601      	adds	r6, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	f855 3b04 	ldr.w	r3, [r5], #4
 800313a:	4798      	blx	r3
 800313c:	3601      	adds	r6, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	08003f44 	.word	0x08003f44
 8003144:	08003f44 	.word	0x08003f44
 8003148:	08003f44 	.word	0x08003f44
 800314c:	08003f48 	.word	0x08003f48

08003150 <memset>:
 8003150:	4603      	mov	r3, r0
 8003152:	4402      	add	r2, r0
 8003154:	4293      	cmp	r3, r2
 8003156:	d100      	bne.n	800315a <memset+0xa>
 8003158:	4770      	bx	lr
 800315a:	f803 1b01 	strb.w	r1, [r3], #1
 800315e:	e7f9      	b.n	8003154 <memset+0x4>

08003160 <_init>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr

0800316c <_fini>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr
